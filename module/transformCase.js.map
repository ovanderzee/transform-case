{"version":3,"file":"transformCase.js","sources":["../src/utilities.js","../src/constants.js","../src/render.js","../src/collect.js","../src/index.js"],"sourcesContent":["/**\n * Helper Test for being a string with length 1\n * @private\n * @param {String} char\n * @returns {Boolean} is a number 0-9\n */\nconst isChar = char => {\n    return Boolean(char && typeof char === 'string' && char.length === 1)\n}\n\n/**\n * Test for being a string representation of a digit\n * @private\n * @param {String} char\n * @returns {Boolean} is a number 0-9\n */\nconst isDigit = char => {\n    return isChar(char) && Boolean(char.match(/[0-9]/))\n}\n\n/**\n * Test for being a letter\n * @private\n * @param {String} char\n * @returns {Boolaen} char is a letter\n */\nconst isLetter = char => {\n    return isChar(char) && char.toLowerCase() !== char.toUpperCase()\n}\n\n/**\n * Test for being a lowercase letter\n * @private\n * @param {String} char\n * @returns {Boolaen} char is a lower-case letter\n */\nconst isLower = char => {\n    return (\n        isChar(char) &&\n        char === char.toLowerCase() &&\n        char !== char.toUpperCase()\n    )\n}\n\n/**\n * Test for being an uppercase letter\n * @private\n * @param {String} char\n * @returns {Boolaen} char is a upper-case letter\n */\nconst isUpper = char => {\n    return (\n        isChar(char) &&\n        char === char.toUpperCase() &&\n        char !== char.toLowerCase()\n    )\n}\n\n/**\n * Test for being a string consisting of letters and/or digits\n * @private\n * @param {String} line\n * @returns {Boolean} consists of letters and/or digits only\n */\nconst isPureAlphaNumeric = line => {\n    return (\n        line &&\n        line.split &&\n        !line.split('').some(char => {\n            return !isLetter(char) && !isDigit(char)\n        })\n    )\n}\n\nexport { isDigit, isLetter, isLower, isUpper, isPureAlphaNumeric }\n","/*\n * Intake options\n * @member {Array} preserve - [keep1, keep2]\n * @member {Object} replace - {toReplace1: replacement1, toReplace2: replacement2}\n */\nconst INTAKE_OPTIONS = {\n    delimit: [],\n    preserve: [],\n    replace: {},\n    delimitInput: '',\n    delimitLetterNumber: true,\n    delimitLowerUpper: true,\n    delimitNumberLetter: true,\n    delimitUpperLower: false,\n    delimitUpperUpperLower: true,\n    delimitOutput: ' ',\n}\n\n/*\n * Render model, with do-nothing-functions\n */\nconst RENDER_MODEL = {\n    postProcess: word => word,\n    firstWordFirstChar: word => word,\n    firstWordNextChars: word => word,\n    nextWordsFirstChar: word => word,\n    nextWordsNextChars: word => word,\n}\n\nexport { INTAKE_OPTIONS, RENDER_MODEL }\n","import { RENDER_MODEL } from './constants'\n\n/**\n * Convert curly single quotes and backticks to straight single quotes,\n * convert curly double quotes to straight double quotes\n */\nconst normaliseQuotes = line => {\n    return line.replace(/‘’`/g, \"'\").replace(/“”/g, '\"')\n}\n\n/**\n * Remove all puctuation from a string\n */\nconst removePunctuation = line => {\n    return normaliseQuotes(line).replace(/[…,:;[\\](){}\\-‐–—'\".!?]/g, '')\n}\n\nconst asIs = word => word\nconst toLower = word => word.toLowerCase()\nconst toUpper = word => word.toUpperCase()\n\nconst patterns = function(words, options) {\n    const transform = model => {\n        let transformation = words.map((word, index) => {\n            if (index === 0) {\n                return options.preserve.includes(word)\n                    ? word\n                    : model.firstWordFirstChar(word.substr(0, 1)) +\n                          model.firstWordNextChars(word.substr(1))\n            } else {\n                return options.preserve.includes(word)\n                    ? word\n                    : model.nextWordsFirstChar(word.substr(0, 1)) +\n                          model.nextWordsNextChars(word.substr(1))\n            }\n        })\n        return model.postProcess(transformation.join(model.delimitOutput))\n    }\n\n    const camelCase = () => {\n        const model = Object.assign({}, RENDER_MODEL, {\n            postProcess: removePunctuation,\n            delimitOutput: '',\n            firstWordFirstChar: toLower,\n            firstWordNextChars: toLower,\n            nextWordsFirstChar: toUpper,\n            nextWordsNextChars: toLower,\n        })\n        return transform(model)\n    }\n\n    const humanTitle = () => {\n        const model = Object.assign({}, RENDER_MODEL, {\n            delimitOutput: ' ',\n            firstWordFirstChar: toUpper,\n            nextWordsFirstChar: toUpper,\n        })\n        return transform(model)\n    }\n\n    return {\n        camelCase: camelCase,\n        humanTitle: humanTitle,\n    }\n}\n\nexport { patterns }\n","import {\n    isDigit,\n    isLetter,\n    isLower,\n    isUpper,\n    isPureAlphaNumeric,\n} from './utilities'\nimport { INTAKE_OPTIONS } from './constants'\nimport { patterns } from './render'\n\n/*\n * Clean the line from extraneous characters\n * @param {String} line\n * @param {String} delimiter\n * @returns {String} cleaned line\n */\nconst clean = (line, delimiter) => {\n    const leading = new RegExp('^' + delimiter)\n    const trailing = new RegExp(delimiter + '$')\n    const doubling = new RegExp(delimiter + delimiter, 'g')\n    return line\n        .replace(leading, '')\n        .replace(trailing, '')\n        .replace(doubling, delimiter)\n}\n\n/* Test need to insert a delimiter\n * @param {String} prev - previous character\n * @param {String} curr - current character\n * @param {Object} options\n * @returns {String} Need to insert a delimiter\n */\nconst insertDelimiter = (prev, curr, next, options) => {\n    let letNum, lowUp, numLet, upLow, upUpLow\n    letNum = options.delimitLetterNumber && isLetter(prev) && isDigit(curr)\n    lowUp = options.delimitLowerUpper && isLower(prev) && isUpper(curr)\n    numLet = options.delimitNumberLetter && isDigit(prev) && isLetter(curr)\n    upLow = options.delimitUpperLower && isUpper(prev) && isLower(curr)\n    upUpLow =\n        options.delimitUpperUpperLower &&\n        isUpper(prev) &&\n        isUpper(curr) &&\n        isLower(next)\n\n    let delimit = letNum || lowUp || numLet || upLow || upUpLow\n    // if (delimit) console.log(`delimit ${prev} - ${curr}${next}`)\n    return delimit\n}\n\n/* Put seperator before each concatenated word\n * @param {String} line\n * @param {Object} options\n * @returns {String} phrase of seperated words\n */\nconst delimitWords = (line, options) => {\n    // console.log(`delimit ${line} using\\n`, options)\n    let phrase = line[0]\n    for (let i = 1; i < line.length; i++) {\n        if (insertDelimiter(line[i - 1], line[i], line[i + 1] || '', options)) {\n            phrase += options.delimitOutput\n        }\n        phrase += line[i]\n    }\n    return phrase\n}\n\n/**\n * Transform a camelcase object-key to title\n * @param {String} line\n * @param {Object} options\n */\nconst TransformCase = function(line, userOptions) {\n    console.log(' line ', line, ' userOptions ', userOptions)\n    if (!line) return\n    let self = {}\n    const options = Object.assign({}, INTAKE_OPTIONS, userOptions)\n\n    // prepare\n    self.orgin = {\n        input: line,\n    }\n    line = line.trim().replace(/\\s+/g, ' ')\n    if (options.delimitInput) {\n        self.orgin.normalised = clean(line, options.delimitInput)\n    } else {\n        self.orgin.normalised = line\n    }\n    self.orgin.isPureAlphaNumeric = isPureAlphaNumeric(self.orgin.normalised)\n    let revised = self.orgin.normalised\n\n    // distinguish between technical from linguistic transforms\n    let delimiter\n    if (options.delimitInput) {\n        // delimit by given character\n        delimiter = options.delimitInput\n    } else if (self.orgin.isPureAlphaNumeric) {\n        // delimit by case transition\n        delimiter = options.delimitOutput\n    } else {\n        // delimit by non-letter-non-digit character\n        // most abundant nonAlphaNumeric as delimiter?\n        // intersect used nonAlphaNumerics and a most popular list?\n        delimiter = options.delimitOutput\n    }\n\n    // replace regardsless of delimiting\n    const replaceEntries = Object.entries(options.replace)\n    if (options.replace && replaceEntries.length) {\n        for (let [key, value] of replaceEntries) {\n            revised = revised.replace(new RegExp(key, 'g'), value)\n        }\n    }\n\n    // preserve, delimit - these strings must be kept together - should be a human word\n    const kepings = [].concat(options.preserve, options.delimit)\n    if (kepings.length) {\n        kepings.forEach(keep => {\n            revised = revised.replace(\n                new RegExp(keep, 'g'),\n                delimiter + keep + delimiter,\n            )\n        })\n        revised = clean(revised, delimiter)\n    }\n\n    // produce an array with words\n    if (options.delimitInput) {\n        // delimit by given character\n        self.phrase = revised\n        self.words = revised.split(options.delimitInput)\n    } else if (self.orgin.isPureAlphaNumeric) {\n        // delimit by case transition\n        let parts = revised.split(options.delimitOutput)\n        self.phrase = parts\n            .map(pt =>\n                options.preserve.includes(pt) ? pt : delimitWords(pt, options),\n            )\n            .join(options.delimitOutput)\n        self.words = self.phrase.split(options.delimitOutput)\n    } else {\n        // delimit by non-letter-non-digit character\n        self.phrase = revised\n        self.words = revised.split(options.delimitOutput)\n    }\n\n    return Object.assign(self, patterns(self.words, options))\n}\n\nexport { TransformCase }\n","import { TransformCase } from './collect'\n\nvar index = function(input, options) {\n    if (!options) options = {}\n    return TransformCase(input, options)\n}\n\nexport default index\n"],"names":["isChar","char","Boolean","length","isDigit","match","isLetter","toLowerCase","toUpperCase","isLower","isUpper","INTAKE_OPTIONS","delimit","preserve","replace","delimitInput","delimitLetterNumber","delimitLowerUpper","delimitNumberLetter","delimitUpperLower","delimitUpperUpperLower","delimitOutput","RENDER_MODEL","postProcess","word","firstWordFirstChar","firstWordNextChars","nextWordsFirstChar","nextWordsNextChars","removePunctuation","line","normaliseQuotes","toLower","toUpper","clean","delimiter","leading","RegExp","trailing","doubling","insertDelimiter","prev","curr","next","options","letNum","lowUp","numLet","upLow","upUpLow","TransformCase","userOptions","console","log","self","Object","assign","orgin","input","trim","normalised","isPureAlphaNumeric","split","some","revised","replaceEntries","entries","key","value","kepings","concat","forEach","keep","phrase","words","parts","map","pt","includes","i","delimitWords","join","transform","model","transformation","index","substr","camelCase","humanTitle","patterns"],"mappings":"AAMA,MAAMA,EAASC,GACJC,QAAQD,GAAwB,iBAATA,GAAqC,IAAhBA,EAAKE,QAStDC,EAAUH,GACLD,EAAOC,IAASC,QAAQD,EAAKI,MAAM,UASxCC,EAAWL,GACND,EAAOC,IAASA,EAAKM,gBAAkBN,EAAKO,cASjDC,EAAUR,GAERD,EAAOC,IACPA,IAASA,EAAKM,eACdN,IAASA,EAAKO,cAUhBE,EAAUT,GAERD,EAAOC,IACPA,IAASA,EAAKO,eACdP,IAASA,EAAKM,cCjDhBI,EAAiB,CACnBC,QAAS,GACTC,SAAU,GACVC,QAAS,GACTC,aAAc,GACdC,qBAAqB,EACrBC,mBAAmB,EACnBC,qBAAqB,EACrBC,mBAAmB,EACnBC,wBAAwB,EACxBC,cAAe,KAMbC,EAAe,CACjBC,YAAaC,GAAQA,EACrBC,mBAAoBD,GAAQA,EAC5BE,mBAAoBF,GAAQA,EAC5BG,mBAAoBH,GAAQA,EAC5BI,mBAAoBJ,GAAQA,GCb1BK,EAAoBC,GAPFA,CAAAA,GACbA,EAAKhB,QAAQ,OAAQ,KAAKA,QAAQ,MAAO,KAOzCiB,CAAgBD,GAAMhB,QAAQ,2BAA4B,IAI/DkB,EAAUR,GAAQA,EAAKjB,cACvB0B,EAAUT,GAAQA,EAAKhB,cCHvB0B,EAAQ,CAACJ,EAAMK,KACjB,MAAMC,EAAU,IAAIC,OAAO,IAAMF,GAC3BG,EAAW,IAAID,OAAOF,EAAY,KAClCI,EAAW,IAAIF,OAAOF,EAAYA,EAAW,KACnD,OAAOL,EACFhB,QAAQsB,EAAS,IACjBtB,QAAQwB,EAAU,IAClBxB,QAAQyB,EAAUJ,IASrBK,EAAkB,CAACC,EAAMC,EAAMC,EAAMC,KACvC,IAAIC,EAAQC,EAAOC,EAAQC,EAAOC,EAalC,OAZAJ,EAASD,EAAQ5B,qBAAuBV,EAASmC,IAASrC,EAAQsC,GAClEI,EAAQF,EAAQ3B,mBAAqBR,EAAQgC,IAAS/B,EAAQgC,GAC9DK,EAASH,EAAQ1B,qBAAuBd,EAAQqC,IAASnC,EAASoC,GAClEM,EAAQJ,EAAQzB,mBAAqBT,EAAQ+B,IAAShC,EAAQiC,GAC9DO,EACIL,EAAQxB,wBACRV,EAAQ+B,IACR/B,EAAQgC,IACRjC,EAAQkC,GAEEE,GAAUC,GAASC,GAAUC,GAASC,GA2BlDC,EAAgB,SAASpB,EAAMqB,GAEjC,GADAC,QAAQC,IAAI,SAAUvB,EAAM,gBAAiBqB,IACxCrB,EAAM,OACX,IAAIwB,EAAO,GACX,MAAMV,EAAUW,OAAOC,OAAO,GAAI7C,EAAgBwC,GAGlDG,EAAKG,MAAQ,CACTC,MAAO5B,GAEXA,EAAOA,EAAK6B,OAAO7C,QAAQ,OAAQ,KAC/B8B,EAAQ7B,aACRuC,EAAKG,MAAMG,WAAa1B,EAAMJ,EAAMc,EAAQ7B,cAE5CuC,EAAKG,MAAMG,WAAa9B,EAE5BwB,EAAKG,MAAMI,mBHvBY/B,CAAAA,GAEnBA,GACAA,EAAKgC,QACJhC,EAAKgC,MAAM,IAAIC,KAAK9D,IACTK,EAASL,KAAUG,EAAQH,IGkBX4D,CAAmBP,EAAKG,MAAMG,YAC9D,IAGIzB,EAHA6B,EAAUV,EAAKG,MAAMG,WAMrBzB,EAFAS,EAAQ7B,aAEI6B,EAAQ7B,cACbuC,EAAKG,MAAMI,mBAENjB,EAAQvB,eASxB,MAAM4C,EAAiBV,OAAOW,QAAQtB,EAAQ9B,SAC9C,GAAI8B,EAAQ9B,SAAWmD,EAAe9D,OAClC,IAAK,IAAKgE,EAAKC,KAAUH,EACrBD,EAAUA,EAAQlD,QAAQ,IAAIuB,OAAO8B,EAAK,KAAMC,GAKxD,MAAMC,EAAU,GAAGC,OAAO1B,EAAQ/B,SAAU+B,EAAQhC,SAYpD,GAXIyD,EAAQlE,SACRkE,EAAQE,QAAQC,IACZR,EAAUA,EAAQlD,QACd,IAAIuB,OAAOmC,EAAM,KACjBrC,EAAYqC,EAAOrC,KAG3B6B,EAAU9B,EAAM8B,EAAS7B,IAIzBS,EAAQ7B,aAERuC,EAAKmB,OAAST,EACdV,EAAKoB,MAAQV,EAAQF,MAAMlB,EAAQ7B,mBAChC,GAAIuC,EAAKG,MAAMI,mBAAoB,CAEtC,IAAIc,EAAQX,EAAQF,MAAMlB,EAAQvB,eAClCiC,EAAKmB,OAASE,EACTC,IAAIC,GACDjC,EAAQ/B,SAASiE,SAASD,GAAMA,EAjF3B,EAAC/C,EAAMc,KAExB,IAAI6B,EAAS3C,EAAK,GAClB,IAAK,IAAIiD,EAAI,EAAGA,EAAIjD,EAAK3B,OAAQ4E,IACzBvC,EAAgBV,EAAKiD,EAAI,GAAIjD,EAAKiD,GAAIjD,EAAKiD,EAAI,IAAM,GAAInC,KACzD6B,GAAU7B,EAAQvB,eAEtBoD,GAAU3C,EAAKiD,GAEnB,OAAON,GAwE0CO,CAAaH,EAAIjC,IAEzDqC,KAAKrC,EAAQvB,eAClBiC,EAAKoB,MAAQpB,EAAKmB,OAAOX,MAAMlB,EAAQvB,oBAGvCiC,EAAKmB,OAAST,EACdV,EAAKoB,MAAQV,EAAQF,MAAMlB,EAAQvB,eAGvC,OAAOkC,OAAOC,OAAOF,ED5HR,SAASoB,EAAO9B,GAC7B,MAAMsC,EAAYC,IACd,IAAIC,EAAiBV,EAAME,IAAI,CAACpD,EAAM6D,IACpB,IAAVA,EACOzC,EAAQ/B,SAASiE,SAAStD,GAC3BA,EACA2D,EAAM1D,mBAAmBD,EAAK8D,OAAO,EAAG,IACpCH,EAAMzD,mBAAmBF,EAAK8D,OAAO,IAExC1C,EAAQ/B,SAASiE,SAAStD,GAC3BA,EACA2D,EAAMxD,mBAAmBH,EAAK8D,OAAO,EAAG,IACpCH,EAAMvD,mBAAmBJ,EAAK8D,OAAO,KAGvD,OAAOH,EAAM5D,YAAY6D,EAAeH,KAAKE,EAAM9D,iBAwBvD,MAAO,CACHkE,UAtBc,KACd,MAAMJ,EAAQ5B,OAAOC,OAAO,GAAIlC,EAAc,CAC1CC,YAAaM,EACbR,cAAe,GACfI,mBAAoBO,EACpBN,mBAAoBM,EACpBL,mBAAoBM,EACpBL,mBAAoBI,IAExB,OAAOkD,EAAUC,IAcjBK,WAXe,KACf,MAAML,EAAQ5B,OAAOC,OAAO,GAAIlC,EAAc,CAC1CD,cAAe,IACfI,mBAAoBQ,EACpBN,mBAAoBM,IAExB,OAAOiD,EAAUC,KCwFMM,CAASnC,EAAKoB,MAAO9B,oBC/IxC,SAASc,EAAOd,GAExB,OADKA,IAASA,EAAU,IACjBM,EAAcQ,EAAOd"}