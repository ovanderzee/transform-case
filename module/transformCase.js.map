{"version":3,"file":"transformCase.js","sources":["../node_modules/my-lib/module/myLib.js","../src/functions.js","../src/constants.js","../node_modules/fold-to-ascii/lib/ascii-folder.js","../src/render.js","../src/collect.js","../src/index.js"],"sourcesContent":["const e=function(){let e=Boolean(arguments.length);return Array.from(arguments).forEach(t=>{e=e&&\"number\"==typeof t&&Number.isFinite(t)}),e},t=e=>Boolean(e&&\"string\"==typeof e&&1===e.length),o=e=>t(e)&&Boolean(e.match(/[0-9]/)),n=e=>t(e)&&e.toLowerCase()!==e.toUpperCase(),r=e=>t(e)&&e===e.toLowerCase()&&e!==e.toUpperCase(),l=e=>t(e)&&e===e.toUpperCase()&&e!==e.toLowerCase(),u=e=>e&&e.split&&!e.split(\"\").some(e=>!(n(e)||o(e))),a=(e,t)=>{const o=e.match(t);return o&&o[0]===e},c=function(e,t){return e<\"1e-\"+t&&e>\"-1e-\"+t?0:Number(Math.round(e+\"e\"+t)+\"e-\"+t)},f=function(e,t){const o=Math.floor(Math.log(Math.abs(e))/Math.log(10)),n=e/Math.pow(10,o),r=c(n,t-1);return Number(r+\"e\"+o)},i=function(e){return\"string\"==typeof e||\"number\"==typeof e||\"boolean\"==typeof e},p=function(e){return e&&(e.getRootNode()instanceof Document||e.getRootNode()instanceof ShadowRoot)},s=()=>{console.log(\"Hello World!\")},h=function(e,t){let o={};return e.forEach(e=>o[e]=1),t.filter(e=>{if(1===o[e])return delete o[e],e})},g=function(e){let t=[];return t.push.apply(t,document.querySelectorAll(e)),t},m=function(){let e=[...arguments].filter(e=>e>=0),t=[...arguments].filter(e=>e<=0);return e.length===arguments.length||t.length===arguments.length},y=function(e){return e.split(\",\").map(e=>e.trim().replace(/\\s+/g,\" \")).filter(e=>e.length)},b=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},d=e=>e.reduce((e,t)=>e+t,0),w=e=>d(e)/e.length||0;export{y as arrayFromCommaSeparatedList,g as arrayFromQuery,h as arrayIntersection,s as greet,b as hasOwnProperty,u as isAlphaNumeric,p as isAttachedToDom,t as isChar,o as isDigit,m as isEqualSigns,a as isExactMatch,n as isLetter,r as isLower,i as isPrimitive,l as isUpper,e as isUsableNumber,w as mathAvg,d as mathSum,c as roundAtDecimals,f as roundAtDigits};\n//# sourceMappingURL=myLib.js.map\n","import { isDigit, isLetter, isLower, isUpper } from 'my-lib'\n\n/**\n * remove extraneous and doubled characters\n * @private\n * @param {String} line\n * @param {String} char\n * @returns {String} cleaned line\n */\nconst dedupe = (line, char) => {\n    const leading = new RegExp('^' + char)\n    const trailing = new RegExp(char + '$')\n    const doubling = new RegExp(char + char, 'g')\n    return line\n        .replace(doubling, char)\n        .replace(doubling, char)\n        .replace(doubling, char)\n        .replace(leading, '')\n        .replace(trailing, '')\n}\n\n/**\n * Transform whitespace to spaces, then clear all control characters\n * @private\n * @param {String} line\n * @returns {String} cleaned line\n */\nconst tidy = line => {\n    const controlChars = new RegExp('[\\u0000-\\u001f,\\u007f-\\u009f]')\n    return line\n        .trim()\n        .replace(/\\s+/g, ' ')\n        .replace(controlChars, '')\n}\n\n/**\n * Test need to insert a delimiter in pureAlphaNumeric input\n * @private\n * @param {String} prev - previous character\n * @param {String} curr - current character\n * @param {Object} options\n * @returns {String} Need to insert a delimiter\n */\nconst insertDelimiter = (prev, curr, next, options) => {\n    let letNum, lowUp, numLet, upLow, upUpLow\n    letNum = options.delimitLetterNumber && isLetter(prev) && isDigit(curr)\n    lowUp = options.delimitLowerUpper && isLower(prev) && isUpper(curr)\n    numLet = options.delimitNumberLetter && isDigit(prev) && isLetter(curr)\n    upLow = options.delimitUpperLower && isUpper(prev) && isLower(curr)\n    upUpLow =\n        options.delimitUpperUpperLower &&\n        isUpper(prev) &&\n        isUpper(curr) &&\n        isLower(next)\n\n    let delimit = letNum || lowUp || numLet || upLow || upUpLow\n    return delimit\n}\n\n/**\n * Put seperator before each concatenated word, in pureAlphaNumeric input\n * @private\n * @param {String} line\n * @param {Object} options\n * @returns {String} phrase of seperated words\n */\nconst delimitWords = (line, options) => {\n    let phrase = line[0]\n    for (let i = 1; i < line.length; i++) {\n        if (insertDelimiter(line[i - 1], line[i], line[i + 1] || '', options)) {\n            phrase += options.delimitOutput\n        }\n        phrase += line[i]\n    }\n    return phrase\n}\n\n/**\n * Put seperator before each concatenated word, in pureAlphaNumeric input\n * @private\n * @param {String} line\n * @param {Object} options\n * @returns {String} phrase of seperated words\n */\nconst delimitChunks = (line, units, delimiter) => {\n    units.forEach(unit => {\n        line = line.replace(unit, delimiter + '$&' + delimiter)\n    })\n    line = dedupe(line, delimiter)\n    return line\n}\n\nexport { dedupe, tidy, insertDelimiter, delimitWords, delimitChunks }\n","/*\n * Intake options\n * @member {Array} delimit - units to be kept together - should be like a human word\n *    @member {String || RegExp}\n * @member {Array} preserve - units to be kept together and be protected - should be like a human word\n *    @member {String || RegExp}\n * @member {String} delimitInput - character to delimit input\n * @member {Boolean} delimitLetterNumber - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitLowerUpper - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitNumberLetter - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitUpperLower - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitUpperUpperLower - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {String} delimitOutput - character to delimit output\n */\nconst INTAKE_OPTIONS = {\n    delimit: [],\n    preserve: [],\n    delimitInput: '',\n    delimitLetterNumber: true,\n    delimitLowerUpper: true,\n    delimitNumberLetter: true,\n    delimitUpperLower: false,\n    delimitUpperUpperLower: true,\n    delimitOutput: ' ',\n}\n\n/*\n * Render model, with do-nothing-functions, to be exchanged by the pattern fimally\n * @member {Function} preprocess\n      do operations in fresh words array, for pure alphaNumeric patterns\n * @member {Function} postProcess\n      do operations in string, just before delivery, for pure alphaNumeric patterns\n * @member {Function} firstWordFirstChar - transform word parts\n * @member {Function} firstWordNextChars - transform word parts\n * @member {Function} nextWordsFirstChar - transform word parts\n * @member {Function} nextWordsNextChars - transform word parts\n */\nconst RENDER_MODEL = {\n    preprocess: words => words,\n    postProcess: line => line,\n    firstWordFirstChar: word => word,\n    firstWordNextChars: word => word,\n    nextWordsFirstChar: word => word,\n    nextWordsNextChars: word => word,\n}\n\nexport { INTAKE_OPTIONS, RENDER_MODEL }\n","/**\n * ascii-folder.js\n * https://github.com/mplatt/fold-to-ascii-js\n *\n * This is a JavaScript port of the Apache Lucene ASCII Folding Filter.\n *\n * The Apache Lucene ASCII Folding Filter is licensed to the Apache Software\n * Foundation (ASF) under one or more contributor license agreements. See the\n * NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache\n * License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\nclass ASCIIFolder {\n\n    static foldReplacing(str = '', replacement = '') {\n        return this._fold(str, () => replacement);\n    }\n\n    static foldMaintaining(str = '') {\n        return this._fold(str, (char) => char);\n    }\n\n    static _fold(str, fallback) {\n        if (str === null)\n            return '';\n\n        if (typeof str === 'number')\n            return '' + str;\n\n        if (typeof str !== 'string')\n            throw new Error('Invalid input data type');\n\n        return str.split('').map(character => {\n            if (character.charCodeAt(0) < 128) {\n                return character;\n            } else {\n                const replacement = this.mapping.get(character.charCodeAt(0));\n                return (replacement === undefined) ? fallback(character) : replacement;\n            }\n        }).join('');\n    }\n}\n\nASCIIFolder.mapping = new Map([\n    [0xC0, 'A'],\n    [0xC1, 'A'],\n    [0xC2, 'A'],\n    [0xC3, 'A'],\n    [0xC4, 'A'],\n    [0xC5, 'A'],\n    [0x100, 'A'],\n    [0x102, 'A'],\n    [0x104, 'A'],\n    [0x18F, 'A'],\n    [0x1CD, 'A'],\n    [0x1DE, 'A'],\n    [0x1E0, 'A'],\n    [0x1FA, 'A'],\n    [0x200, 'A'],\n    [0x202, 'A'],\n    [0x226, 'A'],\n    [0x23A, 'A'],\n    [0x1D00, 'A'],\n    [0x1E00, 'A'],\n    [0x1EA0, 'A'],\n    [0x1EA2, 'A'],\n    [0x1EA4, 'A'],\n    [0x1EA6, 'A'],\n    [0x1EA8, 'A'],\n    [0x1EAA, 'A'],\n    [0x1EAC, 'A'],\n    [0x1EAE, 'A'],\n    [0x1EB0, 'A'],\n    [0x1EB2, 'A'],\n    [0x1EB4, 'A'],\n    [0x1EB6, 'A'],\n    [0x24B6, 'A'],\n    [0xFF21, 'A'],\n    [0xE0, 'a'],\n    [0xE1, 'a'],\n    [0xE2, 'a'],\n    [0xE3, 'a'],\n    [0xE4, 'a'],\n    [0xE5, 'a'],\n    [0x101, 'a'],\n    [0x103, 'a'],\n    [0x105, 'a'],\n    [0x1CE, 'a'],\n    [0x1DF, 'a'],\n    [0x1E1, 'a'],\n    [0x1FB, 'a'],\n    [0x201, 'a'],\n    [0x203, 'a'],\n    [0x227, 'a'],\n    [0x250, 'a'],\n    [0x259, 'a'],\n    [0x25A, 'a'],\n    [0x1D8F, 'a'],\n    [0x1D95, 'a'],\n    [0x1E01, 'a'],\n    [0x1E9A, 'a'],\n    [0x1EA1, 'a'],\n    [0x1EA3, 'a'],\n    [0x1EA5, 'a'],\n    [0x1EA7, 'a'],\n    [0x1EA9, 'a'],\n    [0x1EAB, 'a'],\n    [0x1EAD, 'a'],\n    [0x1EAF, 'a'],\n    [0x1EB1, 'a'],\n    [0x1EB3, 'a'],\n    [0x1EB5, 'a'],\n    [0x1EB7, 'a'],\n    [0x2090, 'a'],\n    [0x2094, 'a'],\n    [0x24D0, 'a'],\n    [0x2C65, 'a'],\n    [0x2C6F, 'a'],\n    [0xFF41, 'a'],\n    [0xA732, 'AA'],\n    [0xC6, 'AE'],\n    [0x1E2, 'AE'],\n    [0x1FC, 'AE'],\n    [0x1D01, 'AE'],\n    [0xA734, 'AO'],\n    [0xA736, 'AU'],\n    [0xA738, 'AV'],\n    [0xA73A, 'AV'],\n    [0xA73C, 'AY'],\n    [0x249C, '(a)'],\n    [0xA733, 'aa'],\n    [0xE6, 'ae'],\n    [0x1E3, 'ae'],\n    [0x1FD, 'ae'],\n    [0x1D02, 'ae'],\n    [0xA735, 'ao'],\n    [0xA737, 'au'],\n    [0xA739, 'av'],\n    [0xA73B, 'av'],\n    [0xA73D, 'ay'],\n    [0x181, 'B'],\n    [0x182, 'B'],\n    [0x243, 'B'],\n    [0x299, 'B'],\n    [0x1D03, 'B'],\n    [0x1E02, 'B'],\n    [0x1E04, 'B'],\n    [0x1E06, 'B'],\n    [0x24B7, 'B'],\n    [0xFF22, 'B'],\n    [0x180, 'b'],\n    [0x183, 'b'],\n    [0x253, 'b'],\n    [0x1D6C, 'b'],\n    [0x1D80, 'b'],\n    [0x1E03, 'b'],\n    [0x1E05, 'b'],\n    [0x1E07, 'b'],\n    [0x24D1, 'b'],\n    [0xFF42, 'b'],\n    [0x249D, '(b)'],\n    [0xC7, 'C'],\n    [0x106, 'C'],\n    [0x108, 'C'],\n    [0x10A, 'C'],\n    [0x10C, 'C'],\n    [0x187, 'C'],\n    [0x23B, 'C'],\n    [0x297, 'C'],\n    [0x1D04, 'C'],\n    [0x1E08, 'C'],\n    [0x24B8, 'C'],\n    [0xFF23, 'C'],\n    [0xE7, 'c'],\n    [0x107, 'c'],\n    [0x109, 'c'],\n    [0x10B, 'c'],\n    [0x10D, 'c'],\n    [0x188, 'c'],\n    [0x23C, 'c'],\n    [0x255, 'c'],\n    [0x1E09, 'c'],\n    [0x2184, 'c'],\n    [0x24D2, 'c'],\n    [0xA73E, 'c'],\n    [0xA73F, 'c'],\n    [0xFF43, 'c'],\n    [0x249E, '(c)'],\n    [0xD0, 'D'],\n    [0x10E, 'D'],\n    [0x110, 'D'],\n    [0x189, 'D'],\n    [0x18A, 'D'],\n    [0x18B, 'D'],\n    [0x1D05, 'D'],\n    [0x1D06, 'D'],\n    [0x1E0A, 'D'],\n    [0x1E0C, 'D'],\n    [0x1E0E, 'D'],\n    [0x1E10, 'D'],\n    [0x1E12, 'D'],\n    [0x24B9, 'D'],\n    [0xA779, 'D'],\n    [0xFF24, 'D'],\n    [0xF0, 'd'],\n    [0x10F, 'd'],\n    [0x111, 'd'],\n    [0x18C, 'd'],\n    [0x221, 'd'],\n    [0x256, 'd'],\n    [0x257, 'd'],\n    [0x1D6D, 'd'],\n    [0x1D81, 'd'],\n    [0x1D91, 'd'],\n    [0x1E0B, 'd'],\n    [0x1E0D, 'd'],\n    [0x1E0F, 'd'],\n    [0x1E11, 'd'],\n    [0x1E13, 'd'],\n    [0x24D3, 'd'],\n    [0xA77A, 'd'],\n    [0xFF44, 'd'],\n    [0x1C4, 'DZ'],\n    [0x1F1, 'DZ'],\n    [0x1C5, 'Dz'],\n    [0x1F2, 'Dz'],\n    [0x249F, '(d)'],\n    [0x238, 'db'],\n    [0x1C6, 'dz'],\n    [0x1F3, 'dz'],\n    [0x2A3, 'dz'],\n    [0x2A5, 'dz'],\n    [0xC8, 'E'],\n    [0xC9, 'E'],\n    [0xCA, 'E'],\n    [0xCB, 'E'],\n    [0x112, 'E'],\n    [0x114, 'E'],\n    [0x116, 'E'],\n    [0x118, 'E'],\n    [0x11A, 'E'],\n    [0x18E, 'E'],\n    [0x190, 'E'],\n    [0x204, 'E'],\n    [0x206, 'E'],\n    [0x228, 'E'],\n    [0x246, 'E'],\n    [0x1D07, 'E'],\n    [0x1E14, 'E'],\n    [0x1E16, 'E'],\n    [0x1E18, 'E'],\n    [0x1E1A, 'E'],\n    [0x1E1C, 'E'],\n    [0x1EB8, 'E'],\n    [0x1EBA, 'E'],\n    [0x1EBC, 'E'],\n    [0x1EBE, 'E'],\n    [0x1EC0, 'E'],\n    [0x1EC2, 'E'],\n    [0x1EC4, 'E'],\n    [0x1EC6, 'E'],\n    [0x24BA, 'E'],\n    [0x2C7B, 'E'],\n    [0xFF25, 'E'],\n    [0xE8, 'e'],\n    [0xE9, 'e'],\n    [0xEA, 'e'],\n    [0xEB, 'e'],\n    [0x113, 'e'],\n    [0x115, 'e'],\n    [0x117, 'e'],\n    [0x119, 'e'],\n    [0x11B, 'e'],\n    [0x1DD, 'e'],\n    [0x205, 'e'],\n    [0x207, 'e'],\n    [0x229, 'e'],\n    [0x247, 'e'],\n    [0x258, 'e'],\n    [0x25B, 'e'],\n    [0x25C, 'e'],\n    [0x25D, 'e'],\n    [0x25E, 'e'],\n    [0x29A, 'e'],\n    [0x1D08, 'e'],\n    [0x1D92, 'e'],\n    [0x1D93, 'e'],\n    [0x1D94, 'e'],\n    [0x1E15, 'e'],\n    [0x1E17, 'e'],\n    [0x1E19, 'e'],\n    [0x1E1B, 'e'],\n    [0x1E1D, 'e'],\n    [0x1EB9, 'e'],\n    [0x1EBB, 'e'],\n    [0x1EBD, 'e'],\n    [0x1EBF, 'e'],\n    [0x1EC1, 'e'],\n    [0x1EC3, 'e'],\n    [0x1EC5, 'e'],\n    [0x1EC7, 'e'],\n    [0x2091, 'e'],\n    [0x24D4, 'e'],\n    [0x2C78, 'e'],\n    [0xFF45, 'e'],\n    [0x24A0, '(e)'],\n    [0x191, 'F'],\n    [0x1E1E, 'F'],\n    [0x24BB, 'F'],\n    [0xA730, 'F'],\n    [0xA77B, 'F'],\n    [0xA7FB, 'F'],\n    [0xFF26, 'F'],\n    [0x192, 'f'],\n    [0x1D6E, 'f'],\n    [0x1D82, 'f'],\n    [0x1E1F, 'f'],\n    [0x1E9B, 'f'],\n    [0x24D5, 'f'],\n    [0xA77C, 'f'],\n    [0xFF46, 'f'],\n    [0x24A1, '(f)'],\n    [0xFB00, 'ff'],\n    [0xFB03, 'ffi'],\n    [0xFB04, 'ffl'],\n    [0xFB01, 'fi'],\n    [0xFB02, 'fl'],\n    [0x11C, 'G'],\n    [0x11E, 'G'],\n    [0x120, 'G'],\n    [0x122, 'G'],\n    [0x193, 'G'],\n    [0x1E4, 'G'],\n    [0x1E5, 'G'],\n    [0x1E6, 'G'],\n    [0x1E7, 'G'],\n    [0x1F4, 'G'],\n    [0x262, 'G'],\n    [0x29B, 'G'],\n    [0x1E20, 'G'],\n    [0x24BC, 'G'],\n    [0xA77D, 'G'],\n    [0xA77E, 'G'],\n    [0xFF27, 'G'],\n    [0x11D, 'g'],\n    [0x11F, 'g'],\n    [0x121, 'g'],\n    [0x123, 'g'],\n    [0x1F5, 'g'],\n    [0x260, 'g'],\n    [0x261, 'g'],\n    [0x1D77, 'g'],\n    [0x1D79, 'g'],\n    [0x1D83, 'g'],\n    [0x1E21, 'g'],\n    [0x24D6, 'g'],\n    [0xA77F, 'g'],\n    [0xFF47, 'g'],\n    [0x24A2, '(g)'],\n    [0x124, 'H'],\n    [0x126, 'H'],\n    [0x21E, 'H'],\n    [0x29C, 'H'],\n    [0x1E22, 'H'],\n    [0x1E24, 'H'],\n    [0x1E26, 'H'],\n    [0x1E28, 'H'],\n    [0x1E2A, 'H'],\n    [0x24BD, 'H'],\n    [0x2C67, 'H'],\n    [0x2C75, 'H'],\n    [0xFF28, 'H'],\n    [0x125, 'h'],\n    [0x127, 'h'],\n    [0x21F, 'h'],\n    [0x265, 'h'],\n    [0x266, 'h'],\n    [0x2AE, 'h'],\n    [0x2AF, 'h'],\n    [0x1E23, 'h'],\n    [0x1E25, 'h'],\n    [0x1E27, 'h'],\n    [0x1E29, 'h'],\n    [0x1E2B, 'h'],\n    [0x1E96, 'h'],\n    [0x24D7, 'h'],\n    [0x2C68, 'h'],\n    [0x2C76, 'h'],\n    [0xFF48, 'h'],\n    [0x1F6, 'HV'],\n    [0x24A3, '(h)'],\n    [0x195, 'hv'],\n    [0xCC, 'I'],\n    [0xCD, 'I'],\n    [0xCE, 'I'],\n    [0xCF, 'I'],\n    [0x128, 'I'],\n    [0x12A, 'I'],\n    [0x12C, 'I'],\n    [0x12E, 'I'],\n    [0x130, 'I'],\n    [0x196, 'I'],\n    [0x197, 'I'],\n    [0x1CF, 'I'],\n    [0x208, 'I'],\n    [0x20A, 'I'],\n    [0x26A, 'I'],\n    [0x1D7B, 'I'],\n    [0x1E2C, 'I'],\n    [0x1E2E, 'I'],\n    [0x1EC8, 'I'],\n    [0x1ECA, 'I'],\n    [0x24BE, 'I'],\n    [0xA7FE, 'I'],\n    [0xFF29, 'I'],\n    [0xEC, 'i'],\n    [0xED, 'i'],\n    [0xEE, 'i'],\n    [0xEF, 'i'],\n    [0x129, 'i'],\n    [0x12B, 'i'],\n    [0x12D, 'i'],\n    [0x12F, 'i'],\n    [0x131, 'i'],\n    [0x1D0, 'i'],\n    [0x209, 'i'],\n    [0x20B, 'i'],\n    [0x268, 'i'],\n    [0x1D09, 'i'],\n    [0x1D62, 'i'],\n    [0x1D7C, 'i'],\n    [0x1D96, 'i'],\n    [0x1E2D, 'i'],\n    [0x1E2F, 'i'],\n    [0x1EC9, 'i'],\n    [0x1ECB, 'i'],\n    [0x2071, 'i'],\n    [0x24D8, 'i'],\n    [0xFF49, 'i'],\n    [0x132, 'IJ'],\n    [0x24A4, '(i)'],\n    [0x133, 'ij'],\n    [0x134, 'J'],\n    [0x248, 'J'],\n    [0x1D0A, 'J'],\n    [0x24BF, 'J'],\n    [0xFF2A, 'J'],\n    [0x135, 'j'],\n    [0x1F0, 'j'],\n    [0x237, 'j'],\n    [0x249, 'j'],\n    [0x25F, 'j'],\n    [0x284, 'j'],\n    [0x29D, 'j'],\n    [0x24D9, 'j'],\n    [0x2C7C, 'j'],\n    [0xFF4A, 'j'],\n    [0x24A5, '(j)'],\n    [0x136, 'K'],\n    [0x198, 'K'],\n    [0x1E8, 'K'],\n    [0x1D0B, 'K'],\n    [0x1E30, 'K'],\n    [0x1E32, 'K'],\n    [0x1E34, 'K'],\n    [0x24C0, 'K'],\n    [0x2C69, 'K'],\n    [0xA740, 'K'],\n    [0xA742, 'K'],\n    [0xA744, 'K'],\n    [0xFF2B, 'K'],\n    [0x137, 'k'],\n    [0x199, 'k'],\n    [0x1E9, 'k'],\n    [0x29E, 'k'],\n    [0x1D84, 'k'],\n    [0x1E31, 'k'],\n    [0x1E33, 'k'],\n    [0x1E35, 'k'],\n    [0x24DA, 'k'],\n    [0x2C6A, 'k'],\n    [0xA741, 'k'],\n    [0xA743, 'k'],\n    [0xA745, 'k'],\n    [0xFF4B, 'k'],\n    [0x24A6, '(k)'],\n    [0x139, 'L'],\n    [0x13B, 'L'],\n    [0x13D, 'L'],\n    [0x13F, 'L'],\n    [0x141, 'L'],\n    [0x23D, 'L'],\n    [0x29F, 'L'],\n    [0x1D0C, 'L'],\n    [0x1E36, 'L'],\n    [0x1E38, 'L'],\n    [0x1E3A, 'L'],\n    [0x1E3C, 'L'],\n    [0x24C1, 'L'],\n    [0x2C60, 'L'],\n    [0x2C62, 'L'],\n    [0xA746, 'L'],\n    [0xA748, 'L'],\n    [0xA780, 'L'],\n    [0xFF2C, 'L'],\n    [0x13A, 'l'],\n    [0x13C, 'l'],\n    [0x13E, 'l'],\n    [0x140, 'l'],\n    [0x142, 'l'],\n    [0x19A, 'l'],\n    [0x234, 'l'],\n    [0x26B, 'l'],\n    [0x26C, 'l'],\n    [0x26D, 'l'],\n    [0x1D85, 'l'],\n    [0x1E37, 'l'],\n    [0x1E39, 'l'],\n    [0x1E3B, 'l'],\n    [0x1E3D, 'l'],\n    [0x24DB, 'l'],\n    [0x2C61, 'l'],\n    [0xA747, 'l'],\n    [0xA749, 'l'],\n    [0xA781, 'l'],\n    [0xFF4C, 'l'],\n    [0x1C7, 'LJ'],\n    [0x1EFA, 'LL'],\n    [0x1C8, 'Lj'],\n    [0x24A7, '(l)'],\n    [0x1C9, 'lj'],\n    [0x1EFB, 'll'],\n    [0x2AA, 'ls'],\n    [0x2AB, 'lz'],\n    [0x19C, 'M'],\n    [0x1D0D, 'M'],\n    [0x1E3E, 'M'],\n    [0x1E40, 'M'],\n    [0x1E42, 'M'],\n    [0x24C2, 'M'],\n    [0x2C6E, 'M'],\n    [0xA7FD, 'M'],\n    [0xA7FF, 'M'],\n    [0xFF2D, 'M'],\n    [0x26F, 'm'],\n    [0x270, 'm'],\n    [0x271, 'm'],\n    [0x1D6F, 'm'],\n    [0x1D86, 'm'],\n    [0x1E3F, 'm'],\n    [0x1E41, 'm'],\n    [0x1E43, 'm'],\n    [0x24DC, 'm'],\n    [0xFF4D, 'm'],\n    [0x24A8, '(m)'],\n    [0xD1, 'N'],\n    [0x143, 'N'],\n    [0x145, 'N'],\n    [0x147, 'N'],\n    [0x14A, 'N'],\n    [0x19D, 'N'],\n    [0x1F8, 'N'],\n    [0x220, 'N'],\n    [0x274, 'N'],\n    [0x1D0E, 'N'],\n    [0x1E44, 'N'],\n    [0x1E46, 'N'],\n    [0x1E48, 'N'],\n    [0x1E4A, 'N'],\n    [0x24C3, 'N'],\n    [0xFF2E, 'N'],\n    [0xF1, 'n'],\n    [0x144, 'n'],\n    [0x146, 'n'],\n    [0x148, 'n'],\n    [0x149, 'n'],\n    [0x14B, 'n'],\n    [0x19E, 'n'],\n    [0x1F9, 'n'],\n    [0x235, 'n'],\n    [0x272, 'n'],\n    [0x273, 'n'],\n    [0x1D70, 'n'],\n    [0x1D87, 'n'],\n    [0x1E45, 'n'],\n    [0x1E47, 'n'],\n    [0x1E49, 'n'],\n    [0x1E4B, 'n'],\n    [0x207F, 'n'],\n    [0x24DD, 'n'],\n    [0xFF4E, 'n'],\n    [0x1CA, 'NJ'],\n    [0x1CB, 'Nj'],\n    [0x24A9, '(n)'],\n    [0x1CC, 'nj'],\n    [0xD2, 'O'],\n    [0xD3, 'O'],\n    [0xD4, 'O'],\n    [0xD5, 'O'],\n    [0xD6, 'O'],\n    [0xD8, 'O'],\n    [0x14C, 'O'],\n    [0x14E, 'O'],\n    [0x150, 'O'],\n    [0x186, 'O'],\n    [0x19F, 'O'],\n    [0x1A0, 'O'],\n    [0x1D1, 'O'],\n    [0x1EA, 'O'],\n    [0x1EC, 'O'],\n    [0x1FE, 'O'],\n    [0x20C, 'O'],\n    [0x20E, 'O'],\n    [0x22A, 'O'],\n    [0x22C, 'O'],\n    [0x22E, 'O'],\n    [0x230, 'O'],\n    [0x1D0F, 'O'],\n    [0x1D10, 'O'],\n    [0x1E4C, 'O'],\n    [0x1E4E, 'O'],\n    [0x1E50, 'O'],\n    [0x1E52, 'O'],\n    [0x1ECC, 'O'],\n    [0x1ECE, 'O'],\n    [0x1ED0, 'O'],\n    [0x1ED2, 'O'],\n    [0x1ED4, 'O'],\n    [0x1ED6, 'O'],\n    [0x1ED8, 'O'],\n    [0x1EDA, 'O'],\n    [0x1EDC, 'O'],\n    [0x1EDE, 'O'],\n    [0x1EE0, 'O'],\n    [0x1EE2, 'O'],\n    [0x24C4, 'O'],\n    [0xA74A, 'O'],\n    [0xA74C, 'O'],\n    [0xFF2F, 'O'],\n    [0xF2, 'o'],\n    [0xF3, 'o'],\n    [0xF4, 'o'],\n    [0xF5, 'o'],\n    [0xF6, 'o'],\n    [0xF8, 'o'],\n    [0x14D, 'o'],\n    [0x14F, 'o'],\n    [0x151, 'o'],\n    [0x1A1, 'o'],\n    [0x1D2, 'o'],\n    [0x1EB, 'o'],\n    [0x1ED, 'o'],\n    [0x1FF, 'o'],\n    [0x20D, 'o'],\n    [0x20F, 'o'],\n    [0x22B, 'o'],\n    [0x22D, 'o'],\n    [0x22F, 'o'],\n    [0x231, 'o'],\n    [0x254, 'o'],\n    [0x275, 'o'],\n    [0x1D16, 'o'],\n    [0x1D17, 'o'],\n    [0x1D97, 'o'],\n    [0x1E4D, 'o'],\n    [0x1E4F, 'o'],\n    [0x1E51, 'o'],\n    [0x1E53, 'o'],\n    [0x1ECD, 'o'],\n    [0x1ECF, 'o'],\n    [0x1ED1, 'o'],\n    [0x1ED3, 'o'],\n    [0x1ED5, 'o'],\n    [0x1ED7, 'o'],\n    [0x1ED9, 'o'],\n    [0x1EDB, 'o'],\n    [0x1EDD, 'o'],\n    [0x1EDF, 'o'],\n    [0x1EE1, 'o'],\n    [0x1EE3, 'o'],\n    [0x2092, 'o'],\n    [0x24DE, 'o'],\n    [0x2C7A, 'o'],\n    [0xA74B, 'o'],\n    [0xA74D, 'o'],\n    [0xFF4F, 'o'],\n    [0x152, 'OE'],\n    [0x276, 'OE'],\n    [0xA74E, 'OO'],\n    [0x222, 'OU'],\n    [0x1D15, 'OU'],\n    [0x24AA, '(o)'],\n    [0x153, 'oe'],\n    [0x1D14, 'oe'],\n    [0xA74F, 'oo'],\n    [0x223, 'ou'],\n    [0x1A4, 'P'],\n    [0x1D18, 'P'],\n    [0x1E54, 'P'],\n    [0x1E56, 'P'],\n    [0x24C5, 'P'],\n    [0x2C63, 'P'],\n    [0xA750, 'P'],\n    [0xA752, 'P'],\n    [0xA754, 'P'],\n    [0xFF30, 'P'],\n    [0x1A5, 'p'],\n    [0x1D71, 'p'],\n    [0x1D7D, 'p'],\n    [0x1D88, 'p'],\n    [0x1E55, 'p'],\n    [0x1E57, 'p'],\n    [0x24DF, 'p'],\n    [0xA751, 'p'],\n    [0xA753, 'p'],\n    [0xA755, 'p'],\n    [0xA7FC, 'p'],\n    [0xFF50, 'p'],\n    [0x24AB, '(p)'],\n    [0x24A, 'Q'],\n    [0x24C6, 'Q'],\n    [0xA756, 'Q'],\n    [0xA758, 'Q'],\n    [0xFF31, 'Q'],\n    [0x138, 'q'],\n    [0x24B, 'q'],\n    [0x2A0, 'q'],\n    [0x24E0, 'q'],\n    [0xA757, 'q'],\n    [0xA759, 'q'],\n    [0xFF51, 'q'],\n    [0x24AC, '(q)'],\n    [0x239, 'qp'],\n    [0x154, 'R'],\n    [0x156, 'R'],\n    [0x158, 'R'],\n    [0x210, 'R'],\n    [0x212, 'R'],\n    [0x24C, 'R'],\n    [0x280, 'R'],\n    [0x281, 'R'],\n    [0x1D19, 'R'],\n    [0x1D1A, 'R'],\n    [0x1E58, 'R'],\n    [0x1E5A, 'R'],\n    [0x1E5C, 'R'],\n    [0x1E5E, 'R'],\n    [0x24C7, 'R'],\n    [0x2C64, 'R'],\n    [0xA75A, 'R'],\n    [0xA782, 'R'],\n    [0xFF32, 'R'],\n    [0x155, 'r'],\n    [0x157, 'r'],\n    [0x159, 'r'],\n    [0x211, 'r'],\n    [0x213, 'r'],\n    [0x24D, 'r'],\n    [0x27C, 'r'],\n    [0x27D, 'r'],\n    [0x27E, 'r'],\n    [0x27F, 'r'],\n    [0x1D63, 'r'],\n    [0x1D72, 'r'],\n    [0x1D73, 'r'],\n    [0x1D89, 'r'],\n    [0x1E59, 'r'],\n    [0x1E5B, 'r'],\n    [0x1E5D, 'r'],\n    [0x1E5F, 'r'],\n    [0x24E1, 'r'],\n    [0xA75B, 'r'],\n    [0xA783, 'r'],\n    [0xFF52, 'r'],\n    [0x24AD, '(r)'],\n    [0x15A, 'S'],\n    [0x15C, 'S'],\n    [0x15E, 'S'],\n    [0x160, 'S'],\n    [0x218, 'S'],\n    [0x1E60, 'S'],\n    [0x1E62, 'S'],\n    [0x1E64, 'S'],\n    [0x1E66, 'S'],\n    [0x1E68, 'S'],\n    [0x24C8, 'S'],\n    [0xA731, 'S'],\n    [0xA785, 'S'],\n    [0xFF33, 'S'],\n    [0x15B, 's'],\n    [0x15D, 's'],\n    [0x15F, 's'],\n    [0x161, 's'],\n    [0x17F, 's'],\n    [0x219, 's'],\n    [0x23F, 's'],\n    [0x282, 's'],\n    [0x1D74, 's'],\n    [0x1D8A, 's'],\n    [0x1E61, 's'],\n    [0x1E63, 's'],\n    [0x1E65, 's'],\n    [0x1E67, 's'],\n    [0x1E69, 's'],\n    [0x1E9C, 's'],\n    [0x1E9D, 's'],\n    [0x24E2, 's'],\n    [0xA784, 's'],\n    [0xFF53, 's'],\n    [0x1E9E, 'SS'],\n    [0x24AE, '(s)'],\n    [0xDF, 'ss'],\n    [0xFB06, 'st'],\n    [0x162, 'T'],\n    [0x164, 'T'],\n    [0x166, 'T'],\n    [0x1AC, 'T'],\n    [0x1AE, 'T'],\n    [0x21A, 'T'],\n    [0x23E, 'T'],\n    [0x1D1B, 'T'],\n    [0x1E6A, 'T'],\n    [0x1E6C, 'T'],\n    [0x1E6E, 'T'],\n    [0x1E70, 'T'],\n    [0x24C9, 'T'],\n    [0xA786, 'T'],\n    [0xFF34, 'T'],\n    [0x163, 't'],\n    [0x165, 't'],\n    [0x167, 't'],\n    [0x1AB, 't'],\n    [0x1AD, 't'],\n    [0x21B, 't'],\n    [0x236, 't'],\n    [0x287, 't'],\n    [0x288, 't'],\n    [0x1D75, 't'],\n    [0x1E6B, 't'],\n    [0x1E6D, 't'],\n    [0x1E6F, 't'],\n    [0x1E71, 't'],\n    [0x1E97, 't'],\n    [0x24E3, 't'],\n    [0x2C66, 't'],\n    [0xFF54, 't'],\n    [0xDE, 'TH'],\n    [0xA766, 'TH'],\n    [0xA728, 'TZ'],\n    [0x24AF, '(t)'],\n    [0x2A8, 'tc'],\n    [0xFE, 'th'],\n    [0x1D7A, 'th'],\n    [0xA767, 'th'],\n    [0x2A6, 'ts'],\n    [0xA729, 'tz'],\n    [0xD9, 'U'],\n    [0xDA, 'U'],\n    [0xDB, 'U'],\n    [0xDC, 'U'],\n    [0x168, 'U'],\n    [0x16A, 'U'],\n    [0x16C, 'U'],\n    [0x16E, 'U'],\n    [0x170, 'U'],\n    [0x172, 'U'],\n    [0x1AF, 'U'],\n    [0x1D3, 'U'],\n    [0x1D5, 'U'],\n    [0x1D7, 'U'],\n    [0x1D9, 'U'],\n    [0x1DB, 'U'],\n    [0x214, 'U'],\n    [0x216, 'U'],\n    [0x244, 'U'],\n    [0x1D1C, 'U'],\n    [0x1D7E, 'U'],\n    [0x1E72, 'U'],\n    [0x1E74, 'U'],\n    [0x1E76, 'U'],\n    [0x1E78, 'U'],\n    [0x1E7A, 'U'],\n    [0x1EE4, 'U'],\n    [0x1EE6, 'U'],\n    [0x1EE8, 'U'],\n    [0x1EEA, 'U'],\n    [0x1EEC, 'U'],\n    [0x1EEE, 'U'],\n    [0x1EF0, 'U'],\n    [0x24CA, 'U'],\n    [0xFF35, 'U'],\n    [0xF9, 'u'],\n    [0xFA, 'u'],\n    [0xFB, 'u'],\n    [0xFC, 'u'],\n    [0x169, 'u'],\n    [0x16B, 'u'],\n    [0x16D, 'u'],\n    [0x16F, 'u'],\n    [0x171, 'u'],\n    [0x173, 'u'],\n    [0x1B0, 'u'],\n    [0x1D4, 'u'],\n    [0x1D6, 'u'],\n    [0x1D8, 'u'],\n    [0x1DA, 'u'],\n    [0x1DC, 'u'],\n    [0x215, 'u'],\n    [0x217, 'u'],\n    [0x289, 'u'],\n    [0x1D64, 'u'],\n    [0x1D99, 'u'],\n    [0x1E73, 'u'],\n    [0x1E75, 'u'],\n    [0x1E77, 'u'],\n    [0x1E79, 'u'],\n    [0x1E7B, 'u'],\n    [0x1EE5, 'u'],\n    [0x1EE7, 'u'],\n    [0x1EE9, 'u'],\n    [0x1EEB, 'u'],\n    [0x1EED, 'u'],\n    [0x1EEF, 'u'],\n    [0x1EF1, 'u'],\n    [0x24E4, 'u'],\n    [0xFF55, 'u'],\n    [0x24B0, '(u)'],\n    [0x1D6B, 'ue'],\n    [0x1B2, 'V'],\n    [0x245, 'V'],\n    [0x1D20, 'V'],\n    [0x1E7C, 'V'],\n    [0x1E7E, 'V'],\n    [0x1EFC, 'V'],\n    [0x24CB, 'V'],\n    [0xA75E, 'V'],\n    [0xA768, 'V'],\n    [0xFF36, 'V'],\n    [0x28B, 'v'],\n    [0x28C, 'v'],\n    [0x1D65, 'v'],\n    [0x1D8C, 'v'],\n    [0x1E7D, 'v'],\n    [0x1E7F, 'v'],\n    [0x24E5, 'v'],\n    [0x2C71, 'v'],\n    [0x2C74, 'v'],\n    [0xA75F, 'v'],\n    [0xFF56, 'v'],\n    [0xA760, 'VY'],\n    [0x24B1, '(v)'],\n    [0xA761, 'vy'],\n    [0x174, 'W'],\n    [0x1F7, 'W'],\n    [0x1D21, 'W'],\n    [0x1E80, 'W'],\n    [0x1E82, 'W'],\n    [0x1E84, 'W'],\n    [0x1E86, 'W'],\n    [0x1E88, 'W'],\n    [0x24CC, 'W'],\n    [0x2C72, 'W'],\n    [0xFF37, 'W'],\n    [0x175, 'w'],\n    [0x1BF, 'w'],\n    [0x28D, 'w'],\n    [0x1E81, 'w'],\n    [0x1E83, 'w'],\n    [0x1E85, 'w'],\n    [0x1E87, 'w'],\n    [0x1E89, 'w'],\n    [0x1E98, 'w'],\n    [0x24E6, 'w'],\n    [0x2C73, 'w'],\n    [0xFF57, 'w'],\n    [0x24B2, '(w)'],\n    [0x1E8A, 'X'],\n    [0x1E8C, 'X'],\n    [0x24CD, 'X'],\n    [0xFF38, 'X'],\n    [0x1D8D, 'x'],\n    [0x1E8B, 'x'],\n    [0x1E8D, 'x'],\n    [0x2093, 'x'],\n    [0x24E7, 'x'],\n    [0xFF58, 'x'],\n    [0x24B3, '(x)'],\n    [0xDD, 'Y'],\n    [0x176, 'Y'],\n    [0x178, 'Y'],\n    [0x1B3, 'Y'],\n    [0x232, 'Y'],\n    [0x24E, 'Y'],\n    [0x28F, 'Y'],\n    [0x1E8E, 'Y'],\n    [0x1EF2, 'Y'],\n    [0x1EF4, 'Y'],\n    [0x1EF6, 'Y'],\n    [0x1EF8, 'Y'],\n    [0x1EFE, 'Y'],\n    [0x24CE, 'Y'],\n    [0xFF39, 'Y'],\n    [0xFD, 'y'],\n    [0xFF, 'y'],\n    [0x177, 'y'],\n    [0x1B4, 'y'],\n    [0x233, 'y'],\n    [0x24F, 'y'],\n    [0x28E, 'y'],\n    [0x1E8F, 'y'],\n    [0x1E99, 'y'],\n    [0x1EF3, 'y'],\n    [0x1EF5, 'y'],\n    [0x1EF7, 'y'],\n    [0x1EF9, 'y'],\n    [0x1EFF, 'y'],\n    [0x24E8, 'y'],\n    [0xFF59, 'y'],\n    [0x24B4, '(y)'],\n    [0x179, 'Z'],\n    [0x17B, 'Z'],\n    [0x17D, 'Z'],\n    [0x1B5, 'Z'],\n    [0x21C, 'Z'],\n    [0x224, 'Z'],\n    [0x1D22, 'Z'],\n    [0x1E90, 'Z'],\n    [0x1E92, 'Z'],\n    [0x1E94, 'Z'],\n    [0x24CF, 'Z'],\n    [0x2C6B, 'Z'],\n    [0xA762, 'Z'],\n    [0xFF3A, 'Z'],\n    [0x17A, 'z'],\n    [0x17C, 'z'],\n    [0x17E, 'z'],\n    [0x1B6, 'z'],\n    [0x21D, 'z'],\n    [0x225, 'z'],\n    [0x240, 'z'],\n    [0x290, 'z'],\n    [0x291, 'z'],\n    [0x1D76, 'z'],\n    [0x1D8E, 'z'],\n    [0x1E91, 'z'],\n    [0x1E93, 'z'],\n    [0x1E95, 'z'],\n    [0x24E9, 'z'],\n    [0x2C6C, 'z'],\n    [0xA763, 'z'],\n    [0xFF5A, 'z'],\n    [0x24B5, '(z)'],\n    [0x2070, '0'],\n    [0x2080, '0'],\n    [0x24EA, '0'],\n    [0x24FF, '0'],\n    [0xFF10, '0'],\n    [0xB9, '1'],\n    [0x2081, '1'],\n    [0x2460, '1'],\n    [0x24F5, '1'],\n    [0x2776, '1'],\n    [0x2780, '1'],\n    [0x278A, '1'],\n    [0xFF11, '1'],\n    [0x2488, '1.'],\n    [0x2474, '(1)'],\n    [0xB2, '2'],\n    [0x2082, '2'],\n    [0x2461, '2'],\n    [0x24F6, '2'],\n    [0x2777, '2'],\n    [0x2781, '2'],\n    [0x278B, '2'],\n    [0xFF12, '2'],\n    [0x2489, '2.'],\n    [0x2475, '(2)'],\n    [0xB3, '3'],\n    [0x2083, '3'],\n    [0x2462, '3'],\n    [0x24F7, '3'],\n    [0x2778, '3'],\n    [0x2782, '3'],\n    [0x278C, '3'],\n    [0xFF13, '3'],\n    [0x248A, '3.'],\n    [0x2476, '(3)'],\n    [0x2074, '4'],\n    [0x2084, '4'],\n    [0x2463, '4'],\n    [0x24F8, '4'],\n    [0x2779, '4'],\n    [0x2783, '4'],\n    [0x278D, '4'],\n    [0xFF14, '4'],\n    [0x248B, '4.'],\n    [0x2477, '(4)'],\n    [0x2075, '5'],\n    [0x2085, '5'],\n    [0x2464, '5'],\n    [0x24F9, '5'],\n    [0x277A, '5'],\n    [0x2784, '5'],\n    [0x278E, '5'],\n    [0xFF15, '5'],\n    [0x248C, '5.'],\n    [0x2478, '(5)'],\n    [0x2076, '6'],\n    [0x2086, '6'],\n    [0x2465, '6'],\n    [0x24FA, '6'],\n    [0x277B, '6'],\n    [0x2785, '6'],\n    [0x278F, '6'],\n    [0xFF16, '6'],\n    [0x248D, '6.'],\n    [0x2479, '(6)'],\n    [0x2077, '7'],\n    [0x2087, '7'],\n    [0x2466, '7'],\n    [0x24FB, '7'],\n    [0x277C, '7'],\n    [0x2786, '7'],\n    [0x2790, '7'],\n    [0xFF17, '7'],\n    [0x248E, '7.'],\n    [0x247A, '(7)'],\n    [0x2078, '8'],\n    [0x2088, '8'],\n    [0x2467, '8'],\n    [0x24FC, '8'],\n    [0x277D, '8'],\n    [0x2787, '8'],\n    [0x2791, '8'],\n    [0xFF18, '8'],\n    [0x248F, '8.'],\n    [0x247B, '(8)'],\n    [0x2079, '9'],\n    [0x2089, '9'],\n    [0x2468, '9'],\n    [0x24FD, '9'],\n    [0x277E, '9'],\n    [0x2788, '9'],\n    [0x2792, '9'],\n    [0xFF19, '9'],\n    [0x2490, '9.'],\n    [0x247C, '(9)'],\n    [0x2469, '10'],\n    [0x24FE, '10'],\n    [0x277F, '10'],\n    [0x2789, '10'],\n    [0x2793, '10'],\n    [0x2491, '10.'],\n    [0x247D, '(10)'],\n    [0x246A, '11'],\n    [0x24EB, '11'],\n    [0x2492, '11.'],\n    [0x247E, '(11)'],\n    [0x246B, '12'],\n    [0x24EC, '12'],\n    [0x2493, '12.'],\n    [0x247F, '(12)'],\n    [0x246C, '13'],\n    [0x24ED, '13'],\n    [0x2494, '13.'],\n    [0x2480, '(13)'],\n    [0x246D, '14'],\n    [0x24EE, '14'],\n    [0x2495, '14.'],\n    [0x2481, '(14)'],\n    [0x246E, '15'],\n    [0x24EF, '15'],\n    [0x2496, '15.'],\n    [0x2482, '(15)'],\n    [0x246F, '16'],\n    [0x24F0, '16'],\n    [0x2497, '16.'],\n    [0x2483, '(16)'],\n    [0x2470, '17'],\n    [0x24F1, '17'],\n    [0x2498, '17.'],\n    [0x2484, '(17)'],\n    [0x2471, '18'],\n    [0x24F2, '18'],\n    [0x2499, '18.'],\n    [0x2485, '(18)'],\n    [0x2472, '19'],\n    [0x24F3, '19'],\n    [0x249A, '19.'],\n    [0x2486, '(19)'],\n    [0x2473, '20'],\n    [0x24F4, '20'],\n    [0x249B, '20.'],\n    [0x2487, '(20)'],\n    [0xAB, '\"'],\n    [0xBB, '\"'],\n    [0x201C, '\"'],\n    [0x201D, '\"'],\n    [0x201E, '\"'],\n    [0x2033, '\"'],\n    [0x2036, '\"'],\n    [0x275D, '\"'],\n    [0x275E, '\"'],\n    [0x276E, '\"'],\n    [0x276F, '\"'],\n    [0xFF02, '\"'],\n    [0x2018, '\\''],\n    [0x2019, '\\''],\n    [0x201A, '\\''],\n    [0x201B, '\\''],\n    [0x2032, '\\''],\n    [0x2035, '\\''],\n    [0x2039, '\\''],\n    [0x203A, '\\''],\n    [0x275B, '\\''],\n    [0x275C, '\\''],\n    [0xFF07, '\\''],\n    [0x2010, '-'],\n    [0x2011, '-'],\n    [0x2012, '-'],\n    [0x2013, '-'],\n    [0x2014, '-'],\n    [0x207B, '-'],\n    [0x208B, '-'],\n    [0xFF0D, '-'],\n    [0x2045, '['],\n    [0x2772, '['],\n    [0xFF3B, '['],\n    [0x2046, ']'],\n    [0x2773, ']'],\n    [0xFF3D, ']'],\n    [0x207D, '('],\n    [0x208D, '('],\n    [0x2768, '('],\n    [0x276A, '('],\n    [0xFF08, '('],\n    [0x2E28, '(('],\n    [0x207E, ')'],\n    [0x208E, ')'],\n    [0x2769, ')'],\n    [0x276B, ')'],\n    [0xFF09, ')'],\n    [0x2E29, '))'],\n    [0x276C, '<'],\n    [0x2770, '<'],\n    [0xFF1C, '<'],\n    [0x276D, '>'],\n    [0x2771, '>'],\n    [0xFF1E, '>'],\n    [0x2774, '{'],\n    [0xFF5B, '{'],\n    [0x2775, '}'],\n    [0xFF5D, '}'],\n    [0x207A, '+'],\n    [0x208A, '+'],\n    [0xFF0B, '+'],\n    [0x207C, '='],\n    [0x208C, '='],\n    [0xFF1D, '='],\n    [0xFF01, '!'],\n    [0x203C, '!!'],\n    [0x2049, '!?'],\n    [0xFF03, '#'],\n    [0xFF04, '$'],\n    [0x2052, '%'],\n    [0xFF05, '%'],\n    [0xFF06, '&'],\n    [0x204E, '*'],\n    [0xFF0A, '*'],\n    [0xFF0C, ','],\n    [0xFF0E, '.'],\n    [0x2044, '/'],\n    [0xFF0F, '/'],\n    [0xFF1A, ':'],\n    [0x204F, ';'],\n    [0xFF1B, ';'],\n    [0xFF1F, '?'],\n    [0x2047, '??'],\n    [0x2048, '?!'],\n    [0xFF20, '@'],\n    [0xFF3C, '\\\\'],\n    [0x2038, '^'],\n    [0xFF3E, '^'],\n    [0xFF3F, '_'],\n    [0x2053, '~'],\n    [0xFF5E, '~']\n]);\n\nmodule.exports = ASCIIFolder;\n","import { isExactMatch } from 'my-lib'\nimport { RENDER_MODEL } from './constants'\nimport asciiFolder from 'fold-to-ascii'\n\n/**\n * Solve the problem that concatenated numbers loose meaning:\n * delimit the numbers with the output delimiter or the delimiter that matches /\\w/\n * @private\n * @param {String} word\n * @returns {Array} enhanced words\n */\nconst delimitNumbers = (word, delimitOutput) => {\n    const allNumericDelimiters = '-:,./'\n    const currentNumericDelimiters = allNumericDelimiters.replace(\n        delimitOutput,\n        '',\n    )\n\n    // replace all numeric delimiters between digits\n    const currentNumericDelimiterRegex = new RegExp(\n        '(\\\\d)[' + currentNumericDelimiters + '](\\\\d)',\n        'g',\n    )\n\n    const delimiter = delimitOutput || '_'\n    return word.match(currentNumericDelimiterRegex)\n        ? word\n              .replace(currentNumericDelimiterRegex, `$1${delimiter}$2`)\n              .replace(currentNumericDelimiterRegex, `$1${delimiter}$2`)\n        : word\n}\n\n/**\n * Convert curly single quotes and backticks to straight single quotes,\n * convert curly double quotes to straight double quotes\n * @private\n * @param {String} line\n * @returns {String} normalised string\n */\nconst normaliseQuotes = line => {\n    return line.replace(/‘’`/g, \"'\").replace(/“”/g, '\"')\n}\n\n/**\n * Remove all punctuation from a string\n * @private\n * @param {String} line\n * @returns {String} stripped string\n */\nconst removePunctuation = (line, delimitOutput) => {\n    const allPunctuation = '…,:;[\\\\](){}\\\\-‐–—\\'\".!?'\n    const currentPunctuation = allPunctuation\n        .replace('\\\\' + delimitOutput, '')\n        .replace(delimitOutput, '')\n\n    // remove all punctuation between non-digits\n    const allPunctRegex = new RegExp('(\\\\D)[' + allPunctuation + '](\\\\D)', 'g')\n    // remove all leading punctuation\n    const leadPunctRegex = new RegExp('^[' + allPunctuation + ']', '')\n    // remove all trailing punctuation\n    const trailPunctRegex = new RegExp('[' + allPunctuation + ']$', '')\n    // remove all punctuation but the delimiter between digits\n    const currentPunctRegex = new RegExp(\n        '(\\\\d)[' + currentPunctuation + '](\\\\d)',\n        'g',\n    )\n\n    line = line.replace(allPunctRegex, '$1$2')\n    line = line.replace(allPunctRegex, '$1$2')\n    line = line.replace(currentPunctRegex, '$1$2')\n    line = line.replace(leadPunctRegex, '')\n    line = line.replace(trailPunctRegex, '')\n\n    return line\n}\n\n/**\n * Remove all diacritics and decompose ligatures\n * @private\n * @param {String} line\n * @returns {String} changed string\n */\nconst simplifyVariations = line => {\n    return asciiFolder.foldReplacing(line)\n}\n\n/**\n * Transform helper functions\n * @private\n * @param {String} word\n * @returns {String} transformed word\n */\nconst asIs = word => word\nconst toLower = word => word.toLowerCase()\nconst toUpper = word => word.toUpperCase()\n\nconst patternRendering = function(words, options) {\n    /**\n     * Iterative transformation\n     * @private\n     * @param {Object} model\n     * @returns {String} transformed words\n     */\n    const transform = model => {\n        const transformation = words.map((word, index) => {\n            word = model.preprocess(word, model.delimitOutput)\n            const toPreserve = options.preserve.some(regex =>\n                isExactMatch(word, regex),\n            )\n            if (index === 0) {\n                // first word\n                return toPreserve\n                    ? word\n                    : model.firstWordFirstChar(word.substr(0, 1)) +\n                          model.firstWordNextChars(word.substr(1))\n            } else {\n                // successive words\n                return toPreserve\n                    ? word\n                    : model.nextWordsFirstChar(word.substr(0, 1)) +\n                          model.nextWordsNextChars(word.substr(1))\n            }\n        })\n        const line = transformation.join(model.delimitOutput)\n        return model.postProcess(line, model.delimitOutput)\n    }\n\n    const techProcessing = {\n        preprocess: function(word, delimitOutput) {\n            word = delimitNumbers(word, delimitOutput)\n            word = normaliseQuotes(word)\n            word = removePunctuation(word, delimitOutput)\n            return word\n        },\n        postProcess: function(line, delimitOutput) {\n            line = simplifyVariations(line)\n            return line\n        },\n    }\n\n    /****************************************\n     * cap-marked words\n     ****************************************/\n\n    /**\n     * capMarkedWords base pattern\n     * @param {Function} firstWordFirstChar\n     * @param {Function} nextWordsFirstChar\n     * @private\n     * @returns {String} transformed words\n     */\n    const capMarkedWords = (firstWordFirstChar, nextWordsFirstChar) => {\n        const model = Object.assign({}, RENDER_MODEL, techProcessing, {\n            delimitOutput: '',\n            firstWordFirstChar: firstWordFirstChar,\n            firstWordNextChars: toLower,\n            nextWordsFirstChar: nextWordsFirstChar,\n            nextWordsNextChars: toLower,\n        })\n        return transform(model)\n    }\n\n    const camelCase = () => {\n        return capMarkedWords(toLower, toUpper)\n    }\n    const pascalCase = () => {\n        return capMarkedWords(toUpper, toUpper)\n    }\n\n    /****************************************\n     * Human, linguistic patterns\n     ****************************************/\n\n    /**\n     * humanSentence pattern\n     * @returns {String} transformed words\n     */\n    const humanSentence = () => {\n        const model = Object.assign({}, RENDER_MODEL, {\n            delimitOutput: ' ',\n            firstWordFirstChar: toUpper,\n            firstWordNextChars: toLower,\n            nextWordsFirstChar: toLower,\n            nextWordsNextChars: toLower,\n        })\n        return transform(model)\n    }\n\n    /**\n     * humanTitle pattern\n     * @returns {String} transformed words\n     */\n    const humanTitle = () => {\n        const model = Object.assign({}, RENDER_MODEL, {\n            delimitOutput: ' ',\n            firstWordFirstChar: toUpper,\n            nextWordsFirstChar: toUpper,\n        })\n        return transform(model)\n    }\n\n    /****************************************\n     * delimitedLowerCase patterns\n     ****************************************/\n\n    /**\n     * delimitedLowerCase base pattern\n     * @private\n     * @param {String} delimimter\n     * @returns {String} delimitedLowerCase transformed words\n     */\n    const delimitedLowerCase = delimimter => {\n        const model = Object.assign({}, RENDER_MODEL, techProcessing, {\n            delimitOutput: delimimter,\n            firstWordFirstChar: toLower,\n            firstWordNextChars: toLower,\n            nextWordsFirstChar: toLower,\n            nextWordsNextChars: toLower,\n        })\n        return transform(model)\n    }\n\n    const dotCase = () => {\n        return delimitedLowerCase('.')\n    }\n    const paramCase = () => {\n        return delimitedLowerCase('-')\n    }\n    const pathCase = () => {\n        return delimitedLowerCase('/')\n    }\n    const searchCase = () => {\n        return delimitedLowerCase('+')\n    }\n    const snakeCase = () => {\n        return delimitedLowerCase('_')\n    }\n    const spaceCase = () => {\n        return delimitedLowerCase(' ')\n    }\n\n    /****************************************\n     * other variable related patterns\n     ****************************************/\n\n    /**\n     * constantCase pattern\n     * @param {String} delimimter\n     * @returns {String} constantCase transformed words\n     */\n    const constantCase = () => {\n        const model = Object.assign({}, RENDER_MODEL, techProcessing, {\n            delimitOutput: '_',\n            firstWordFirstChar: toUpper,\n            firstWordNextChars: toUpper,\n            nextWordsFirstChar: toUpper,\n            nextWordsNextChars: toUpper,\n        })\n        return transform(model)\n    }\n\n    /**\n     * headerCase pattern\n     * @private\n     * @param {String} delimimter\n     * @returns {String} headerCase transformed words\n     */\n    const headerCase = () => {\n        const model = Object.assign({}, RENDER_MODEL, techProcessing, {\n            delimitOutput: '-',\n            firstWordFirstChar: toUpper,\n            firstWordNextChars: toLower,\n            nextWordsFirstChar: toUpper,\n            nextWordsNextChars: toLower,\n        })\n        return transform(model)\n    }\n\n    return {\n        camelCase: camelCase,\n        pascalCase: pascalCase,\n        humanSentence: humanSentence,\n        humanTitle: humanTitle,\n        dotCase: dotCase,\n        paramCase: paramCase,\n        pathCase: pathCase,\n        searchCase: searchCase,\n        snakeCase: snakeCase,\n        spaceCase: spaceCase,\n        constantCase: constantCase,\n        headerCase: headerCase,\n    }\n}\n\nexport { patternRendering }\n","import { isAlphaNumeric, isExactMatch } from 'my-lib'\nimport {\n    dedupe,\n    tidy,\n    insertDelimiter,\n    delimitWords,\n    delimitChunks,\n} from './functions'\nimport { INTAKE_OPTIONS } from './constants'\nimport { patternRendering } from './render'\n\n/**\n * Transform a camelcase object-key to title\n * @param {String} line\n * @param {Object} options\n * @returns {Object} - the 'prototype' / methods and some variables\n */\nconst TransformCase = function(line, userOptions) {\n    if (!line) return\n    let self = {}\n    const options = Object.assign({}, INTAKE_OPTIONS, userOptions)\n\n    // prepare\n    self.orgin = {\n        input: line,\n    }\n    if (options.delimitInput) {\n        self.orgin.standardised = dedupe(tidy(line), options.delimitInput)\n    } else {\n        self.orgin.standardised = tidy(line)\n    }\n    self.orgin.isAlphaNumeric = isAlphaNumeric(self.orgin.standardised)\n    let revised = self.orgin.standardised\n\n    // distinguish between technical from linguistic transforms\n    let delimiter\n    if (self.orgin.isAlphaNumeric) {\n        // assume technical phrase, or this is one human word\n        // delimit by case transition\n        delimiter = options.delimitOutput\n    } else {\n        // assume human input or technical/coded when input delimiter is given\n        // delimit by specified delimiter, (default: a space)\n        delimiter = options.delimitInput || options.delimitOutput\n    }\n\n    // preserve, delimit - these strings must be kept together - should be like a human word\n    const chunks = [].concat(options.preserve, options.delimit)\n    if (chunks.length) {\n        revised = delimitChunks(revised, chunks, delimiter)\n    }\n\n    // produce an array with words\n    if (self.orgin.isAlphaNumeric) {\n        // assume technical phrase, or this is one human word\n        // delimit by case transition\n        let parts = revised.split(delimiter)\n        self.phrase = parts\n            .map(part =>\n                options.preserve.some(regex => isExactMatch(part, regex))\n                    ? part\n                    : delimitWords(part, options),\n            )\n            .join(delimiter)\n        self.words = self.phrase.split(delimiter)\n    } else {\n        // assume human input or technical/coded when input delimiter is given\n        // delimit by specified delimiter, (default: a space)\n        self.phrase = revised\n        self.words = revised.split(delimiter)\n    }\n\n    return Object.assign(self, patternRendering(self.words, options))\n}\n\nexport { TransformCase }\n","import { TransformCase } from './collect'\n\nvar index = function(input, options) {\n    if (!options) options = {}\n    return TransformCase(input, options)\n}\n\nexport default index\n"],"names":["t","e","Boolean","length","o","match","n","toLowerCase","toUpperCase","r","l","a","dedupe","line","char","leading","RegExp","trailing","doubling","replace","tidy","controlChars","trim","insertDelimiter","prev","curr","next","options","letNum","lowUp","numLet","upLow","upUpLow","delimitLetterNumber","isLetter","isDigit","delimitLowerUpper","isLower","isUpper","delimitNumberLetter","delimitUpperLower","delimitUpperUpperLower","INTAKE_OPTIONS","delimit","preserve","delimitInput","delimitOutput","RENDER_MODEL","preprocess","words","postProcess","firstWordFirstChar","word","firstWordNextChars","nextWordsFirstChar","nextWordsNextChars","ASCIIFolder","[object Object]","str","replacement","this","_fold","fallback","Error","split","map","character","charCodeAt","mapping","get","undefined","join","Map","toLower","toUpper","patternRendering","transform","model","index","toPreserve","some","regex","isExactMatch","substr","techProcessing","currentNumericDelimiters","currentNumericDelimiterRegex","delimiter","delimitNumbers","currentPunctuation","allPunctRegex","leadPunctRegex","trailPunctRegex","currentPunctRegex","removePunctuation","asciiFolder","foldReplacing","simplifyVariations","capMarkedWords","Object","assign","delimitedLowerCase","delimimter","camelCase","pascalCase","humanSentence","humanTitle","dotCase","paramCase","pathCase","searchCase","snakeCase","spaceCase","constantCase","headerCase","TransformCase","userOptions","self","orgin","input","standardised","isAlphaNumeric","revised","chunks","concat","units","forEach","unit","delimitChunks","parts","phrase","part","i","delimitWords"],"mappings":"AAAK,MAAwIA,EAAEC,GAAGC,QAAQD,GAAG,iBAAiBA,GAAG,IAAIA,EAAEE,QAAQC,EAAEH,GAAGD,EAAEC,IAAIC,QAAQD,EAAEI,MAAM,UAAUC,EAAEL,GAAGD,EAAEC,IAAIA,EAAEM,gBAAgBN,EAAEO,cAAcC,EAAER,GAAGD,EAAEC,IAAIA,IAAIA,EAAEM,eAAeN,IAAIA,EAAEO,cAAcE,EAAET,GAAGD,EAAEC,IAAIA,IAAIA,EAAEO,eAAeP,IAAIA,EAAEM,cAAmEI,EAAE,CAACV,EAAED,KAAK,MAAMI,EAAEH,EAAEI,MAAML,GAAG,OAAOI,GAAGA,EAAE,KAAKH,GCStdW,EAAS,CAACC,EAAMC,KAClB,MAAMC,EAAU,IAAIC,OAAO,IAAMF,GAC3BG,EAAW,IAAID,OAAOF,EAAO,KAC7BI,EAAW,IAAIF,OAAOF,EAAOA,EAAM,KACzC,OAAOD,EACFM,QAAQD,EAAUJ,GAClBK,QAAQD,EAAUJ,GAClBK,QAAQD,EAAUJ,GAClBK,QAAQJ,EAAS,IACjBI,QAAQF,EAAU,KASrBG,EAAOP,IACT,MAAMQ,EAAe,IAAIL,OAAO,cAChC,OAAOH,EACFS,OACAH,QAAQ,OAAQ,KAChBA,QAAQE,EAAc,KAWzBE,EAAkB,CAACC,EAAMC,EAAMC,EAAMC,KACvC,IAAIC,EAAQC,EAAOC,EAAQC,EAAOC,EAYlC,OAXAJ,EAASD,EAAQM,qBAAuBC,EAASV,IAASW,EAAQV,GAClEI,EAAQF,EAAQS,mBAAqBC,EAAQb,IAASc,EAAQb,GAC9DK,EAASH,EAAQY,qBAAuBJ,EAAQX,IAASU,EAAST,GAClEM,EAAQJ,EAAQa,mBAAqBF,EAAQd,IAASa,EAAQZ,GAC9DO,EACIL,EAAQc,wBACRH,EAAQd,IACRc,EAAQb,IACRY,EAAQX,GAEEE,GAAUC,GAASC,GAAUC,GAASC,GCzClDU,EAAiB,CACnBC,QAAS,GACTC,SAAU,GACVC,aAAc,GACdZ,qBAAqB,EACrBG,mBAAmB,EACnBG,qBAAqB,EACrBC,mBAAmB,EACnBC,wBAAwB,EACxBK,cAAe,KAcbC,EAAe,CACjBC,WAAYC,GAASA,EACrBC,YAAarC,GAAQA,EACrBsC,mBAAoBC,GAAQA,EAC5BC,mBAAoBD,GAAQA,EAC5BE,mBAAoBF,GAAQA,EAC5BG,mBAAoBH,GAAQA,GCtBhC,MAAMI,EAEFC,qBAAqBC,EAAM,GAAIC,EAAc,IACzC,OAAOC,KAAKC,MAAMH,EAAK,IAAMC,GAGjCF,uBAAuBC,EAAM,IACzB,OAAOE,KAAKC,MAAMH,EAAM5C,GAASA,GAGrC2C,aAAaC,EAAKI,GACd,GAAY,OAARJ,EACA,MAAO,GAEX,GAAmB,iBAARA,EACP,MAAO,GAAKA,EAEhB,GAAmB,iBAARA,EACP,MAAM,IAAIK,MAAM,2BAEpB,OAAOL,EAAIM,MAAM,IAAIC,IAAIC,IACrB,GAAIA,EAAUC,WAAW,GAAK,IAC1B,OAAOD,EACJ,CACH,MAAMP,EAAcC,KAAKQ,QAAQC,IAAIH,EAAUC,WAAW,IAC1D,YAAwBG,IAAhBX,EAA6BG,EAASI,GAAaP,KAEhEY,KAAK,KAIhBfb,MAAiBhB,ECtwCjB,MAkFMiB,EAAUrB,GAAQA,EAAK7C,cACvBmE,EAAUtB,GAAQA,EAAK5C,cAEvBmE,EAAmB,SAAS1B,EAAOtB,GAOrC,MAAMiD,EAAYC,IACd,MAmBMhE,EAnBiBoC,EAAMgB,IAAI,CAACb,EAAM0B,KACpC1B,EAAOyB,EAAM7B,WAAWI,EAAMyB,EAAM/B,eACpC,MAAMiC,EAAapD,EAAQiB,SAASoC,KAAKC,GACrCC,EAAa9B,EAAM6B,IAEvB,OAAc,IAAVH,EAEOC,EACD3B,EACAyB,EAAM1B,mBAAmBC,EAAK+B,OAAO,EAAG,IACpCN,EAAMxB,mBAAmBD,EAAK+B,OAAO,IAGxCJ,EACD3B,EACAyB,EAAMvB,mBAAmBF,EAAK+B,OAAO,EAAG,IACpCN,EAAMtB,mBAAmBH,EAAK+B,OAAO,MAG3BZ,KAAKM,EAAM/B,eACvC,OAAO+B,EAAM3B,YAAYrC,EAAMgE,EAAM/B,gBAGnCsC,EAAiB,CACnBpC,WAAY,SAASI,EAAMN,GAIvB,OAHAM,EAtHW,EAACA,EAAMN,KAC1B,MACMuC,EADuB,QACyBlE,QAClD2B,EACA,IAIEwC,EAA+B,IAAItE,OACrC,SAAWqE,EAA2B,SACtC,KAGEE,EAAYzC,GAAiB,IACnC,OAAOM,EAAK/C,MAAMiF,GACZlC,EACKjC,QAAQmE,EAA8B,KAAKC,OAC3CpE,QAAQmE,EAA8B,KAAKC,OAChDnC,GAoGSoC,CAAepC,EAAMN,GAE5BM,EAlFc,EAACvC,EAAMiC,KAC7B,MACM2C,EADiB,2BAElBtE,QAAQ,KAAO2B,EAAe,IAC9B3B,QAAQ2B,EAAe,IAGtB4C,EAAgB,IAAI1E,OAAO,uCAAsC,KAEjE2E,EAAiB,IAAI3E,OAAO,8BAA6B,IAEzD4E,EAAkB,IAAI5E,OAAO,8BAA6B,IAE1D6E,EAAoB,IAAI7E,OAC1B,SAAWyE,EAAqB,SAChC,KASJ,OAFA5E,GADAA,GADAA,GADAA,GADAA,EAAOA,EAAKM,QAAQuE,EAAe,SACvBvE,QAAQuE,EAAe,SACvBvE,QAAQ0E,EAAmB,SAC3B1E,QAAQwE,EAAgB,KACxBxE,QAAQyE,EAAiB,KA4DtBE,CADP1C,EAAuBA,EA1FnBjC,QAAQ,OAAQ,KAAKA,QAAQ,MAAO,KA2FT2B,IAGnCI,YAAa,SAASrC,EAAMiC,GAExB,OADAjC,EArDeA,CAAAA,GAChBkF,EAAYC,cAAcnF,GAoDlBoF,CAAmBpF,KAgB5BqF,EAAiB,CAAC/C,EAAoBG,KACxC,MAAMuB,EAAQsB,OAAOC,OAAO,GAAIrD,EAAcqC,EAAgB,CAC1DtC,cAAe,GACfK,mBAAoBA,EACpBE,mBAAoBoB,EACpBnB,mBAAoBA,EACpBC,mBAAoBkB,IAExB,OAAOG,EAAUC,IAoDfwB,EAAqBC,IACvB,MAAMzB,EAAQsB,OAAOC,OAAO,GAAIrD,EAAcqC,EAAgB,CAC1DtC,cAAewD,EACfnD,mBAAoBsB,EACpBpB,mBAAoBoB,EACpBnB,mBAAoBmB,EACpBlB,mBAAoBkB,IAExB,OAAOG,EAAUC,IA2DrB,MAAO,CACH0B,UArHc,IACPL,EAAezB,EAASC,GAqH/B8B,WAnHe,IACRN,EAAexB,EAASA,GAmH/B+B,cAxGkB,KAClB,MAAM5B,EAAQsB,OAAOC,OAAO,GAAIrD,EAAc,CAC1CD,cAAe,IACfK,mBAAoBuB,EACpBrB,mBAAoBoB,EACpBnB,mBAAoBmB,EACpBlB,mBAAoBkB,IAExB,OAAOG,EAAUC,IAiGjB6B,WA1Fe,KACf,MAAM7B,EAAQsB,OAAOC,OAAO,GAAIrD,EAAc,CAC1CD,cAAe,IACfK,mBAAoBuB,EACpBpB,mBAAoBoB,IAExB,OAAOE,EAAUC,IAqFjB8B,QA7DY,IACLN,EAAmB,KA6D1BO,UA3Dc,IACPP,EAAmB,KA2D1BQ,SAzDa,IACNR,EAAmB,KAyD1BS,WAvDe,IACRT,EAAmB,KAuD1BU,UArDc,IACPV,EAAmB,KAqD1BW,UAnDc,IACPX,EAAmB,KAmD1BY,aAvCiB,KACjB,MAAMpC,EAAQsB,OAAOC,OAAO,GAAIrD,EAAcqC,EAAgB,CAC1DtC,cAAe,IACfK,mBAAoBuB,EACpBrB,mBAAoBqB,EACpBpB,mBAAoBoB,EACpBnB,mBAAoBmB,IAExB,OAAOE,EAAUC,IAgCjBqC,WAvBe,KACf,MAAMrC,EAAQsB,OAAOC,OAAO,GAAIrD,EAAcqC,EAAgB,CAC1DtC,cAAe,IACfK,mBAAoBuB,EACpBrB,mBAAoBoB,EACpBnB,mBAAoBoB,EACpBnB,mBAAoBkB,IAExB,OAAOG,EAAUC,MClQnBsC,EAAgB,SAAStG,EAAMuG,GACjC,IAAKvG,EAAM,OACX,IAAIwG,EAAO,GACX,MAAM1F,EAAUwE,OAAOC,OAAO,GAAI1D,EAAgB0E,GLpBqUnH,IAAAA,EKuBvXoH,EAAKC,MAAQ,CACTC,MAAO1G,GAEPc,EAAQkB,aACRwE,EAAKC,MAAME,aAAe5G,EAAOQ,EAAKP,GAAOc,EAAQkB,cAErDwE,EAAKC,MAAME,aAAepG,EAAKP,GAEnCwG,EAAKC,MAAMG,gBL/B4WxH,EK+B5UoH,EAAKC,MAAME,eL/BuUvH,EAAE+D,QAAQ/D,EAAE+D,MAAM,IAAIgB,KAAK/E,KAAKK,EAAEL,IAAIG,EAAEH,KKgCra,IAGIsF,EAHAmC,EAAUL,EAAKC,MAAME,aAOrBjC,EAHA8B,EAAKC,MAAMG,eAGC9F,EAAQmB,cAIRnB,EAAQkB,cAAgBlB,EAAQmB,cAIhD,MAAM6E,EAAS,GAAGC,OAAOjG,EAAQiB,SAAUjB,EAAQgB,SAMnD,GALIgF,EAAOxH,SACPuH,EJmCc,EAAC7G,EAAMgH,EAAOtC,KAChCsC,EAAMC,QAAQC,IACVlH,EAAOA,EAAKM,QAAQ4G,EAAMxC,EAAY,KAAOA,KAEjD1E,EAAOD,EAAOC,EAAM0E,IIvCNyC,CAAcN,EAASC,EAAQpC,IAIzC8B,EAAKC,MAAMG,eAAgB,CAG3B,IAAIQ,EAAQP,EAAQ1D,MAAMuB,GAC1B8B,EAAKa,OAASD,EACThE,IAAIkE,GACDxG,EAAQiB,SAASoC,KAAKC,GAASC,EAAaiD,EAAMlD,IAC5CkD,EJMD,EAACtH,EAAMc,KACxB,IAAIuG,EAASrH,EAAK,GAClB,IAAK,IAAIuH,EAAI,EAAGA,EAAIvH,EAAKV,OAAQiI,IACzB7G,EAAgBV,EAAKuH,EAAI,GAAIvH,EAAKuH,GAAIvH,EAAKuH,EAAI,IAAM,GAAIzG,KACzDuG,GAAUvG,EAAQmB,eAEtBoF,GAAUrH,EAAKuH,GAEnB,OAAOF,GIbWG,CAAaF,EAAMxG,IAE5B4C,KAAKgB,GACV8B,EAAKpE,MAAQoE,EAAKa,OAAOlE,MAAMuB,QAI/B8B,EAAKa,OAASR,EACdL,EAAKpE,MAAQyE,EAAQ1D,MAAMuB,GAG/B,OAAOY,OAAOC,OAAOiB,EAAM1C,EAAiB0C,EAAKpE,MAAOtB,oBCtEhD,SAAS4F,EAAO5F,GAExB,OADKA,IAASA,EAAU,IACjBwF,EAAcI,EAAO5F"}