{"version":3,"file":"transformCase.js","sources":["../src/utilities.js","../src/constants.js","../node_modules/yads/index.js","../src/render.js","../src/collect.js","../src/index.js"],"sourcesContent":["/**\n * Helper Test for being a string with length 1\n * @private\n * @param {String} char\n * @returns {Boolean} is a number 0-9\n */\nconst isChar = char => {\n    return Boolean(char && typeof char === 'string' && char.length === 1)\n}\n\n/**\n * Test for being a string representation of a digit\n * @private\n * @param {String} char\n * @returns {Boolean} is a number 0-9\n */\nconst isDigit = char => {\n    return isChar(char) && Boolean(char.match(/[0-9]/))\n}\n\n/**\n * Test for being a letter\n * @private\n * @param {String} char\n * @returns {Boolaen} char is a letter\n */\nconst isLetter = char => {\n    return isChar(char) && char.toLowerCase() !== char.toUpperCase()\n}\n\n/**\n * Test for being a lowercase letter\n * @private\n * @param {String} char\n * @returns {Boolaen} char is a lower-case letter\n */\nconst isLower = char => {\n    return (\n        isChar(char) &&\n        char === char.toLowerCase() &&\n        char !== char.toUpperCase()\n    )\n}\n\n/**\n * Test for being an uppercase letter\n * @private\n * @param {String} char\n * @returns {Boolaen} char is a upper-case letter\n */\nconst isUpper = char => {\n    return (\n        isChar(char) &&\n        char === char.toUpperCase() &&\n        char !== char.toLowerCase()\n    )\n}\n\n/**\n * Test for being a string consisting of letters and/or digits\n * @private\n * @param {String} line\n * @returns {Boolean} consists of letters and/or digits only\n */\nconst isPureAlphaNumeric = line => {\n    return (\n        line &&\n        line.split &&\n        !line.split('').some(char => {\n            return !(isLetter(char) || isDigit(char))\n        })\n    )\n}\n\n/**\n * Check for a match covering the string entirely\n * @private\n * @param {String} word\n * @param {RegExp} regex\n * @returns {Boolean}\n */\nconst isExactMatch = (word, regex) => {\n    const match = word.match(regex)\n    const result = match && match[0] === word\n    return result\n}\n\nexport { isDigit, isLetter, isLower, isUpper, isPureAlphaNumeric, isExactMatch }\n","/*\n * Intake options\n * @member {Array} delimit - units to be kept together - should be like a human word\n *    @member {String || RegExp}\n * @member {Array} preserve - units to be kept together and be protected - should be like a human word\n *    @member {String || RegExp}\n * @member {Object} replace - {toReplace1: replacement1, toReplace2: replacement2}\n * @member {String} delimitInput - character to delimit input\n * @member {Boolean} delimitLetterNumber - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitLowerUpper - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitNumberLetter - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitUpperLower - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitUpperUpperLower - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {String} delimitOutput - character to delimit output\n */\nconst INTAKE_OPTIONS = {\n    delimit: [],\n    preserve: [],\n    replace: {},\n    delimitInput: '',\n    delimitLetterNumber: true,\n    delimitLowerUpper: true,\n    delimitNumberLetter: true,\n    delimitUpperLower: false,\n    delimitUpperUpperLower: true,\n    delimitOutput: ' ',\n}\n\n/*\n * Render model, with do-nothing-functions, to be exchanged by the pattern fimally\n * @member {Function} preprocess\n      do operations in fresh words array, for pure alphaNumeric patterns\n * @member {Function} postProcess\n      do operations in string, just before delivery, for pure alphaNumeric patterns\n * @member {Function} firstWordFirstChar - transform word parts\n * @member {Function} firstWordNextChars - transform word parts\n * @member {Function} nextWordsFirstChar - transform word parts\n * @member {Function} nextWordsNextChars - transform word parts\n */\nconst RENDER_MODEL = {\n    preprocess: words => words,\n    postProcess: line => line,\n    firstWordFirstChar: word => word,\n    firstWordNextChars: word => word,\n    nextWordsFirstChar: word => word,\n    nextWordsNextChars: word => word,\n}\n\nexport { INTAKE_OPTIONS, RENDER_MODEL }\n","/* eslint-disable max-len,comma-spacing */\n/** ****************************************************************************************************\n * File: diacritics.js\n * Project: yads\n * @author julian on 4/20/17\n *******************************************************************************************************/\n'use strict';\n// @formatter:off\n\nconst defaultDiacriticsRemovalMap = [\n        { base: 'A',  letters: '\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F' },\n        { base: 'AA', letters: '\\uA732' },\n        { base: 'AE', letters: '\\u00C6\\u01FC\\u01E2' },\n        { base: 'AO', letters: '\\uA734' },\n        { base: 'AU', letters: '\\uA736' },\n        { base: 'AV', letters: '\\uA738\\uA73A' },\n        { base: 'AY', letters: '\\uA73C' },\n        { base: 'B',  letters: '\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181' },\n        { base: 'C',  letters: '\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E' },\n        { base: 'D',  letters: '\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779\\u00D0' },\n        { base: 'DZ', letters: '\\u01F1\\u01C4' },\n        { base: 'Dz', letters: '\\u01F2\\u01C5' },\n        { base: 'E',  letters: '\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E' },\n        { base: 'F',  letters: '\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B' },\n        { base: 'G',  letters: '\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E' },\n        { base: 'H',  letters: '\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D' },\n        { base: 'I',  letters: '\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197' },\n        { base: 'J',  letters: '\\u004A\\u24BF\\uFF2A\\u0134\\u0248' },\n        { base: 'K',  letters: '\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2' },\n        { base: 'L',  letters: '\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780' },\n        { base: 'LJ', letters: '\\u01C7' },\n        { base: 'Lj', letters: '\\u01C8' },\n        { base: 'M',  letters: '\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C' },\n        { base: 'N',  letters: '\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4' },\n        { base: 'NJ', letters: '\\u01CA' },\n        { base: 'Nj', letters: '\\u01CB' },\n        { base: 'O',  letters: '\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C' },\n        { base: 'OI', letters: '\\u01A2' },\n        { base: 'OO', letters: '\\uA74E' },\n        { base: 'OU', letters: '\\u0222' },\n        { base: 'OE', letters: '\\u008C\\u0152' },\n        { base: 'oe', letters: '\\u009C\\u0153' },\n        { base: 'P',  letters: '\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754' },\n        { base: 'Q',  letters: '\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A' },\n        { base: 'R',  letters: '\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782' },\n        { base: 'S',  letters: '\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784' },\n        { base: 'T',  letters: '\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786' },\n        { base: 'TZ', letters: '\\uA728' },\n        { base: 'U',  letters: '\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244' },\n        { base: 'V',  letters: '\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245' },\n        { base: 'VY', letters: '\\uA760' },\n        { base: 'W',  letters: '\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72' },\n        { base: 'X',  letters: '\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C' },\n        { base: 'Y',  letters: '\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE' },\n        { base: 'Z',  letters: '\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762' },\n        { base: 'a',  letters: '\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250' },\n        { base: 'aa', letters: '\\uA733' },\n        { base: 'ae', letters: '\\u00E6\\u01FD\\u01E3' },\n        { base: 'ao', letters: '\\uA735' },\n        { base: 'au', letters: '\\uA737' },\n        { base: 'av', letters: '\\uA739\\uA73B' },\n        { base: 'ay', letters: '\\uA73D' },\n        { base: 'b',  letters: '\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253' },\n        { base: 'c',  letters: '\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184' },\n        { base: 'd',  letters: '\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A' },\n        { base: 'dz', letters: '\\u01F3\\u01C6' },\n        { base: 'e',  letters: '\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD' },\n        { base: 'f',  letters: '\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C' },\n        { base: 'g',  letters: '\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F' },\n        { base: 'h',  letters: '\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265' },\n        { base: 'hv', letters: '\\u0195' },\n        { base: 'i',  letters: '\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131' },\n        { base: 'j',  letters: '\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249' },\n        { base: 'k',  letters: '\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3' },\n        { base: 'l',  letters: '\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747' },\n        { base: 'lj', letters: '\\u01C9' },\n        { base: 'm',  letters: '\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F' },\n        { base: 'n',  letters: '\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5' },\n        { base: 'nj', letters: '\\u01CC' },\n        { base: 'o',  letters: '\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275' },\n        { base: 'oi', letters: '\\u01A3' },\n        { base: 'ou', letters: '\\u0223' },\n        { base: 'oo', letters: '\\uA74F' },\n        { base: 'p',  letters: '\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755' },\n        { base: 'q',  letters: '\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759' },\n        { base: 'r',  letters: '\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783' },\n        { base: 's',  letters: '\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B' },\n        { base: 't',  letters: '\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787' },\n        { base: 'tz', letters: '\\uA729' },\n        { base: 'u',  letters:  '\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289' },\n        { base: 'v',  letters: '\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C' },\n        { base: 'vy', letters: '\\uA761' },\n        { base: 'w',  letters: '\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73' },\n        { base: 'x',  letters: '\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D' },\n        { base: 'y',  letters: '\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF' },\n        { base: 'z',  letters: '\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763' }\n    ],\n    diacriticsMap = {};\n\ndefaultDiacriticsRemovalMap.forEach( o => [ ...o.letters ].forEach( l => diacriticsMap[ l ] = o.base ) );\n\nconst diacritics = {\n    _slower: str => str.replace( /[\\u0300-\\u036F]|[\\u1AB0-\\u1AFF]|[\\u1DC0-\\u1DFF]|[\\u20D0-\\u20FF]|[\\uFE20-\\uFE2F]/g, '' ).replace( /[^\\u0000-\\u007E]/g, a => diacriticsMap[ a ] || a ),\n    _faster: str => str.replace( /[^\\u0000-\\u007E]/g, a => diacriticsMap[ a ] || a ),\n    precomposed: imStr => ( diacritics.remove_diacritics = str => diacritics._faster( str ) ) && imStr && diacritics._faster( imStr ),\n    combining: imStr => ( diacritics.remove_diacritics = str => diacritics._slower( str ) ) && imStr && diacritics._slower( imStr ),\n    remove_diacritics: str => diacritics._slower( str ),\n    letters: str => module.exports.remove_diacritics( str ).replace( /[^a-z ]/gi, '' ),\n    packed: str => module.exports.remove_diacritics( str ).replace( /[^a-z]/gi, '' ),\n    alphanum: str => module.exports.remove_diacritics( str ).replace( /[^a-z0-9 ]/gi, '' ),\n    packed_alphanum: str => module.exports.remove_diacritics( str ).replace( /[^a-z0-9]/gi, '' )\n};\n\nmodule.exports = diacritics;\n","import { isExactMatch } from './utilities'\nimport { RENDER_MODEL } from './constants'\n//import yads from '../node_modules/yads/index.js'\nimport yads from 'yads'\n\n/**\n * Solve the problem that concatenated numbers loose menaing:\n * delimit the numbers with the output delimiter or the delimiter that matches /\\w/\n * @private\n * @param {Array} words\n * @returns {Array} enhanced words\n */\nconst delimitNumbers = (words, delimitOutput) => {\n    const delimitedNumbers = /(\\d)[-:,./](\\d)/g\n    let delimiter = delimitOutput || '_'\n    return words.map(word =>\n        word.match(delimitedNumbers)\n            ? word\n                  .replace(delimitedNumbers, `$1${delimiter}$2`)\n                  .replace(delimitedNumbers, `$1${delimiter}$2`)\n            : word,\n    )\n}\n\n/**\n * Convert curly single quotes and backticks to straight single quotes,\n * convert curly double quotes to straight double quotes\n * @private\n * @param {String} line\n * @returns {String} normalised string\n */\nconst normaliseQuotes = line => {\n    return line.replace(/‘’`/g, \"'\").replace(/“”/g, '\"')\n}\n\n/**\n * Remove all punctuation from a string\n * @private\n * @param {String} line\n * @returns {String} stripped string\n */\nconst removePunctuation = line => {\n    return normaliseQuotes(line).replace(/[…,:;[\\](){}\\-‐–—'\".!?]/g, '')\n}\n\n/**\n * Remove all diacritics and decompose ligatures\n * @private\n * @param {String} line\n * @returns {String} changed string\n */\nconst simplifyVariations = line => {\n    return yads.combining(line)\n}\n\n/**\n * Transform helper functions\n * @private\n * @param {String} word\n * @returns {String} transformed word\n */\nconst asIs = word => word\nconst toLower = word => word.toLowerCase()\nconst toUpper = word => word.toUpperCase()\n\nconst patterns = function(words, options) {\n    /**\n     * Iterative transformation\n     * @private\n     * @param {Object} model\n     * @returns {String} transformed words\n     */\n    const transform = model => {\n        const currentWords = model.preprocess(words, model.delimitOutput)\n        const transformation = currentWords.map((word, index) => {\n            if (index === 0) {\n                return options.preserve.some(regex => isExactMatch(word, regex))\n                    ? word\n                    : model.firstWordFirstChar(word.substr(0, 1)) +\n                          model.firstWordNextChars(word.substr(1))\n            } else {\n                return options.preserve.some(regex => isExactMatch(word, regex))\n                    ? word\n                    : model.nextWordsFirstChar(word.substr(0, 1)) +\n                          model.nextWordsNextChars(word.substr(1))\n            }\n        })\n        return model.postProcess(transformation.join(model.delimitOutput))\n    }\n\n    const techProcessing = {\n        preprocess: delimitNumbers,\n        postProcess: function(line) {\n            line = removePunctuation(line)\n            line = simplifyVariations(line)\n            return line\n        },\n    }\n\n    /**\n     * camelCase pattern\n     * @param {Object} model\n     * @returns {String} transformed words\n     */\n    const camelCase = () => {\n        const model = Object.assign({}, RENDER_MODEL, techProcessing, {\n            delimitOutput: '',\n            firstWordFirstChar: toLower,\n            firstWordNextChars: toLower,\n            nextWordsFirstChar: toUpper,\n            nextWordsNextChars: toLower,\n        })\n        return transform(model)\n    }\n\n    /**\n     * humanTitle pattern\n     * @param {Object} model\n     * @returns {String} transformed words\n     */\n    const humanTitle = () => {\n        const model = Object.assign({}, RENDER_MODEL, {\n            delimitOutput: ' ',\n            firstWordFirstChar: toUpper,\n            nextWordsFirstChar: toUpper,\n        })\n        return transform(model)\n    }\n\n    /**\n     * snakeCase pattern\n     * @param {Object} model\n     * @returns {String} transformed words\n     */\n    const snakeCase = () => {\n        const model = Object.assign({}, RENDER_MODEL, techProcessing, {\n            delimitOutput: '_',\n            firstWordFirstChar: toLower,\n            firstWordNextChars: toLower,\n            nextWordsFirstChar: toLower,\n            nextWordsNextChars: toLower,\n        })\n        return transform(model)\n    }\n\n    return {\n        camelCase: camelCase,\n        humanTitle: humanTitle,\n        snakeCase: snakeCase,\n    }\n}\n\nexport { patterns }\n","import {\n    isDigit,\n    isLetter,\n    isLower,\n    isUpper,\n    isPureAlphaNumeric,\n    isExactMatch,\n} from './utilities'\nimport { INTAKE_OPTIONS } from './constants'\nimport { patterns } from './render'\n\n/*\n * remove extraneous and doubled characters\n * @private\n * @param {String} line\n * @param {String} char\n * @returns {String} cleaned line\n */\nconst dedupe = (line, char) => {\n    const leading = new RegExp('^' + char)\n    const trailing = new RegExp(char + '$')\n    const doubling = new RegExp(char + char, 'g')\n    return line\n        .replace(doubling, char)\n        .replace(doubling, char)\n        .replace(doubling, char)\n        .replace(leading, '')\n        .replace(trailing, '')\n}\n\n/*\n * Transform whitespace to spaces, then clear all control characters\n * @private\n * @param {String} line\n * @returns {String} cleaned line\n */\nconst tidy = line => {\n    const controlChars = new RegExp('[\\u0000-\\u001f,\\u007f-\\u009f]')\n    return line\n        .trim()\n        .replace(/\\s+/g, ' ')\n        .replace(controlChars, '')\n}\n\n/* Test need to insert a delimiter\n * @private\n * @param {String} prev - previous character\n * @param {String} curr - current character\n * @param {Object} options\n * @returns {String} Need to insert a delimiter\n */\nconst insertDelimiter = (prev, curr, next, options) => {\n    let letNum, lowUp, numLet, upLow, upUpLow\n    letNum = options.delimitLetterNumber && isLetter(prev) && isDigit(curr)\n    lowUp = options.delimitLowerUpper && isLower(prev) && isUpper(curr)\n    numLet = options.delimitNumberLetter && isDigit(prev) && isLetter(curr)\n    upLow = options.delimitUpperLower && isUpper(prev) && isLower(curr)\n    upUpLow =\n        options.delimitUpperUpperLower &&\n        isUpper(prev) &&\n        isUpper(curr) &&\n        isLower(next)\n\n    let delimit = letNum || lowUp || numLet || upLow || upUpLow\n    return delimit\n}\n\n/* Put seperator before each concatenated word\n * @private\n * @param {String} line\n * @param {Object} options\n * @returns {String} phrase of seperated words\n */\nconst delimitWords = (line, options) => {\n    let phrase = line[0]\n    for (let i = 1; i < line.length; i++) {\n        if (insertDelimiter(line[i - 1], line[i], line[i + 1] || '', options)) {\n            phrase += options.delimitOutput\n        }\n        phrase += line[i]\n    }\n    return phrase\n}\n\n/**\n * Transform a camelcase object-key to title\n * @param {String} line\n * @param {Object} options\n * @returns {Object} - the 'prototype' / methods and some variables\n */\nconst TransformCase = function(line, userOptions) {\n    if (!line) return\n    let self = {}\n    const options = Object.assign({}, INTAKE_OPTIONS, userOptions)\n\n    // prepare\n    self.orgin = {\n        input: line,\n    }\n    if (options.delimitInput) {\n        self.orgin.standardised = dedupe(tidy(line), options.delimitInput)\n    } else {\n        self.orgin.standardised = tidy(line)\n    }\n    self.orgin.isPureAlphaNumeric = isPureAlphaNumeric(self.orgin.standardised)\n    let revised = self.orgin.standardised\n\n    // distinguish between technical from linguistic transforms\n    let delimiter\n    if (self.orgin.isPureAlphaNumeric) {\n        // assume technical phrase, or this is one human word\n        // delimit by case transition\n        delimiter = options.delimitOutput\n    } else {\n        // assume human input or technical/coded when input delimiter is given\n        // delimit by specified delimiter, (default: a space)\n        delimiter = options.delimitInput || options.delimitOutput\n    }\n\n    // replace regardsless of delimiting\n    const replaceEntries = Object.entries(options.replace)\n    if (options.replace && replaceEntries.length) {\n        for (let [key, value] of replaceEntries) {\n            revised = revised.replace(new RegExp(key, 'g'), value)\n        }\n    }\n\n    // preserve, delimit - these strings must be kept together - should be like a human word\n    const units = [].concat(options.preserve, options.delimit)\n    if (units.length) {\n        units.forEach(unit => {\n            revised = revised.replace(unit, delimiter + '$&' + delimiter)\n        })\n        revised = dedupe(revised, delimiter)\n    }\n\n    // produce an array with words\n    if (self.orgin.isPureAlphaNumeric) {\n        // assume technical phrase, or this is one human word\n        // delimit by case transition\n        let parts = revised.split(delimiter)\n        self.phrase = parts\n            .map(part =>\n                options.preserve.some(regex => isExactMatch(part, regex))\n                    ? part\n                    : delimitWords(part, options),\n            )\n            .join(delimiter)\n        self.words = self.phrase.split(delimiter)\n    } else {\n        // assume human input or technical/coded when input delimiter is given\n        // delimit by specified delimiter, (default: a space)\n        self.phrase = revised\n        self.words = revised.split(delimiter)\n    }\n\n    return Object.assign(self, patterns(self.words, options))\n}\n\nexport { TransformCase }\n","import { TransformCase } from './collect'\n\nvar index = function(input, options) {\n    if (!options) options = {}\n    return TransformCase(input, options)\n}\n\nexport default index\n"],"names":["isChar","char","Boolean","length","isDigit","match","isLetter","toLowerCase","toUpperCase","isLower","isUpper","isExactMatch","word","regex","INTAKE_OPTIONS","delimit","preserve","replace","delimitInput","delimitLetterNumber","delimitLowerUpper","delimitNumberLetter","delimitUpperLower","delimitUpperUpperLower","delimitOutput","RENDER_MODEL","preprocess","words","postProcess","line","firstWordFirstChar","firstWordNextChars","nextWordsFirstChar","nextWordsNextChars","diacriticsMap","base","letters","forEach","o","l","diacritics","_slower","str","a","_faster","precomposed","imStr","remove_diacritics","combining","module","exports","packed","alphanum","packed_alphanum","delimitNumbers","delimitedNumbers","delimiter","map","toLower","toUpper","patterns","options","transform","model","transformation","index","some","substr","join","techProcessing","yads","simplifyVariations","normaliseQuotes","removePunctuation","camelCase","Object","assign","humanTitle","snakeCase","dedupe","leading","RegExp","trailing","doubling","tidy","controlChars","trim","insertDelimiter","prev","curr","next","letNum","lowUp","numLet","upLow","upUpLow","TransformCase","userOptions","self","orgin","input","standardised","isPureAlphaNumeric","split","revised","replaceEntries","entries","key","value","units","concat","unit","parts","phrase","part","i","delimitWords"],"mappings":"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"}