{"version":3,"file":"transformCase.js","sources":["../node_modules/my-lib/module/myLib.js","../node_modules/entities/lib/esm/generated/decode-data-html.js","../node_modules/entities/lib/esm/decode_codepoint.js","../node_modules/entities/lib/esm/generated/decode-data-xml.js","../node_modules/entities/lib/esm/decode.js","../src/constants.ts","../src/collect-fn.ts","../node_modules/fold-to-ascii/lib/ascii-folder.js","../src/render-fn.ts","../src/render.ts","../src/collect.ts","../src/index.ts"],"sourcesContent":["const t=function(...t){let e=Boolean(t.length);return Array.from(t).forEach((t=>{e=e&&\"number\"==typeof t&&Number.isFinite(t)})),e},e=t=>Boolean(t&&\"string\"==typeof t&&1===t.length),n=t=>e(t)&&Boolean(t.match(/[0-9]/)),o=t=>e(t)&&t.toLowerCase()!==t.toUpperCase(),r=t=>e(t)&&t===t.toLowerCase()&&t!==t.toUpperCase(),c=t=>e(t)&&t===t.toUpperCase()&&t!==t.toLowerCase(),i=t=>Boolean(t&&t.split&&!t.split(\"\").some((t=>!(o(t)||n(t))))),f=(t,e)=>{const n=t.match(e),o=n&&n[0]===t;return Boolean(o)},u=function(t,e){return t<\"1e-\"+e&&t>\"-1e-\"+e?0:Number(Math.round(t+\"e\"+e)+\"e-\"+e)},a=function(t,e){const n=function(t,e){if(isNaN(t)||!Number.isInteger(e)||e<1)return\"NaN\";const n=Math.abs(t);if(0===n)return\"0\";if(n===1/0)return String(t);const o=Math.floor(Math.log(n)/Math.log(10)),r=t/Math.pow(10,o);return u(r,e-1)+\"e\"+o}(t,e);return Number(n)},s=function(t){return\"object\"==typeof t&&(t instanceof String||t instanceof Number||t instanceof BigInt||t instanceof Boolean||t instanceof Symbol)},l=function(t){const e=\"string\"==typeof t||\"number\"==typeof t||\"boolean\"==typeof t||\"bigint\"==typeof t||\"symbol\"==typeof t;return s(t)||e},p=function(t){return t&&(t.getRootNode()instanceof Document||t.getRootNode()instanceof ShadowRoot)},g=()=>{console.log(\"Hello World!\")},h=function(t,e){const n=[...t,...e],o=new Set(n);return Array.from(o)},y=function(t,e){const n={};return t.forEach((t=>n[t]=1)),e.filter((t=>{if(1===n[t])return delete n[t],t}))},b=function(t){const e=[],n=document.querySelectorAll(t);return e.push(...Array.from(n)),e},m=function(...t){const e=[...t].filter((t=>t>=0)),n=[...t].filter((t=>t<=0));return e.length===t.length||n.length===t.length},N=function(t){return t.split(\",\").map((t=>t.trim().replace(/\\s+/g,\" \"))).filter((t=>t.length))},j=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},w=t=>t.reduce(((t,e)=>t+e),0),S=t=>w(t)/t.length||0,d=function(t){let e=\"object\"!=typeof t;return e=e||null===t||s(t),e},B=function(t){let e=t;if(d(t))return t;if(Array.isArray(t)){e=[];for(const n of t)e.push(B(n))}else if(t instanceof Date)e=new Date(t.getTime());else if(t instanceof RegExp)e=new RegExp(t.source,t.flags);else if(\"object\"==typeof t){e={};for(const[n,o]of Object.entries(t))e[n]=B(o)}return e},A=function(t){try{return JSON.stringify(t)}catch(t){return\"\"}},C=function(t){let e;try{return e=String(t),\"[object Object]\"===e&&(e=A(t)),e}catch(e){return A(t)}},M=function(t){let e;try{return e=t.toString(),\"[object Object]\"===e&&(e=C(t)),e}catch(e){return C(t)}};export{h as arrayCombination,N as arrayFromCommaSeparatedList,b as arrayFromQuery,y as arrayIntersection,B as deepClone,C as forceStringify,g as greet,j as hasOwnProperty,i as isAlphaNumeric,p as isAttachedToDom,e as isChar,n as isDigit,m as isEqualSigns,f as isExactMatch,d as isFundamental,o as isLetter,r as isLower,l as isPrimitive,c as isUpper,t as isUsableNumber,S as mathAvg,w as mathSum,u as roundAtDecimals,a as roundAtDigits,M as stringify};\n//# sourceMappingURL=myLib.js.map\n","// Generated using scripts/write-decode-map.ts\nexport default new Uint16Array(\n// prettier-ignore\n\"\\u1d41<\\xd5\\u0131\\u028a\\u049d\\u057b\\u05d0\\u0675\\u06de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\u803b\\xc3\\u40c3ml\\u803b\\xc4\\u40c4\\u0400aceforsu\\xe5\\xfb\\xfe\\u0117\\u011c\\u0122\\u0127\\u012a\\u0100cr\\xea\\xf2kslash;\\u6216\\u0176\\xf6\\xf8;\\u6ae7ed;\\u6306y;\\u4411\\u0180crt\\u0105\\u010b\\u0114ause;\\u6235noullis;\\u612ca;\\u4392r;\\uc000\\ud835\\udd05pf;\\uc000\\ud835\\udd39eve;\\u42d8c\\xf2\\u0113mpeq;\\u624e\\u0700HOacdefhilorsu\\u014d\\u0151\\u0156\\u0180\\u019e\\u01a2\\u01b5\\u01b7\\u01ba\\u01dc\\u0215\\u0273\\u0278\\u027ecy;\\u4427PY\\u803b\\xa9\\u40a9\\u0180cpy\\u015d\\u0162\\u017aute;\\u4106\\u0100;i\\u0167\\u0168\\u62d2talDifferentialD;\\u6145leys;\\u612d\\u0200aeio\\u0189\\u018e\\u0194\\u0198ron;\\u410cdil\\u803b\\xc7\\u40c7rc;\\u4108nint;\\u6230ot;\\u410a\\u0100dn\\u01a7\\u01adilla;\\u40b8terDot;\\u40b7\\xf2\\u017fi;\\u43a7rcle\\u0200DMPT\\u01c7\\u01cb\\u01d1\\u01d6ot;\\u6299inus;\\u6296lus;\\u6295imes;\\u6297o\\u0100cs\\u01e2\\u01f8kwiseContourIntegral;\\u6232eCurly\\u0100DQ\\u0203\\u020foubleQuote;\\u601duote;\\u6019\\u0200lnpu\\u021e\\u0228\\u0247\\u0255on\\u0100;e\\u0225\\u0226\\u6237;\\u6a74\\u0180git\\u022f\\u0236\\u023aruent;\\u6261nt;\\u622fourIntegral;\\u622e\\u0100fr\\u024c\\u024e;\\u6102oduct;\\u6210nterClockwiseContourIntegral;\\u6233oss;\\u6a2fcr;\\uc000\\ud835\\udc9ep\\u0100;C\\u0284\\u0285\\u62d3ap;\\u624d\\u0580DJSZacefios\\u02a0\\u02ac\\u02b0\\u02b4\\u02b8\\u02cb\\u02d7\\u02e1\\u02e6\\u0333\\u048d\\u0100;o\\u0179\\u02a5trahd;\\u6911cy;\\u4402cy;\\u4405cy;\\u440f\\u0180grs\\u02bf\\u02c4\\u02c7ger;\\u6021r;\\u61a1hv;\\u6ae4\\u0100ay\\u02d0\\u02d5ron;\\u410e;\\u4414l\\u0100;t\\u02dd\\u02de\\u6207a;\\u4394r;\\uc000\\ud835\\udd07\\u0100af\\u02eb\\u0327\\u0100cm\\u02f0\\u0322ritical\\u0200ADGT\\u0300\\u0306\\u0316\\u031ccute;\\u40b4o\\u0174\\u030b\\u030d;\\u42d9bleAcute;\\u42ddrave;\\u4060ilde;\\u42dcond;\\u62c4ferentialD;\\u6146\\u0470\\u033d\\0\\0\\0\\u0342\\u0354\\0\\u0405f;\\uc000\\ud835\\udd3b\\u0180;DE\\u0348\\u0349\\u034d\\u40a8ot;\\u60dcqual;\\u6250ble\\u0300CDLRUV\\u0363\\u0372\\u0382\\u03cf\\u03e2\\u03f8ontourIntegra\\xec\\u0239o\\u0274\\u0379\\0\\0\\u037b\\xbb\\u0349nArrow;\\u61d3\\u0100eo\\u0387\\u03a4ft\\u0180ART\\u0390\\u0396\\u03a1rrow;\\u61d0ightArrow;\\u61d4e\\xe5\\u02cang\\u0100LR\\u03ab\\u03c4eft\\u0100AR\\u03b3\\u03b9rrow;\\u67f8ightArrow;\\u67faightArrow;\\u67f9ight\\u0100AT\\u03d8\\u03derrow;\\u61d2ee;\\u62a8p\\u0241\\u03e9\\0\\0\\u03efrrow;\\u61d1ownArrow;\\u61d5erticalBar;\\u6225n\\u0300ABLRTa\\u0412\\u042a\\u0430\\u045e\\u047f\\u037crrow\\u0180;BU\\u041d\\u041e\\u0422\\u6193ar;\\u6913pArrow;\\u61f5reve;\\u4311eft\\u02d2\\u043a\\0\\u0446\\0\\u0450ightVector;\\u6950eeVector;\\u695eector\\u0100;B\\u0459\\u045a\\u61bdar;\\u6956ight\\u01d4\\u0467\\0\\u0471eeVector;\\u695fector\\u0100;B\\u047a\\u047b\\u61c1ar;\\u6957ee\\u0100;A\\u0486\\u0487\\u62a4rrow;\\u61a7\\u0100ct\\u0492\\u0497r;\\uc000\\ud835\\udc9frok;\\u4110\\u0800NTacdfglmopqstux\\u04bd\\u04c0\\u04c4\\u04cb\\u04de\\u04e2\\u04e7\\u04ee\\u04f5\\u0521\\u052f\\u0536\\u0552\\u055d\\u0560\\u0565G;\\u414aH\\u803b\\xd0\\u40d0cute\\u803b\\xc9\\u40c9\\u0180aiy\\u04d2\\u04d7\\u04dcron;\\u411arc\\u803b\\xca\\u40ca;\\u442dot;\\u4116r;\\uc000\\ud835\\udd08rave\\u803b\\xc8\\u40c8ement;\\u6208\\u0100ap\\u04fa\\u04fecr;\\u4112ty\\u0253\\u0506\\0\\0\\u0512mallSquare;\\u65fberySmallSquare;\\u65ab\\u0100gp\\u0526\\u052aon;\\u4118f;\\uc000\\ud835\\udd3csilon;\\u4395u\\u0100ai\\u053c\\u0549l\\u0100;T\\u0542\\u0543\\u6a75ilde;\\u6242librium;\\u61cc\\u0100ci\\u0557\\u055ar;\\u6130m;\\u6a73a;\\u4397ml\\u803b\\xcb\\u40cb\\u0100ip\\u056a\\u056fsts;\\u6203onentialE;\\u6147\\u0280cfios\\u0585\\u0588\\u058d\\u05b2\\u05ccy;\\u4424r;\\uc000\\ud835\\udd09lled\\u0253\\u0597\\0\\0\\u05a3mallSquare;\\u65fcerySmallSquare;\\u65aa\\u0370\\u05ba\\0\\u05bf\\0\\0\\u05c4f;\\uc000\\ud835\\udd3dAll;\\u6200riertrf;\\u6131c\\xf2\\u05cb\\u0600JTabcdfgorst\\u05e8\\u05ec\\u05ef\\u05fa\\u0600\\u0612\\u0616\\u061b\\u061d\\u0623\\u066c\\u0672cy;\\u4403\\u803b>\\u403emma\\u0100;d\\u05f7\\u05f8\\u4393;\\u43dcreve;\\u411e\\u0180eiy\\u0607\\u060c\\u0610dil;\\u4122rc;\\u411c;\\u4413ot;\\u4120r;\\uc000\\ud835\\udd0a;\\u62d9pf;\\uc000\\ud835\\udd3eeater\\u0300EFGLST\\u0635\\u0644\\u064e\\u0656\\u065b\\u0666qual\\u0100;L\\u063e\\u063f\\u6265ess;\\u62dbullEqual;\\u6267reater;\\u6aa2ess;\\u6277lantEqual;\\u6a7eilde;\\u6273cr;\\uc000\\ud835\\udca2;\\u626b\\u0400Aacfiosu\\u0685\\u068b\\u0696\\u069b\\u069e\\u06aa\\u06be\\u06caRDcy;\\u442a\\u0100ct\\u0690\\u0694ek;\\u42c7;\\u405eirc;\\u4124r;\\u610clbertSpace;\\u610b\\u01f0\\u06af\\0\\u06b2f;\\u610dizontalLine;\\u6500\\u0100ct\\u06c3\\u06c5\\xf2\\u06a9rok;\\u4126mp\\u0144\\u06d0\\u06d8ownHum\\xf0\\u012fqual;\\u624f\\u0700EJOacdfgmnostu\\u06fa\\u06fe\\u0703\\u0707\\u070e\\u071a\\u071e\\u0721\\u0728\\u0744\\u0778\\u078b\\u078f\\u0795cy;\\u4415lig;\\u4132cy;\\u4401cute\\u803b\\xcd\\u40cd\\u0100iy\\u0713\\u0718rc\\u803b\\xce\\u40ce;\\u4418ot;\\u4130r;\\u6111rave\\u803b\\xcc\\u40cc\\u0180;ap\\u0720\\u072f\\u073f\\u0100cg\\u0734\\u0737r;\\u412ainaryI;\\u6148lie\\xf3\\u03dd\\u01f4\\u0749\\0\\u0762\\u0100;e\\u074d\\u074e\\u622c\\u0100gr\\u0753\\u0758ral;\\u622bsection;\\u62c2isible\\u0100CT\\u076c\\u0772omma;\\u6063imes;\\u6062\\u0180gpt\\u077f\\u0783\\u0788on;\\u412ef;\\uc000\\ud835\\udd40a;\\u4399cr;\\u6110ilde;\\u4128\\u01eb\\u079a\\0\\u079ecy;\\u4406l\\u803b\\xcf\\u40cf\\u0280cfosu\\u07ac\\u07b7\\u07bc\\u07c2\\u07d0\\u0100iy\\u07b1\\u07b5rc;\\u4134;\\u4419r;\\uc000\\ud835\\udd0dpf;\\uc000\\ud835\\udd41\\u01e3\\u07c7\\0\\u07ccr;\\uc000\\ud835\\udca5rcy;\\u4408kcy;\\u4404\\u0380HJacfos\\u07e4\\u07e8\\u07ec\\u07f1\\u07fd\\u0802\\u0808cy;\\u4425cy;\\u440cppa;\\u439a\\u0100ey\\u07f6\\u07fbdil;\\u4136;\\u441ar;\\uc000\\ud835\\udd0epf;\\uc000\\ud835\\udd42cr;\\uc000\\ud835\\udca6\\u0580JTaceflmost\\u0825\\u0829\\u082c\\u0850\\u0863\\u09b3\\u09b8\\u09c7\\u09cd\\u0a37\\u0a47cy;\\u4409\\u803b<\\u403c\\u0280cmnpr\\u0837\\u083c\\u0841\\u0844\\u084dute;\\u4139bda;\\u439bg;\\u67ealacetrf;\\u6112r;\\u619e\\u0180aey\\u0857\\u085c\\u0861ron;\\u413ddil;\\u413b;\\u441b\\u0100fs\\u0868\\u0970t\\u0500ACDFRTUVar\\u087e\\u08a9\\u08b1\\u08e0\\u08e6\\u08fc\\u092f\\u095b\\u0390\\u096a\\u0100nr\\u0883\\u088fgleBracket;\\u67e8row\\u0180;BR\\u0899\\u089a\\u089e\\u6190ar;\\u61e4ightArrow;\\u61c6eiling;\\u6308o\\u01f5\\u08b7\\0\\u08c3bleBracket;\\u67e6n\\u01d4\\u08c8\\0\\u08d2eeVector;\\u6961ector\\u0100;B\\u08db\\u08dc\\u61c3ar;\\u6959loor;\\u630aight\\u0100AV\\u08ef\\u08f5rrow;\\u6194ector;\\u694e\\u0100er\\u0901\\u0917e\\u0180;AV\\u0909\\u090a\\u0910\\u62a3rrow;\\u61a4ector;\\u695aiangle\\u0180;BE\\u0924\\u0925\\u0929\\u62b2ar;\\u69cfqual;\\u62b4p\\u0180DTV\\u0937\\u0942\\u094cownVector;\\u6951eeVector;\\u6960ector\\u0100;B\\u0956\\u0957\\u61bfar;\\u6958ector\\u0100;B\\u0965\\u0966\\u61bcar;\\u6952ight\\xe1\\u039cs\\u0300EFGLST\\u097e\\u098b\\u0995\\u099d\\u09a2\\u09adqualGreater;\\u62daullEqual;\\u6266reater;\\u6276ess;\\u6aa1lantEqual;\\u6a7dilde;\\u6272r;\\uc000\\ud835\\udd0f\\u0100;e\\u09bd\\u09be\\u62d8ftarrow;\\u61daidot;\\u413f\\u0180npw\\u09d4\\u0a16\\u0a1bg\\u0200LRlr\\u09de\\u09f7\\u0a02\\u0a10eft\\u0100AR\\u09e6\\u09ecrrow;\\u67f5ightArrow;\\u67f7ightArrow;\\u67f6eft\\u0100ar\\u03b3\\u0a0aight\\xe1\\u03bfight\\xe1\\u03caf;\\uc000\\ud835\\udd43er\\u0100LR\\u0a22\\u0a2ceftArrow;\\u6199ightArrow;\\u6198\\u0180cht\\u0a3e\\u0a40\\u0a42\\xf2\\u084c;\\u61b0rok;\\u4141;\\u626a\\u0400acefiosu\\u0a5a\\u0a5d\\u0a60\\u0a77\\u0a7c\\u0a85\\u0a8b\\u0a8ep;\\u6905y;\\u441c\\u0100dl\\u0a65\\u0a6fiumSpace;\\u605flintrf;\\u6133r;\\uc000\\ud835\\udd10nusPlus;\\u6213pf;\\uc000\\ud835\\udd44c\\xf2\\u0a76;\\u439c\\u0480Jacefostu\\u0aa3\\u0aa7\\u0aad\\u0ac0\\u0b14\\u0b19\\u0d91\\u0d97\\u0d9ecy;\\u440acute;\\u4143\\u0180aey\\u0ab4\\u0ab9\\u0aberon;\\u4147dil;\\u4145;\\u441d\\u0180gsw\\u0ac7\\u0af0\\u0b0eative\\u0180MTV\\u0ad3\\u0adf\\u0ae8ediumSpace;\\u600bhi\\u0100cn\\u0ae6\\u0ad8\\xeb\\u0ad9eryThi\\xee\\u0ad9ted\\u0100GL\\u0af8\\u0b06reaterGreate\\xf2\\u0673essLes\\xf3\\u0a48Line;\\u400ar;\\uc000\\ud835\\udd11\\u0200Bnpt\\u0b22\\u0b28\\u0b37\\u0b3areak;\\u6060BreakingSpace;\\u40a0f;\\u6115\\u0680;CDEGHLNPRSTV\\u0b55\\u0b56\\u0b6a\\u0b7c\\u0ba1\\u0beb\\u0c04\\u0c5e\\u0c84\\u0ca6\\u0cd8\\u0d61\\u0d85\\u6aec\\u0100ou\\u0b5b\\u0b64ngruent;\\u6262pCap;\\u626doubleVerticalBar;\\u6226\\u0180lqx\\u0b83\\u0b8a\\u0b9bement;\\u6209ual\\u0100;T\\u0b92\\u0b93\\u6260ilde;\\uc000\\u2242\\u0338ists;\\u6204reater\\u0380;EFGLST\\u0bb6\\u0bb7\\u0bbd\\u0bc9\\u0bd3\\u0bd8\\u0be5\\u626fqual;\\u6271ullEqual;\\uc000\\u2267\\u0338reater;\\uc000\\u226b\\u0338ess;\\u6279lantEqual;\\uc000\\u2a7e\\u0338ilde;\\u6275ump\\u0144\\u0bf2\\u0bfdownHump;\\uc000\\u224e\\u0338qual;\\uc000\\u224f\\u0338e\\u0100fs\\u0c0a\\u0c27tTriangle\\u0180;BE\\u0c1a\\u0c1b\\u0c21\\u62eaar;\\uc000\\u29cf\\u0338qual;\\u62ecs\\u0300;EGLST\\u0c35\\u0c36\\u0c3c\\u0c44\\u0c4b\\u0c58\\u626equal;\\u6270reater;\\u6278ess;\\uc000\\u226a\\u0338lantEqual;\\uc000\\u2a7d\\u0338ilde;\\u6274ested\\u0100GL\\u0c68\\u0c79reaterGreater;\\uc000\\u2aa2\\u0338essLess;\\uc000\\u2aa1\\u0338recedes\\u0180;ES\\u0c92\\u0c93\\u0c9b\\u6280qual;\\uc000\\u2aaf\\u0338lantEqual;\\u62e0\\u0100ei\\u0cab\\u0cb9verseElement;\\u620cghtTriangle\\u0180;BE\\u0ccb\\u0ccc\\u0cd2\\u62ebar;\\uc000\\u29d0\\u0338qual;\\u62ed\\u0100qu\\u0cdd\\u0d0cuareSu\\u0100bp\\u0ce8\\u0cf9set\\u0100;E\\u0cf0\\u0cf3\\uc000\\u228f\\u0338qual;\\u62e2erset\\u0100;E\\u0d03\\u0d06\\uc000\\u2290\\u0338qual;\\u62e3\\u0180bcp\\u0d13\\u0d24\\u0d4eset\\u0100;E\\u0d1b\\u0d1e\\uc000\\u2282\\u20d2qual;\\u6288ceeds\\u0200;EST\\u0d32\\u0d33\\u0d3b\\u0d46\\u6281qual;\\uc000\\u2ab0\\u0338lantEqual;\\u62e1ilde;\\uc000\\u227f\\u0338erset\\u0100;E\\u0d58\\u0d5b\\uc000\\u2283\\u20d2qual;\\u6289ilde\\u0200;EFT\\u0d6e\\u0d6f\\u0d75\\u0d7f\\u6241qual;\\u6244ullEqual;\\u6247ilde;\\u6249erticalBar;\\u6224cr;\\uc000\\ud835\\udca9ilde\\u803b\\xd1\\u40d1;\\u439d\\u0700Eacdfgmoprstuv\\u0dbd\\u0dc2\\u0dc9\\u0dd5\\u0ddb\\u0de0\\u0de7\\u0dfc\\u0e02\\u0e20\\u0e22\\u0e32\\u0e3f\\u0e44lig;\\u4152cute\\u803b\\xd3\\u40d3\\u0100iy\\u0dce\\u0dd3rc\\u803b\\xd4\\u40d4;\\u441eblac;\\u4150r;\\uc000\\ud835\\udd12rave\\u803b\\xd2\\u40d2\\u0180aei\\u0dee\\u0df2\\u0df6cr;\\u414cga;\\u43a9cron;\\u439fpf;\\uc000\\ud835\\udd46enCurly\\u0100DQ\\u0e0e\\u0e1aoubleQuote;\\u601cuote;\\u6018;\\u6a54\\u0100cl\\u0e27\\u0e2cr;\\uc000\\ud835\\udcaaash\\u803b\\xd8\\u40d8i\\u016c\\u0e37\\u0e3cde\\u803b\\xd5\\u40d5es;\\u6a37ml\\u803b\\xd6\\u40d6er\\u0100BP\\u0e4b\\u0e60\\u0100ar\\u0e50\\u0e53r;\\u603eac\\u0100ek\\u0e5a\\u0e5c;\\u63deet;\\u63b4arenthesis;\\u63dc\\u0480acfhilors\\u0e7f\\u0e87\\u0e8a\\u0e8f\\u0e92\\u0e94\\u0e9d\\u0eb0\\u0efcrtialD;\\u6202y;\\u441fr;\\uc000\\ud835\\udd13i;\\u43a6;\\u43a0usMinus;\\u40b1\\u0100ip\\u0ea2\\u0eadncareplan\\xe5\\u069df;\\u6119\\u0200;eio\\u0eb9\\u0eba\\u0ee0\\u0ee4\\u6abbcedes\\u0200;EST\\u0ec8\\u0ec9\\u0ecf\\u0eda\\u627aqual;\\u6aaflantEqual;\\u627cilde;\\u627eme;\\u6033\\u0100dp\\u0ee9\\u0eeeuct;\\u620fortion\\u0100;a\\u0225\\u0ef9l;\\u621d\\u0100ci\\u0f01\\u0f06r;\\uc000\\ud835\\udcab;\\u43a8\\u0200Ufos\\u0f11\\u0f16\\u0f1b\\u0f1fOT\\u803b\\\"\\u4022r;\\uc000\\ud835\\udd14pf;\\u611acr;\\uc000\\ud835\\udcac\\u0600BEacefhiorsu\\u0f3e\\u0f43\\u0f47\\u0f60\\u0f73\\u0fa7\\u0faa\\u0fad\\u1096\\u10a9\\u10b4\\u10bearr;\\u6910G\\u803b\\xae\\u40ae\\u0180cnr\\u0f4e\\u0f53\\u0f56ute;\\u4154g;\\u67ebr\\u0100;t\\u0f5c\\u0f5d\\u61a0l;\\u6916\\u0180aey\\u0f67\\u0f6c\\u0f71ron;\\u4158dil;\\u4156;\\u4420\\u0100;v\\u0f78\\u0f79\\u611cerse\\u0100EU\\u0f82\\u0f99\\u0100lq\\u0f87\\u0f8eement;\\u620builibrium;\\u61cbpEquilibrium;\\u696fr\\xbb\\u0f79o;\\u43a1ght\\u0400ACDFTUVa\\u0fc1\\u0feb\\u0ff3\\u1022\\u1028\\u105b\\u1087\\u03d8\\u0100nr\\u0fc6\\u0fd2gleBracket;\\u67e9row\\u0180;BL\\u0fdc\\u0fdd\\u0fe1\\u6192ar;\\u61e5eftArrow;\\u61c4eiling;\\u6309o\\u01f5\\u0ff9\\0\\u1005bleBracket;\\u67e7n\\u01d4\\u100a\\0\\u1014eeVector;\\u695dector\\u0100;B\\u101d\\u101e\\u61c2ar;\\u6955loor;\\u630b\\u0100er\\u102d\\u1043e\\u0180;AV\\u1035\\u1036\\u103c\\u62a2rrow;\\u61a6ector;\\u695biangle\\u0180;BE\\u1050\\u1051\\u1055\\u62b3ar;\\u69d0qual;\\u62b5p\\u0180DTV\\u1063\\u106e\\u1078ownVector;\\u694feeVector;\\u695cector\\u0100;B\\u1082\\u1083\\u61bear;\\u6954ector\\u0100;B\\u1091\\u1092\\u61c0ar;\\u6953\\u0100pu\\u109b\\u109ef;\\u611dndImplies;\\u6970ightarrow;\\u61db\\u0100ch\\u10b9\\u10bcr;\\u611b;\\u61b1leDelayed;\\u69f4\\u0680HOacfhimoqstu\\u10e4\\u10f1\\u10f7\\u10fd\\u1119\\u111e\\u1151\\u1156\\u1161\\u1167\\u11b5\\u11bb\\u11bf\\u0100Cc\\u10e9\\u10eeHcy;\\u4429y;\\u4428FTcy;\\u442ccute;\\u415a\\u0280;aeiy\\u1108\\u1109\\u110e\\u1113\\u1117\\u6abcron;\\u4160dil;\\u415erc;\\u415c;\\u4421r;\\uc000\\ud835\\udd16ort\\u0200DLRU\\u112a\\u1134\\u113e\\u1149ownArrow\\xbb\\u041eeftArrow\\xbb\\u089aightArrow\\xbb\\u0fddpArrow;\\u6191gma;\\u43a3allCircle;\\u6218pf;\\uc000\\ud835\\udd4a\\u0272\\u116d\\0\\0\\u1170t;\\u621aare\\u0200;ISU\\u117b\\u117c\\u1189\\u11af\\u65a1ntersection;\\u6293u\\u0100bp\\u118f\\u119eset\\u0100;E\\u1197\\u1198\\u628fqual;\\u6291erset\\u0100;E\\u11a8\\u11a9\\u6290qual;\\u6292nion;\\u6294cr;\\uc000\\ud835\\udcaear;\\u62c6\\u0200bcmp\\u11c8\\u11db\\u1209\\u120b\\u0100;s\\u11cd\\u11ce\\u62d0et\\u0100;E\\u11cd\\u11d5qual;\\u6286\\u0100ch\\u11e0\\u1205eeds\\u0200;EST\\u11ed\\u11ee\\u11f4\\u11ff\\u627bqual;\\u6ab0lantEqual;\\u627dilde;\\u627fTh\\xe1\\u0f8c;\\u6211\\u0180;es\\u1212\\u1213\\u1223\\u62d1rset\\u0100;E\\u121c\\u121d\\u6283qual;\\u6287et\\xbb\\u1213\\u0580HRSacfhiors\\u123e\\u1244\\u1249\\u1255\\u125e\\u1271\\u1276\\u129f\\u12c2\\u12c8\\u12d1ORN\\u803b\\xde\\u40deADE;\\u6122\\u0100Hc\\u124e\\u1252cy;\\u440by;\\u4426\\u0100bu\\u125a\\u125c;\\u4009;\\u43a4\\u0180aey\\u1265\\u126a\\u126fron;\\u4164dil;\\u4162;\\u4422r;\\uc000\\ud835\\udd17\\u0100ei\\u127b\\u1289\\u01f2\\u1280\\0\\u1287efore;\\u6234a;\\u4398\\u0100cn\\u128e\\u1298kSpace;\\uc000\\u205f\\u200aSpace;\\u6009lde\\u0200;EFT\\u12ab\\u12ac\\u12b2\\u12bc\\u623cqual;\\u6243ullEqual;\\u6245ilde;\\u6248pf;\\uc000\\ud835\\udd4bipleDot;\\u60db\\u0100ct\\u12d6\\u12dbr;\\uc000\\ud835\\udcafrok;\\u4166\\u0ae1\\u12f7\\u130e\\u131a\\u1326\\0\\u132c\\u1331\\0\\0\\0\\0\\0\\u1338\\u133d\\u1377\\u1385\\0\\u13ff\\u1404\\u140a\\u1410\\u0100cr\\u12fb\\u1301ute\\u803b\\xda\\u40dar\\u0100;o\\u1307\\u1308\\u619fcir;\\u6949r\\u01e3\\u1313\\0\\u1316y;\\u440eve;\\u416c\\u0100iy\\u131e\\u1323rc\\u803b\\xdb\\u40db;\\u4423blac;\\u4170r;\\uc000\\ud835\\udd18rave\\u803b\\xd9\\u40d9acr;\\u416a\\u0100di\\u1341\\u1369er\\u0100BP\\u1348\\u135d\\u0100ar\\u134d\\u1350r;\\u405fac\\u0100ek\\u1357\\u1359;\\u63dfet;\\u63b5arenthesis;\\u63ddon\\u0100;P\\u1370\\u1371\\u62c3lus;\\u628e\\u0100gp\\u137b\\u137fon;\\u4172f;\\uc000\\ud835\\udd4c\\u0400ADETadps\\u1395\\u13ae\\u13b8\\u13c4\\u03e8\\u13d2\\u13d7\\u13f3rrow\\u0180;BD\\u1150\\u13a0\\u13a4ar;\\u6912ownArrow;\\u61c5ownArrow;\\u6195quilibrium;\\u696eee\\u0100;A\\u13cb\\u13cc\\u62a5rrow;\\u61a5own\\xe1\\u03f3er\\u0100LR\\u13de\\u13e8eftArrow;\\u6196ightArrow;\\u6197i\\u0100;l\\u13f9\\u13fa\\u43d2on;\\u43a5ing;\\u416ecr;\\uc000\\ud835\\udcb0ilde;\\u4168ml\\u803b\\xdc\\u40dc\\u0480Dbcdefosv\\u1427\\u142c\\u1430\\u1433\\u143e\\u1485\\u148a\\u1490\\u1496ash;\\u62abar;\\u6aeby;\\u4412ash\\u0100;l\\u143b\\u143c\\u62a9;\\u6ae6\\u0100er\\u1443\\u1445;\\u62c1\\u0180bty\\u144c\\u1450\\u147aar;\\u6016\\u0100;i\\u144f\\u1455cal\\u0200BLST\\u1461\\u1465\\u146a\\u1474ar;\\u6223ine;\\u407ceparator;\\u6758ilde;\\u6240ThinSpace;\\u600ar;\\uc000\\ud835\\udd19pf;\\uc000\\ud835\\udd4dcr;\\uc000\\ud835\\udcb1dash;\\u62aa\\u0280cefos\\u14a7\\u14ac\\u14b1\\u14b6\\u14bcirc;\\u4174dge;\\u62c0r;\\uc000\\ud835\\udd1apf;\\uc000\\ud835\\udd4ecr;\\uc000\\ud835\\udcb2\\u0200fios\\u14cb\\u14d0\\u14d2\\u14d8r;\\uc000\\ud835\\udd1b;\\u439epf;\\uc000\\ud835\\udd4fcr;\\uc000\\ud835\\udcb3\\u0480AIUacfosu\\u14f1\\u14f5\\u14f9\\u14fd\\u1504\\u150f\\u1514\\u151a\\u1520cy;\\u442fcy;\\u4407cy;\\u442ecute\\u803b\\xdd\\u40dd\\u0100iy\\u1509\\u150drc;\\u4176;\\u442br;\\uc000\\ud835\\udd1cpf;\\uc000\\ud835\\udd50cr;\\uc000\\ud835\\udcb4ml;\\u4178\\u0400Hacdefos\\u1535\\u1539\\u153f\\u154b\\u154f\\u155d\\u1560\\u1564cy;\\u4416cute;\\u4179\\u0100ay\\u1544\\u1549ron;\\u417d;\\u4417ot;\\u417b\\u01f2\\u1554\\0\\u155boWidt\\xe8\\u0ad9a;\\u4396r;\\u6128pf;\\u6124cr;\\uc000\\ud835\\udcb5\\u0be1\\u1583\\u158a\\u1590\\0\\u15b0\\u15b6\\u15bf\\0\\0\\0\\0\\u15c6\\u15db\\u15eb\\u165f\\u166d\\0\\u1695\\u169b\\u16b2\\u16b9\\0\\u16becute\\u803b\\xe1\\u40e1reve;\\u4103\\u0300;Ediuy\\u159c\\u159d\\u15a1\\u15a3\\u15a8\\u15ad\\u623e;\\uc000\\u223e\\u0333;\\u623frc\\u803b\\xe2\\u40e2te\\u80bb\\xb4\\u0306;\\u4430lig\\u803b\\xe6\\u40e6\\u0100;r\\xb2\\u15ba;\\uc000\\ud835\\udd1erave\\u803b\\xe0\\u40e0\\u0100ep\\u15ca\\u15d6\\u0100fp\\u15cf\\u15d4sym;\\u6135\\xe8\\u15d3ha;\\u43b1\\u0100ap\\u15dfc\\u0100cl\\u15e4\\u15e7r;\\u4101g;\\u6a3f\\u0264\\u15f0\\0\\0\\u160a\\u0280;adsv\\u15fa\\u15fb\\u15ff\\u1601\\u1607\\u6227nd;\\u6a55;\\u6a5clope;\\u6a58;\\u6a5a\\u0380;elmrsz\\u1618\\u1619\\u161b\\u161e\\u163f\\u164f\\u1659\\u6220;\\u69a4e\\xbb\\u1619sd\\u0100;a\\u1625\\u1626\\u6221\\u0461\\u1630\\u1632\\u1634\\u1636\\u1638\\u163a\\u163c\\u163e;\\u69a8;\\u69a9;\\u69aa;\\u69ab;\\u69ac;\\u69ad;\\u69ae;\\u69aft\\u0100;v\\u1645\\u1646\\u621fb\\u0100;d\\u164c\\u164d\\u62be;\\u699d\\u0100pt\\u1654\\u1657h;\\u6222\\xbb\\xb9arr;\\u637c\\u0100gp\\u1663\\u1667on;\\u4105f;\\uc000\\ud835\\udd52\\u0380;Eaeiop\\u12c1\\u167b\\u167d\\u1682\\u1684\\u1687\\u168a;\\u6a70cir;\\u6a6f;\\u624ad;\\u624bs;\\u4027rox\\u0100;e\\u12c1\\u1692\\xf1\\u1683ing\\u803b\\xe5\\u40e5\\u0180cty\\u16a1\\u16a6\\u16a8r;\\uc000\\ud835\\udcb6;\\u402amp\\u0100;e\\u12c1\\u16af\\xf1\\u0288ilde\\u803b\\xe3\\u40e3ml\\u803b\\xe4\\u40e4\\u0100ci\\u16c2\\u16c8onin\\xf4\\u0272nt;\\u6a11\\u0800Nabcdefiklnoprsu\\u16ed\\u16f1\\u1730\\u173c\\u1743\\u1748\\u1778\\u177d\\u17e0\\u17e6\\u1839\\u1850\\u170d\\u193d\\u1948\\u1970ot;\\u6aed\\u0100cr\\u16f6\\u171ek\\u0200ceps\\u1700\\u1705\\u170d\\u1713ong;\\u624cpsilon;\\u43f6rime;\\u6035im\\u0100;e\\u171a\\u171b\\u623dq;\\u62cd\\u0176\\u1722\\u1726ee;\\u62bded\\u0100;g\\u172c\\u172d\\u6305e\\xbb\\u172drk\\u0100;t\\u135c\\u1737brk;\\u63b6\\u0100oy\\u1701\\u1741;\\u4431quo;\\u601e\\u0280cmprt\\u1753\\u175b\\u1761\\u1764\\u1768aus\\u0100;e\\u010a\\u0109ptyv;\\u69b0s\\xe9\\u170cno\\xf5\\u0113\\u0180ahw\\u176f\\u1771\\u1773;\\u43b2;\\u6136een;\\u626cr;\\uc000\\ud835\\udd1fg\\u0380costuvw\\u178d\\u179d\\u17b3\\u17c1\\u17d5\\u17db\\u17de\\u0180aiu\\u1794\\u1796\\u179a\\xf0\\u0760rc;\\u65efp\\xbb\\u1371\\u0180dpt\\u17a4\\u17a8\\u17adot;\\u6a00lus;\\u6a01imes;\\u6a02\\u0271\\u17b9\\0\\0\\u17becup;\\u6a06ar;\\u6605riangle\\u0100du\\u17cd\\u17d2own;\\u65bdp;\\u65b3plus;\\u6a04e\\xe5\\u1444\\xe5\\u14adarow;\\u690d\\u0180ako\\u17ed\\u1826\\u1835\\u0100cn\\u17f2\\u1823k\\u0180lst\\u17fa\\u05ab\\u1802ozenge;\\u69ebriangle\\u0200;dlr\\u1812\\u1813\\u1818\\u181d\\u65b4own;\\u65beeft;\\u65c2ight;\\u65b8k;\\u6423\\u01b1\\u182b\\0\\u1833\\u01b2\\u182f\\0\\u1831;\\u6592;\\u65914;\\u6593ck;\\u6588\\u0100eo\\u183e\\u184d\\u0100;q\\u1843\\u1846\\uc000=\\u20e5uiv;\\uc000\\u2261\\u20e5t;\\u6310\\u0200ptwx\\u1859\\u185e\\u1867\\u186cf;\\uc000\\ud835\\udd53\\u0100;t\\u13cb\\u1863om\\xbb\\u13cctie;\\u62c8\\u0600DHUVbdhmptuv\\u1885\\u1896\\u18aa\\u18bb\\u18d7\\u18db\\u18ec\\u18ff\\u1905\\u190a\\u1910\\u1921\\u0200LRlr\\u188e\\u1890\\u1892\\u1894;\\u6557;\\u6554;\\u6556;\\u6553\\u0280;DUdu\\u18a1\\u18a2\\u18a4\\u18a6\\u18a8\\u6550;\\u6566;\\u6569;\\u6564;\\u6567\\u0200LRlr\\u18b3\\u18b5\\u18b7\\u18b9;\\u655d;\\u655a;\\u655c;\\u6559\\u0380;HLRhlr\\u18ca\\u18cb\\u18cd\\u18cf\\u18d1\\u18d3\\u18d5\\u6551;\\u656c;\\u6563;\\u6560;\\u656b;\\u6562;\\u655fox;\\u69c9\\u0200LRlr\\u18e4\\u18e6\\u18e8\\u18ea;\\u6555;\\u6552;\\u6510;\\u650c\\u0280;DUdu\\u06bd\\u18f7\\u18f9\\u18fb\\u18fd;\\u6565;\\u6568;\\u652c;\\u6534inus;\\u629flus;\\u629eimes;\\u62a0\\u0200LRlr\\u1919\\u191b\\u191d\\u191f;\\u655b;\\u6558;\\u6518;\\u6514\\u0380;HLRhlr\\u1930\\u1931\\u1933\\u1935\\u1937\\u1939\\u193b\\u6502;\\u656a;\\u6561;\\u655e;\\u653c;\\u6524;\\u651c\\u0100ev\\u0123\\u1942bar\\u803b\\xa6\\u40a6\\u0200ceio\\u1951\\u1956\\u195a\\u1960r;\\uc000\\ud835\\udcb7mi;\\u604fm\\u0100;e\\u171a\\u171cl\\u0180;bh\\u1968\\u1969\\u196b\\u405c;\\u69c5sub;\\u67c8\\u016c\\u1974\\u197el\\u0100;e\\u1979\\u197a\\u6022t\\xbb\\u197ap\\u0180;Ee\\u012f\\u1985\\u1987;\\u6aae\\u0100;q\\u06dc\\u06db\\u0ce1\\u19a7\\0\\u19e8\\u1a11\\u1a15\\u1a32\\0\\u1a37\\u1a50\\0\\0\\u1ab4\\0\\0\\u1ac1\\0\\0\\u1b21\\u1b2e\\u1b4d\\u1b52\\0\\u1bfd\\0\\u1c0c\\u0180cpr\\u19ad\\u19b2\\u19ddute;\\u4107\\u0300;abcds\\u19bf\\u19c0\\u19c4\\u19ca\\u19d5\\u19d9\\u6229nd;\\u6a44rcup;\\u6a49\\u0100au\\u19cf\\u19d2p;\\u6a4bp;\\u6a47ot;\\u6a40;\\uc000\\u2229\\ufe00\\u0100eo\\u19e2\\u19e5t;\\u6041\\xee\\u0693\\u0200aeiu\\u19f0\\u19fb\\u1a01\\u1a05\\u01f0\\u19f5\\0\\u19f8s;\\u6a4don;\\u410ddil\\u803b\\xe7\\u40e7rc;\\u4109ps\\u0100;s\\u1a0c\\u1a0d\\u6a4cm;\\u6a50ot;\\u410b\\u0180dmn\\u1a1b\\u1a20\\u1a26il\\u80bb\\xb8\\u01adptyv;\\u69b2t\\u8100\\xa2;e\\u1a2d\\u1a2e\\u40a2r\\xe4\\u01b2r;\\uc000\\ud835\\udd20\\u0180cei\\u1a3d\\u1a40\\u1a4dy;\\u4447ck\\u0100;m\\u1a47\\u1a48\\u6713ark\\xbb\\u1a48;\\u43c7r\\u0380;Ecefms\\u1a5f\\u1a60\\u1a62\\u1a6b\\u1aa4\\u1aaa\\u1aae\\u65cb;\\u69c3\\u0180;el\\u1a69\\u1a6a\\u1a6d\\u42c6q;\\u6257e\\u0261\\u1a74\\0\\0\\u1a88rrow\\u0100lr\\u1a7c\\u1a81eft;\\u61baight;\\u61bb\\u0280RSacd\\u1a92\\u1a94\\u1a96\\u1a9a\\u1a9f\\xbb\\u0f47;\\u64c8st;\\u629birc;\\u629aash;\\u629dnint;\\u6a10id;\\u6aefcir;\\u69c2ubs\\u0100;u\\u1abb\\u1abc\\u6663it\\xbb\\u1abc\\u02ec\\u1ac7\\u1ad4\\u1afa\\0\\u1b0aon\\u0100;e\\u1acd\\u1ace\\u403a\\u0100;q\\xc7\\xc6\\u026d\\u1ad9\\0\\0\\u1ae2a\\u0100;t\\u1ade\\u1adf\\u402c;\\u4040\\u0180;fl\\u1ae8\\u1ae9\\u1aeb\\u6201\\xee\\u1160e\\u0100mx\\u1af1\\u1af6ent\\xbb\\u1ae9e\\xf3\\u024d\\u01e7\\u1afe\\0\\u1b07\\u0100;d\\u12bb\\u1b02ot;\\u6a6dn\\xf4\\u0246\\u0180fry\\u1b10\\u1b14\\u1b17;\\uc000\\ud835\\udd54o\\xe4\\u0254\\u8100\\xa9;s\\u0155\\u1b1dr;\\u6117\\u0100ao\\u1b25\\u1b29rr;\\u61b5ss;\\u6717\\u0100cu\\u1b32\\u1b37r;\\uc000\\ud835\\udcb8\\u0100bp\\u1b3c\\u1b44\\u0100;e\\u1b41\\u1b42\\u6acf;\\u6ad1\\u0100;e\\u1b49\\u1b4a\\u6ad0;\\u6ad2dot;\\u62ef\\u0380delprvw\\u1b60\\u1b6c\\u1b77\\u1b82\\u1bac\\u1bd4\\u1bf9arr\\u0100lr\\u1b68\\u1b6a;\\u6938;\\u6935\\u0270\\u1b72\\0\\0\\u1b75r;\\u62dec;\\u62dfarr\\u0100;p\\u1b7f\\u1b80\\u61b6;\\u693d\\u0300;bcdos\\u1b8f\\u1b90\\u1b96\\u1ba1\\u1ba5\\u1ba8\\u622arcap;\\u6a48\\u0100au\\u1b9b\\u1b9ep;\\u6a46p;\\u6a4aot;\\u628dr;\\u6a45;\\uc000\\u222a\\ufe00\\u0200alrv\\u1bb5\\u1bbf\\u1bde\\u1be3rr\\u0100;m\\u1bbc\\u1bbd\\u61b7;\\u693cy\\u0180evw\\u1bc7\\u1bd4\\u1bd8q\\u0270\\u1bce\\0\\0\\u1bd2re\\xe3\\u1b73u\\xe3\\u1b75ee;\\u62ceedge;\\u62cfen\\u803b\\xa4\\u40a4earrow\\u0100lr\\u1bee\\u1bf3eft\\xbb\\u1b80ight\\xbb\\u1bbde\\xe4\\u1bdd\\u0100ci\\u1c01\\u1c07onin\\xf4\\u01f7nt;\\u6231lcty;\\u632d\\u0980AHabcdefhijlorstuwz\\u1c38\\u1c3b\\u1c3f\\u1c5d\\u1c69\\u1c75\\u1c8a\\u1c9e\\u1cac\\u1cb7\\u1cfb\\u1cff\\u1d0d\\u1d7b\\u1d91\\u1dab\\u1dbb\\u1dc6\\u1dcdr\\xf2\\u0381ar;\\u6965\\u0200glrs\\u1c48\\u1c4d\\u1c52\\u1c54ger;\\u6020eth;\\u6138\\xf2\\u1133h\\u0100;v\\u1c5a\\u1c5b\\u6010\\xbb\\u090a\\u016b\\u1c61\\u1c67arow;\\u690fa\\xe3\\u0315\\u0100ay\\u1c6e\\u1c73ron;\\u410f;\\u4434\\u0180;ao\\u0332\\u1c7c\\u1c84\\u0100gr\\u02bf\\u1c81r;\\u61catseq;\\u6a77\\u0180glm\\u1c91\\u1c94\\u1c98\\u803b\\xb0\\u40b0ta;\\u43b4ptyv;\\u69b1\\u0100ir\\u1ca3\\u1ca8sht;\\u697f;\\uc000\\ud835\\udd21ar\\u0100lr\\u1cb3\\u1cb5\\xbb\\u08dc\\xbb\\u101e\\u0280aegsv\\u1cc2\\u0378\\u1cd6\\u1cdc\\u1ce0m\\u0180;os\\u0326\\u1cca\\u1cd4nd\\u0100;s\\u0326\\u1cd1uit;\\u6666amma;\\u43ddin;\\u62f2\\u0180;io\\u1ce7\\u1ce8\\u1cf8\\u40f7de\\u8100\\xf7;o\\u1ce7\\u1cf0ntimes;\\u62c7n\\xf8\\u1cf7cy;\\u4452c\\u026f\\u1d06\\0\\0\\u1d0arn;\\u631eop;\\u630d\\u0280lptuw\\u1d18\\u1d1d\\u1d22\\u1d49\\u1d55lar;\\u4024f;\\uc000\\ud835\\udd55\\u0280;emps\\u030b\\u1d2d\\u1d37\\u1d3d\\u1d42q\\u0100;d\\u0352\\u1d33ot;\\u6251inus;\\u6238lus;\\u6214quare;\\u62a1blebarwedg\\xe5\\xfan\\u0180adh\\u112e\\u1d5d\\u1d67ownarrow\\xf3\\u1c83arpoon\\u0100lr\\u1d72\\u1d76ef\\xf4\\u1cb4igh\\xf4\\u1cb6\\u0162\\u1d7f\\u1d85karo\\xf7\\u0f42\\u026f\\u1d8a\\0\\0\\u1d8ern;\\u631fop;\\u630c\\u0180cot\\u1d98\\u1da3\\u1da6\\u0100ry\\u1d9d\\u1da1;\\uc000\\ud835\\udcb9;\\u4455l;\\u69f6rok;\\u4111\\u0100dr\\u1db0\\u1db4ot;\\u62f1i\\u0100;f\\u1dba\\u1816\\u65bf\\u0100ah\\u1dc0\\u1dc3r\\xf2\\u0429a\\xf2\\u0fa6angle;\\u69a6\\u0100ci\\u1dd2\\u1dd5y;\\u445fgrarr;\\u67ff\\u0900Dacdefglmnopqrstux\\u1e01\\u1e09\\u1e19\\u1e38\\u0578\\u1e3c\\u1e49\\u1e61\\u1e7e\\u1ea5\\u1eaf\\u1ebd\\u1ee1\\u1f2a\\u1f37\\u1f44\\u1f4e\\u1f5a\\u0100Do\\u1e06\\u1d34o\\xf4\\u1c89\\u0100cs\\u1e0e\\u1e14ute\\u803b\\xe9\\u40e9ter;\\u6a6e\\u0200aioy\\u1e22\\u1e27\\u1e31\\u1e36ron;\\u411br\\u0100;c\\u1e2d\\u1e2e\\u6256\\u803b\\xea\\u40ealon;\\u6255;\\u444dot;\\u4117\\u0100Dr\\u1e41\\u1e45ot;\\u6252;\\uc000\\ud835\\udd22\\u0180;rs\\u1e50\\u1e51\\u1e57\\u6a9aave\\u803b\\xe8\\u40e8\\u0100;d\\u1e5c\\u1e5d\\u6a96ot;\\u6a98\\u0200;ils\\u1e6a\\u1e6b\\u1e72\\u1e74\\u6a99nters;\\u63e7;\\u6113\\u0100;d\\u1e79\\u1e7a\\u6a95ot;\\u6a97\\u0180aps\\u1e85\\u1e89\\u1e97cr;\\u4113ty\\u0180;sv\\u1e92\\u1e93\\u1e95\\u6205et\\xbb\\u1e93p\\u01001;\\u1e9d\\u1ea4\\u0133\\u1ea1\\u1ea3;\\u6004;\\u6005\\u6003\\u0100gs\\u1eaa\\u1eac;\\u414bp;\\u6002\\u0100gp\\u1eb4\\u1eb8on;\\u4119f;\\uc000\\ud835\\udd56\\u0180als\\u1ec4\\u1ece\\u1ed2r\\u0100;s\\u1eca\\u1ecb\\u62d5l;\\u69e3us;\\u6a71i\\u0180;lv\\u1eda\\u1edb\\u1edf\\u43b5on\\xbb\\u1edb;\\u43f5\\u0200csuv\\u1eea\\u1ef3\\u1f0b\\u1f23\\u0100io\\u1eef\\u1e31rc\\xbb\\u1e2e\\u0269\\u1ef9\\0\\0\\u1efb\\xed\\u0548ant\\u0100gl\\u1f02\\u1f06tr\\xbb\\u1e5dess\\xbb\\u1e7a\\u0180aei\\u1f12\\u1f16\\u1f1als;\\u403dst;\\u625fv\\u0100;D\\u0235\\u1f20D;\\u6a78parsl;\\u69e5\\u0100Da\\u1f2f\\u1f33ot;\\u6253rr;\\u6971\\u0180cdi\\u1f3e\\u1f41\\u1ef8r;\\u612fo\\xf4\\u0352\\u0100ah\\u1f49\\u1f4b;\\u43b7\\u803b\\xf0\\u40f0\\u0100mr\\u1f53\\u1f57l\\u803b\\xeb\\u40ebo;\\u60ac\\u0180cip\\u1f61\\u1f64\\u1f67l;\\u4021s\\xf4\\u056e\\u0100eo\\u1f6c\\u1f74ctatio\\xee\\u0559nential\\xe5\\u0579\\u09e1\\u1f92\\0\\u1f9e\\0\\u1fa1\\u1fa7\\0\\0\\u1fc6\\u1fcc\\0\\u1fd3\\0\\u1fe6\\u1fea\\u2000\\0\\u2008\\u205allingdotse\\xf1\\u1e44y;\\u4444male;\\u6640\\u0180ilr\\u1fad\\u1fb3\\u1fc1lig;\\u8000\\ufb03\\u0269\\u1fb9\\0\\0\\u1fbdg;\\u8000\\ufb00ig;\\u8000\\ufb04;\\uc000\\ud835\\udd23lig;\\u8000\\ufb01lig;\\uc000fj\\u0180alt\\u1fd9\\u1fdc\\u1fe1t;\\u666dig;\\u8000\\ufb02ns;\\u65b1of;\\u4192\\u01f0\\u1fee\\0\\u1ff3f;\\uc000\\ud835\\udd57\\u0100ak\\u05bf\\u1ff7\\u0100;v\\u1ffc\\u1ffd\\u62d4;\\u6ad9artint;\\u6a0d\\u0100ao\\u200c\\u2055\\u0100cs\\u2011\\u2052\\u03b1\\u201a\\u2030\\u2038\\u2045\\u2048\\0\\u2050\\u03b2\\u2022\\u2025\\u2027\\u202a\\u202c\\0\\u202e\\u803b\\xbd\\u40bd;\\u6153\\u803b\\xbc\\u40bc;\\u6155;\\u6159;\\u615b\\u01b3\\u2034\\0\\u2036;\\u6154;\\u6156\\u02b4\\u203e\\u2041\\0\\0\\u2043\\u803b\\xbe\\u40be;\\u6157;\\u615c5;\\u6158\\u01b6\\u204c\\0\\u204e;\\u615a;\\u615d8;\\u615el;\\u6044wn;\\u6322cr;\\uc000\\ud835\\udcbb\\u0880Eabcdefgijlnorstv\\u2082\\u2089\\u209f\\u20a5\\u20b0\\u20b4\\u20f0\\u20f5\\u20fa\\u20ff\\u2103\\u2112\\u2138\\u0317\\u213e\\u2152\\u219e\\u0100;l\\u064d\\u2087;\\u6a8c\\u0180cmp\\u2090\\u2095\\u209dute;\\u41f5ma\\u0100;d\\u209c\\u1cda\\u43b3;\\u6a86reve;\\u411f\\u0100iy\\u20aa\\u20aerc;\\u411d;\\u4433ot;\\u4121\\u0200;lqs\\u063e\\u0642\\u20bd\\u20c9\\u0180;qs\\u063e\\u064c\\u20c4lan\\xf4\\u0665\\u0200;cdl\\u0665\\u20d2\\u20d5\\u20e5c;\\u6aa9ot\\u0100;o\\u20dc\\u20dd\\u6a80\\u0100;l\\u20e2\\u20e3\\u6a82;\\u6a84\\u0100;e\\u20ea\\u20ed\\uc000\\u22db\\ufe00s;\\u6a94r;\\uc000\\ud835\\udd24\\u0100;g\\u0673\\u061bmel;\\u6137cy;\\u4453\\u0200;Eaj\\u065a\\u210c\\u210e\\u2110;\\u6a92;\\u6aa5;\\u6aa4\\u0200Eaes\\u211b\\u211d\\u2129\\u2134;\\u6269p\\u0100;p\\u2123\\u2124\\u6a8arox\\xbb\\u2124\\u0100;q\\u212e\\u212f\\u6a88\\u0100;q\\u212e\\u211bim;\\u62e7pf;\\uc000\\ud835\\udd58\\u0100ci\\u2143\\u2146r;\\u610am\\u0180;el\\u066b\\u214e\\u2150;\\u6a8e;\\u6a90\\u8300>;cdlqr\\u05ee\\u2160\\u216a\\u216e\\u2173\\u2179\\u0100ci\\u2165\\u2167;\\u6aa7r;\\u6a7aot;\\u62d7Par;\\u6995uest;\\u6a7c\\u0280adels\\u2184\\u216a\\u2190\\u0656\\u219b\\u01f0\\u2189\\0\\u218epro\\xf8\\u209er;\\u6978q\\u0100lq\\u063f\\u2196les\\xf3\\u2088i\\xed\\u066b\\u0100en\\u21a3\\u21adrtneqq;\\uc000\\u2269\\ufe00\\xc5\\u21aa\\u0500Aabcefkosy\\u21c4\\u21c7\\u21f1\\u21f5\\u21fa\\u2218\\u221d\\u222f\\u2268\\u227dr\\xf2\\u03a0\\u0200ilmr\\u21d0\\u21d4\\u21d7\\u21dbrs\\xf0\\u1484f\\xbb\\u2024il\\xf4\\u06a9\\u0100dr\\u21e0\\u21e4cy;\\u444a\\u0180;cw\\u08f4\\u21eb\\u21efir;\\u6948;\\u61adar;\\u610firc;\\u4125\\u0180alr\\u2201\\u220e\\u2213rts\\u0100;u\\u2209\\u220a\\u6665it\\xbb\\u220alip;\\u6026con;\\u62b9r;\\uc000\\ud835\\udd25s\\u0100ew\\u2223\\u2229arow;\\u6925arow;\\u6926\\u0280amopr\\u223a\\u223e\\u2243\\u225e\\u2263rr;\\u61fftht;\\u623bk\\u0100lr\\u2249\\u2253eftarrow;\\u61a9ightarrow;\\u61aaf;\\uc000\\ud835\\udd59bar;\\u6015\\u0180clt\\u226f\\u2274\\u2278r;\\uc000\\ud835\\udcbdas\\xe8\\u21f4rok;\\u4127\\u0100bp\\u2282\\u2287ull;\\u6043hen\\xbb\\u1c5b\\u0ae1\\u22a3\\0\\u22aa\\0\\u22b8\\u22c5\\u22ce\\0\\u22d5\\u22f3\\0\\0\\u22f8\\u2322\\u2367\\u2362\\u237f\\0\\u2386\\u23aa\\u23b4cute\\u803b\\xed\\u40ed\\u0180;iy\\u0771\\u22b0\\u22b5rc\\u803b\\xee\\u40ee;\\u4438\\u0100cx\\u22bc\\u22bfy;\\u4435cl\\u803b\\xa1\\u40a1\\u0100fr\\u039f\\u22c9;\\uc000\\ud835\\udd26rave\\u803b\\xec\\u40ec\\u0200;ino\\u073e\\u22dd\\u22e9\\u22ee\\u0100in\\u22e2\\u22e6nt;\\u6a0ct;\\u622dfin;\\u69dcta;\\u6129lig;\\u4133\\u0180aop\\u22fe\\u231a\\u231d\\u0180cgt\\u2305\\u2308\\u2317r;\\u412b\\u0180elp\\u071f\\u230f\\u2313in\\xe5\\u078ear\\xf4\\u0720h;\\u4131f;\\u62b7ed;\\u41b5\\u0280;cfot\\u04f4\\u232c\\u2331\\u233d\\u2341are;\\u6105in\\u0100;t\\u2338\\u2339\\u621eie;\\u69dddo\\xf4\\u2319\\u0280;celp\\u0757\\u234c\\u2350\\u235b\\u2361al;\\u62ba\\u0100gr\\u2355\\u2359er\\xf3\\u1563\\xe3\\u234darhk;\\u6a17rod;\\u6a3c\\u0200cgpt\\u236f\\u2372\\u2376\\u237by;\\u4451on;\\u412ff;\\uc000\\ud835\\udd5aa;\\u43b9uest\\u803b\\xbf\\u40bf\\u0100ci\\u238a\\u238fr;\\uc000\\ud835\\udcben\\u0280;Edsv\\u04f4\\u239b\\u239d\\u23a1\\u04f3;\\u62f9ot;\\u62f5\\u0100;v\\u23a6\\u23a7\\u62f4;\\u62f3\\u0100;i\\u0777\\u23aelde;\\u4129\\u01eb\\u23b8\\0\\u23bccy;\\u4456l\\u803b\\xef\\u40ef\\u0300cfmosu\\u23cc\\u23d7\\u23dc\\u23e1\\u23e7\\u23f5\\u0100iy\\u23d1\\u23d5rc;\\u4135;\\u4439r;\\uc000\\ud835\\udd27ath;\\u4237pf;\\uc000\\ud835\\udd5b\\u01e3\\u23ec\\0\\u23f1r;\\uc000\\ud835\\udcbfrcy;\\u4458kcy;\\u4454\\u0400acfghjos\\u240b\\u2416\\u2422\\u2427\\u242d\\u2431\\u2435\\u243bppa\\u0100;v\\u2413\\u2414\\u43ba;\\u43f0\\u0100ey\\u241b\\u2420dil;\\u4137;\\u443ar;\\uc000\\ud835\\udd28reen;\\u4138cy;\\u4445cy;\\u445cpf;\\uc000\\ud835\\udd5ccr;\\uc000\\ud835\\udcc0\\u0b80ABEHabcdefghjlmnoprstuv\\u2470\\u2481\\u2486\\u248d\\u2491\\u250e\\u253d\\u255a\\u2580\\u264e\\u265e\\u2665\\u2679\\u267d\\u269a\\u26b2\\u26d8\\u275d\\u2768\\u278b\\u27c0\\u2801\\u2812\\u0180art\\u2477\\u247a\\u247cr\\xf2\\u09c6\\xf2\\u0395ail;\\u691barr;\\u690e\\u0100;g\\u0994\\u248b;\\u6a8bar;\\u6962\\u0963\\u24a5\\0\\u24aa\\0\\u24b1\\0\\0\\0\\0\\0\\u24b5\\u24ba\\0\\u24c6\\u24c8\\u24cd\\0\\u24f9ute;\\u413amptyv;\\u69b4ra\\xee\\u084cbda;\\u43bbg\\u0180;dl\\u088e\\u24c1\\u24c3;\\u6991\\xe5\\u088e;\\u6a85uo\\u803b\\xab\\u40abr\\u0400;bfhlpst\\u0899\\u24de\\u24e6\\u24e9\\u24eb\\u24ee\\u24f1\\u24f5\\u0100;f\\u089d\\u24e3s;\\u691fs;\\u691d\\xeb\\u2252p;\\u61abl;\\u6939im;\\u6973l;\\u61a2\\u0180;ae\\u24ff\\u2500\\u2504\\u6aabil;\\u6919\\u0100;s\\u2509\\u250a\\u6aad;\\uc000\\u2aad\\ufe00\\u0180abr\\u2515\\u2519\\u251drr;\\u690crk;\\u6772\\u0100ak\\u2522\\u252cc\\u0100ek\\u2528\\u252a;\\u407b;\\u405b\\u0100es\\u2531\\u2533;\\u698bl\\u0100du\\u2539\\u253b;\\u698f;\\u698d\\u0200aeuy\\u2546\\u254b\\u2556\\u2558ron;\\u413e\\u0100di\\u2550\\u2554il;\\u413c\\xec\\u08b0\\xe2\\u2529;\\u443b\\u0200cqrs\\u2563\\u2566\\u256d\\u257da;\\u6936uo\\u0100;r\\u0e19\\u1746\\u0100du\\u2572\\u2577har;\\u6967shar;\\u694bh;\\u61b2\\u0280;fgqs\\u258b\\u258c\\u0989\\u25f3\\u25ff\\u6264t\\u0280ahlrt\\u2598\\u25a4\\u25b7\\u25c2\\u25e8rrow\\u0100;t\\u0899\\u25a1a\\xe9\\u24f6arpoon\\u0100du\\u25af\\u25b4own\\xbb\\u045ap\\xbb\\u0966eftarrows;\\u61c7ight\\u0180ahs\\u25cd\\u25d6\\u25derrow\\u0100;s\\u08f4\\u08a7arpoon\\xf3\\u0f98quigarro\\xf7\\u21f0hreetimes;\\u62cb\\u0180;qs\\u258b\\u0993\\u25falan\\xf4\\u09ac\\u0280;cdgs\\u09ac\\u260a\\u260d\\u261d\\u2628c;\\u6aa8ot\\u0100;o\\u2614\\u2615\\u6a7f\\u0100;r\\u261a\\u261b\\u6a81;\\u6a83\\u0100;e\\u2622\\u2625\\uc000\\u22da\\ufe00s;\\u6a93\\u0280adegs\\u2633\\u2639\\u263d\\u2649\\u264bppro\\xf8\\u24c6ot;\\u62d6q\\u0100gq\\u2643\\u2645\\xf4\\u0989gt\\xf2\\u248c\\xf4\\u099bi\\xed\\u09b2\\u0180ilr\\u2655\\u08e1\\u265asht;\\u697c;\\uc000\\ud835\\udd29\\u0100;E\\u099c\\u2663;\\u6a91\\u0161\\u2669\\u2676r\\u0100du\\u25b2\\u266e\\u0100;l\\u0965\\u2673;\\u696alk;\\u6584cy;\\u4459\\u0280;acht\\u0a48\\u2688\\u268b\\u2691\\u2696r\\xf2\\u25c1orne\\xf2\\u1d08ard;\\u696bri;\\u65fa\\u0100io\\u269f\\u26a4dot;\\u4140ust\\u0100;a\\u26ac\\u26ad\\u63b0che\\xbb\\u26ad\\u0200Eaes\\u26bb\\u26bd\\u26c9\\u26d4;\\u6268p\\u0100;p\\u26c3\\u26c4\\u6a89rox\\xbb\\u26c4\\u0100;q\\u26ce\\u26cf\\u6a87\\u0100;q\\u26ce\\u26bbim;\\u62e6\\u0400abnoptwz\\u26e9\\u26f4\\u26f7\\u271a\\u272f\\u2741\\u2747\\u2750\\u0100nr\\u26ee\\u26f1g;\\u67ecr;\\u61fdr\\xeb\\u08c1g\\u0180lmr\\u26ff\\u270d\\u2714eft\\u0100ar\\u09e6\\u2707ight\\xe1\\u09f2apsto;\\u67fcight\\xe1\\u09fdparrow\\u0100lr\\u2725\\u2729ef\\xf4\\u24edight;\\u61ac\\u0180afl\\u2736\\u2739\\u273dr;\\u6985;\\uc000\\ud835\\udd5dus;\\u6a2dimes;\\u6a34\\u0161\\u274b\\u274fst;\\u6217\\xe1\\u134e\\u0180;ef\\u2757\\u2758\\u1800\\u65cange\\xbb\\u2758ar\\u0100;l\\u2764\\u2765\\u4028t;\\u6993\\u0280achmt\\u2773\\u2776\\u277c\\u2785\\u2787r\\xf2\\u08a8orne\\xf2\\u1d8car\\u0100;d\\u0f98\\u2783;\\u696d;\\u600eri;\\u62bf\\u0300achiqt\\u2798\\u279d\\u0a40\\u27a2\\u27ae\\u27bbquo;\\u6039r;\\uc000\\ud835\\udcc1m\\u0180;eg\\u09b2\\u27aa\\u27ac;\\u6a8d;\\u6a8f\\u0100bu\\u252a\\u27b3o\\u0100;r\\u0e1f\\u27b9;\\u601arok;\\u4142\\u8400<;cdhilqr\\u082b\\u27d2\\u2639\\u27dc\\u27e0\\u27e5\\u27ea\\u27f0\\u0100ci\\u27d7\\u27d9;\\u6aa6r;\\u6a79re\\xe5\\u25f2mes;\\u62c9arr;\\u6976uest;\\u6a7b\\u0100Pi\\u27f5\\u27f9ar;\\u6996\\u0180;ef\\u2800\\u092d\\u181b\\u65c3r\\u0100du\\u2807\\u280dshar;\\u694ahar;\\u6966\\u0100en\\u2817\\u2821rtneqq;\\uc000\\u2268\\ufe00\\xc5\\u281e\\u0700Dacdefhilnopsu\\u2840\\u2845\\u2882\\u288e\\u2893\\u28a0\\u28a5\\u28a8\\u28da\\u28e2\\u28e4\\u0a83\\u28f3\\u2902Dot;\\u623a\\u0200clpr\\u284e\\u2852\\u2863\\u287dr\\u803b\\xaf\\u40af\\u0100et\\u2857\\u2859;\\u6642\\u0100;e\\u285e\\u285f\\u6720se\\xbb\\u285f\\u0100;s\\u103b\\u2868to\\u0200;dlu\\u103b\\u2873\\u2877\\u287bow\\xee\\u048cef\\xf4\\u090f\\xf0\\u13d1ker;\\u65ae\\u0100oy\\u2887\\u288cmma;\\u6a29;\\u443cash;\\u6014asuredangle\\xbb\\u1626r;\\uc000\\ud835\\udd2ao;\\u6127\\u0180cdn\\u28af\\u28b4\\u28c9ro\\u803b\\xb5\\u40b5\\u0200;acd\\u1464\\u28bd\\u28c0\\u28c4s\\xf4\\u16a7ir;\\u6af0ot\\u80bb\\xb7\\u01b5us\\u0180;bd\\u28d2\\u1903\\u28d3\\u6212\\u0100;u\\u1d3c\\u28d8;\\u6a2a\\u0163\\u28de\\u28e1p;\\u6adb\\xf2\\u2212\\xf0\\u0a81\\u0100dp\\u28e9\\u28eeels;\\u62a7f;\\uc000\\ud835\\udd5e\\u0100ct\\u28f8\\u28fdr;\\uc000\\ud835\\udcc2pos\\xbb\\u159d\\u0180;lm\\u2909\\u290a\\u290d\\u43bctimap;\\u62b8\\u0c00GLRVabcdefghijlmoprstuvw\\u2942\\u2953\\u297e\\u2989\\u2998\\u29da\\u29e9\\u2a15\\u2a1a\\u2a58\\u2a5d\\u2a83\\u2a95\\u2aa4\\u2aa8\\u2b04\\u2b07\\u2b44\\u2b7f\\u2bae\\u2c34\\u2c67\\u2c7c\\u2ce9\\u0100gt\\u2947\\u294b;\\uc000\\u22d9\\u0338\\u0100;v\\u2950\\u0bcf\\uc000\\u226b\\u20d2\\u0180elt\\u295a\\u2972\\u2976ft\\u0100ar\\u2961\\u2967rrow;\\u61cdightarrow;\\u61ce;\\uc000\\u22d8\\u0338\\u0100;v\\u297b\\u0c47\\uc000\\u226a\\u20d2ightarrow;\\u61cf\\u0100Dd\\u298e\\u2993ash;\\u62afash;\\u62ae\\u0280bcnpt\\u29a3\\u29a7\\u29ac\\u29b1\\u29ccla\\xbb\\u02deute;\\u4144g;\\uc000\\u2220\\u20d2\\u0280;Eiop\\u0d84\\u29bc\\u29c0\\u29c5\\u29c8;\\uc000\\u2a70\\u0338d;\\uc000\\u224b\\u0338s;\\u4149ro\\xf8\\u0d84ur\\u0100;a\\u29d3\\u29d4\\u666el\\u0100;s\\u29d3\\u0b38\\u01f3\\u29df\\0\\u29e3p\\u80bb\\xa0\\u0b37mp\\u0100;e\\u0bf9\\u0c00\\u0280aeouy\\u29f4\\u29fe\\u2a03\\u2a10\\u2a13\\u01f0\\u29f9\\0\\u29fb;\\u6a43on;\\u4148dil;\\u4146ng\\u0100;d\\u0d7e\\u2a0aot;\\uc000\\u2a6d\\u0338p;\\u6a42;\\u443dash;\\u6013\\u0380;Aadqsx\\u0b92\\u2a29\\u2a2d\\u2a3b\\u2a41\\u2a45\\u2a50rr;\\u61d7r\\u0100hr\\u2a33\\u2a36k;\\u6924\\u0100;o\\u13f2\\u13f0ot;\\uc000\\u2250\\u0338ui\\xf6\\u0b63\\u0100ei\\u2a4a\\u2a4ear;\\u6928\\xed\\u0b98ist\\u0100;s\\u0ba0\\u0b9fr;\\uc000\\ud835\\udd2b\\u0200Eest\\u0bc5\\u2a66\\u2a79\\u2a7c\\u0180;qs\\u0bbc\\u2a6d\\u0be1\\u0180;qs\\u0bbc\\u0bc5\\u2a74lan\\xf4\\u0be2i\\xed\\u0bea\\u0100;r\\u0bb6\\u2a81\\xbb\\u0bb7\\u0180Aap\\u2a8a\\u2a8d\\u2a91r\\xf2\\u2971rr;\\u61aear;\\u6af2\\u0180;sv\\u0f8d\\u2a9c\\u0f8c\\u0100;d\\u2aa1\\u2aa2\\u62fc;\\u62facy;\\u445a\\u0380AEadest\\u2ab7\\u2aba\\u2abe\\u2ac2\\u2ac5\\u2af6\\u2af9r\\xf2\\u2966;\\uc000\\u2266\\u0338rr;\\u619ar;\\u6025\\u0200;fqs\\u0c3b\\u2ace\\u2ae3\\u2aeft\\u0100ar\\u2ad4\\u2ad9rro\\xf7\\u2ac1ightarro\\xf7\\u2a90\\u0180;qs\\u0c3b\\u2aba\\u2aealan\\xf4\\u0c55\\u0100;s\\u0c55\\u2af4\\xbb\\u0c36i\\xed\\u0c5d\\u0100;r\\u0c35\\u2afei\\u0100;e\\u0c1a\\u0c25i\\xe4\\u0d90\\u0100pt\\u2b0c\\u2b11f;\\uc000\\ud835\\udd5f\\u8180\\xac;in\\u2b19\\u2b1a\\u2b36\\u40acn\\u0200;Edv\\u0b89\\u2b24\\u2b28\\u2b2e;\\uc000\\u22f9\\u0338ot;\\uc000\\u22f5\\u0338\\u01e1\\u0b89\\u2b33\\u2b35;\\u62f7;\\u62f6i\\u0100;v\\u0cb8\\u2b3c\\u01e1\\u0cb8\\u2b41\\u2b43;\\u62fe;\\u62fd\\u0180aor\\u2b4b\\u2b63\\u2b69r\\u0200;ast\\u0b7b\\u2b55\\u2b5a\\u2b5flle\\xec\\u0b7bl;\\uc000\\u2afd\\u20e5;\\uc000\\u2202\\u0338lint;\\u6a14\\u0180;ce\\u0c92\\u2b70\\u2b73u\\xe5\\u0ca5\\u0100;c\\u0c98\\u2b78\\u0100;e\\u0c92\\u2b7d\\xf1\\u0c98\\u0200Aait\\u2b88\\u2b8b\\u2b9d\\u2ba7r\\xf2\\u2988rr\\u0180;cw\\u2b94\\u2b95\\u2b99\\u619b;\\uc000\\u2933\\u0338;\\uc000\\u219d\\u0338ghtarrow\\xbb\\u2b95ri\\u0100;e\\u0ccb\\u0cd6\\u0380chimpqu\\u2bbd\\u2bcd\\u2bd9\\u2b04\\u0b78\\u2be4\\u2bef\\u0200;cer\\u0d32\\u2bc6\\u0d37\\u2bc9u\\xe5\\u0d45;\\uc000\\ud835\\udcc3ort\\u026d\\u2b05\\0\\0\\u2bd6ar\\xe1\\u2b56m\\u0100;e\\u0d6e\\u2bdf\\u0100;q\\u0d74\\u0d73su\\u0100bp\\u2beb\\u2bed\\xe5\\u0cf8\\xe5\\u0d0b\\u0180bcp\\u2bf6\\u2c11\\u2c19\\u0200;Ees\\u2bff\\u2c00\\u0d22\\u2c04\\u6284;\\uc000\\u2ac5\\u0338et\\u0100;e\\u0d1b\\u2c0bq\\u0100;q\\u0d23\\u2c00c\\u0100;e\\u0d32\\u2c17\\xf1\\u0d38\\u0200;Ees\\u2c22\\u2c23\\u0d5f\\u2c27\\u6285;\\uc000\\u2ac6\\u0338et\\u0100;e\\u0d58\\u2c2eq\\u0100;q\\u0d60\\u2c23\\u0200gilr\\u2c3d\\u2c3f\\u2c45\\u2c47\\xec\\u0bd7lde\\u803b\\xf1\\u40f1\\xe7\\u0c43iangle\\u0100lr\\u2c52\\u2c5ceft\\u0100;e\\u0c1a\\u2c5a\\xf1\\u0c26ight\\u0100;e\\u0ccb\\u2c65\\xf1\\u0cd7\\u0100;m\\u2c6c\\u2c6d\\u43bd\\u0180;es\\u2c74\\u2c75\\u2c79\\u4023ro;\\u6116p;\\u6007\\u0480DHadgilrs\\u2c8f\\u2c94\\u2c99\\u2c9e\\u2ca3\\u2cb0\\u2cb6\\u2cd3\\u2ce3ash;\\u62adarr;\\u6904p;\\uc000\\u224d\\u20d2ash;\\u62ac\\u0100et\\u2ca8\\u2cac;\\uc000\\u2265\\u20d2;\\uc000>\\u20d2nfin;\\u69de\\u0180Aet\\u2cbd\\u2cc1\\u2cc5rr;\\u6902;\\uc000\\u2264\\u20d2\\u0100;r\\u2cca\\u2ccd\\uc000<\\u20d2ie;\\uc000\\u22b4\\u20d2\\u0100At\\u2cd8\\u2cdcrr;\\u6903rie;\\uc000\\u22b5\\u20d2im;\\uc000\\u223c\\u20d2\\u0180Aan\\u2cf0\\u2cf4\\u2d02rr;\\u61d6r\\u0100hr\\u2cfa\\u2cfdk;\\u6923\\u0100;o\\u13e7\\u13e5ear;\\u6927\\u1253\\u1a95\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\u2d2d\\0\\u2d38\\u2d48\\u2d60\\u2d65\\u2d72\\u2d84\\u1b07\\0\\0\\u2d8d\\u2dab\\0\\u2dc8\\u2dce\\0\\u2ddc\\u2e19\\u2e2b\\u2e3e\\u2e43\\u0100cs\\u2d31\\u1a97ute\\u803b\\xf3\\u40f3\\u0100iy\\u2d3c\\u2d45r\\u0100;c\\u1a9e\\u2d42\\u803b\\xf4\\u40f4;\\u443e\\u0280abios\\u1aa0\\u2d52\\u2d57\\u01c8\\u2d5alac;\\u4151v;\\u6a38old;\\u69bclig;\\u4153\\u0100cr\\u2d69\\u2d6dir;\\u69bf;\\uc000\\ud835\\udd2c\\u036f\\u2d79\\0\\0\\u2d7c\\0\\u2d82n;\\u42dbave\\u803b\\xf2\\u40f2;\\u69c1\\u0100bm\\u2d88\\u0df4ar;\\u69b5\\u0200acit\\u2d95\\u2d98\\u2da5\\u2da8r\\xf2\\u1a80\\u0100ir\\u2d9d\\u2da0r;\\u69beoss;\\u69bbn\\xe5\\u0e52;\\u69c0\\u0180aei\\u2db1\\u2db5\\u2db9cr;\\u414dga;\\u43c9\\u0180cdn\\u2dc0\\u2dc5\\u01cdron;\\u43bf;\\u69b6pf;\\uc000\\ud835\\udd60\\u0180ael\\u2dd4\\u2dd7\\u01d2r;\\u69b7rp;\\u69b9\\u0380;adiosv\\u2dea\\u2deb\\u2dee\\u2e08\\u2e0d\\u2e10\\u2e16\\u6228r\\xf2\\u1a86\\u0200;efm\\u2df7\\u2df8\\u2e02\\u2e05\\u6a5dr\\u0100;o\\u2dfe\\u2dff\\u6134f\\xbb\\u2dff\\u803b\\xaa\\u40aa\\u803b\\xba\\u40bagof;\\u62b6r;\\u6a56lope;\\u6a57;\\u6a5b\\u0180clo\\u2e1f\\u2e21\\u2e27\\xf2\\u2e01ash\\u803b\\xf8\\u40f8l;\\u6298i\\u016c\\u2e2f\\u2e34de\\u803b\\xf5\\u40f5es\\u0100;a\\u01db\\u2e3as;\\u6a36ml\\u803b\\xf6\\u40f6bar;\\u633d\\u0ae1\\u2e5e\\0\\u2e7d\\0\\u2e80\\u2e9d\\0\\u2ea2\\u2eb9\\0\\0\\u2ecb\\u0e9c\\0\\u2f13\\0\\0\\u2f2b\\u2fbc\\0\\u2fc8r\\u0200;ast\\u0403\\u2e67\\u2e72\\u0e85\\u8100\\xb6;l\\u2e6d\\u2e6e\\u40b6le\\xec\\u0403\\u0269\\u2e78\\0\\0\\u2e7bm;\\u6af3;\\u6afdy;\\u443fr\\u0280cimpt\\u2e8b\\u2e8f\\u2e93\\u1865\\u2e97nt;\\u4025od;\\u402eil;\\u6030enk;\\u6031r;\\uc000\\ud835\\udd2d\\u0180imo\\u2ea8\\u2eb0\\u2eb4\\u0100;v\\u2ead\\u2eae\\u43c6;\\u43d5ma\\xf4\\u0a76ne;\\u660e\\u0180;tv\\u2ebf\\u2ec0\\u2ec8\\u43c0chfork\\xbb\\u1ffd;\\u43d6\\u0100au\\u2ecf\\u2edfn\\u0100ck\\u2ed5\\u2eddk\\u0100;h\\u21f4\\u2edb;\\u610e\\xf6\\u21f4s\\u0480;abcdemst\\u2ef3\\u2ef4\\u1908\\u2ef9\\u2efd\\u2f04\\u2f06\\u2f0a\\u2f0e\\u402bcir;\\u6a23ir;\\u6a22\\u0100ou\\u1d40\\u2f02;\\u6a25;\\u6a72n\\u80bb\\xb1\\u0e9dim;\\u6a26wo;\\u6a27\\u0180ipu\\u2f19\\u2f20\\u2f25ntint;\\u6a15f;\\uc000\\ud835\\udd61nd\\u803b\\xa3\\u40a3\\u0500;Eaceinosu\\u0ec8\\u2f3f\\u2f41\\u2f44\\u2f47\\u2f81\\u2f89\\u2f92\\u2f7e\\u2fb6;\\u6ab3p;\\u6ab7u\\xe5\\u0ed9\\u0100;c\\u0ece\\u2f4c\\u0300;acens\\u0ec8\\u2f59\\u2f5f\\u2f66\\u2f68\\u2f7eppro\\xf8\\u2f43urlye\\xf1\\u0ed9\\xf1\\u0ece\\u0180aes\\u2f6f\\u2f76\\u2f7approx;\\u6ab9qq;\\u6ab5im;\\u62e8i\\xed\\u0edfme\\u0100;s\\u2f88\\u0eae\\u6032\\u0180Eas\\u2f78\\u2f90\\u2f7a\\xf0\\u2f75\\u0180dfp\\u0eec\\u2f99\\u2faf\\u0180als\\u2fa0\\u2fa5\\u2faalar;\\u632eine;\\u6312urf;\\u6313\\u0100;t\\u0efb\\u2fb4\\xef\\u0efbrel;\\u62b0\\u0100ci\\u2fc0\\u2fc5r;\\uc000\\ud835\\udcc5;\\u43c8ncsp;\\u6008\\u0300fiopsu\\u2fda\\u22e2\\u2fdf\\u2fe5\\u2feb\\u2ff1r;\\uc000\\ud835\\udd2epf;\\uc000\\ud835\\udd62rime;\\u6057cr;\\uc000\\ud835\\udcc6\\u0180aeo\\u2ff8\\u3009\\u3013t\\u0100ei\\u2ffe\\u3005rnion\\xf3\\u06b0nt;\\u6a16st\\u0100;e\\u3010\\u3011\\u403f\\xf1\\u1f19\\xf4\\u0f14\\u0a80ABHabcdefhilmnoprstux\\u3040\\u3051\\u3055\\u3059\\u30e0\\u310e\\u312b\\u3147\\u3162\\u3172\\u318e\\u3206\\u3215\\u3224\\u3229\\u3258\\u326e\\u3272\\u3290\\u32b0\\u32b7\\u0180art\\u3047\\u304a\\u304cr\\xf2\\u10b3\\xf2\\u03ddail;\\u691car\\xf2\\u1c65ar;\\u6964\\u0380cdenqrt\\u3068\\u3075\\u3078\\u307f\\u308f\\u3094\\u30cc\\u0100eu\\u306d\\u3071;\\uc000\\u223d\\u0331te;\\u4155i\\xe3\\u116emptyv;\\u69b3g\\u0200;del\\u0fd1\\u3089\\u308b\\u308d;\\u6992;\\u69a5\\xe5\\u0fd1uo\\u803b\\xbb\\u40bbr\\u0580;abcfhlpstw\\u0fdc\\u30ac\\u30af\\u30b7\\u30b9\\u30bc\\u30be\\u30c0\\u30c3\\u30c7\\u30cap;\\u6975\\u0100;f\\u0fe0\\u30b4s;\\u6920;\\u6933s;\\u691e\\xeb\\u225d\\xf0\\u272el;\\u6945im;\\u6974l;\\u61a3;\\u619d\\u0100ai\\u30d1\\u30d5il;\\u691ao\\u0100;n\\u30db\\u30dc\\u6236al\\xf3\\u0f1e\\u0180abr\\u30e7\\u30ea\\u30eer\\xf2\\u17e5rk;\\u6773\\u0100ak\\u30f3\\u30fdc\\u0100ek\\u30f9\\u30fb;\\u407d;\\u405d\\u0100es\\u3102\\u3104;\\u698cl\\u0100du\\u310a\\u310c;\\u698e;\\u6990\\u0200aeuy\\u3117\\u311c\\u3127\\u3129ron;\\u4159\\u0100di\\u3121\\u3125il;\\u4157\\xec\\u0ff2\\xe2\\u30fa;\\u4440\\u0200clqs\\u3134\\u3137\\u313d\\u3144a;\\u6937dhar;\\u6969uo\\u0100;r\\u020e\\u020dh;\\u61b3\\u0180acg\\u314e\\u315f\\u0f44l\\u0200;ips\\u0f78\\u3158\\u315b\\u109cn\\xe5\\u10bbar\\xf4\\u0fa9t;\\u65ad\\u0180ilr\\u3169\\u1023\\u316esht;\\u697d;\\uc000\\ud835\\udd2f\\u0100ao\\u3177\\u3186r\\u0100du\\u317d\\u317f\\xbb\\u047b\\u0100;l\\u1091\\u3184;\\u696c\\u0100;v\\u318b\\u318c\\u43c1;\\u43f1\\u0180gns\\u3195\\u31f9\\u31fcht\\u0300ahlrst\\u31a4\\u31b0\\u31c2\\u31d8\\u31e4\\u31eerrow\\u0100;t\\u0fdc\\u31ada\\xe9\\u30c8arpoon\\u0100du\\u31bb\\u31bfow\\xee\\u317ep\\xbb\\u1092eft\\u0100ah\\u31ca\\u31d0rrow\\xf3\\u0feaarpoon\\xf3\\u0551ightarrows;\\u61c9quigarro\\xf7\\u30cbhreetimes;\\u62ccg;\\u42daingdotse\\xf1\\u1f32\\u0180ahm\\u320d\\u3210\\u3213r\\xf2\\u0feaa\\xf2\\u0551;\\u600foust\\u0100;a\\u321e\\u321f\\u63b1che\\xbb\\u321fmid;\\u6aee\\u0200abpt\\u3232\\u323d\\u3240\\u3252\\u0100nr\\u3237\\u323ag;\\u67edr;\\u61fer\\xeb\\u1003\\u0180afl\\u3247\\u324a\\u324er;\\u6986;\\uc000\\ud835\\udd63us;\\u6a2eimes;\\u6a35\\u0100ap\\u325d\\u3267r\\u0100;g\\u3263\\u3264\\u4029t;\\u6994olint;\\u6a12ar\\xf2\\u31e3\\u0200achq\\u327b\\u3280\\u10bc\\u3285quo;\\u603ar;\\uc000\\ud835\\udcc7\\u0100bu\\u30fb\\u328ao\\u0100;r\\u0214\\u0213\\u0180hir\\u3297\\u329b\\u32a0re\\xe5\\u31f8mes;\\u62cai\\u0200;efl\\u32aa\\u1059\\u1821\\u32ab\\u65b9tri;\\u69celuhar;\\u6968;\\u611e\\u0d61\\u32d5\\u32db\\u32df\\u332c\\u3338\\u3371\\0\\u337a\\u33a4\\0\\0\\u33ec\\u33f0\\0\\u3428\\u3448\\u345a\\u34ad\\u34b1\\u34ca\\u34f1\\0\\u3616\\0\\0\\u3633cute;\\u415bqu\\xef\\u27ba\\u0500;Eaceinpsy\\u11ed\\u32f3\\u32f5\\u32ff\\u3302\\u330b\\u330f\\u331f\\u3326\\u3329;\\u6ab4\\u01f0\\u32fa\\0\\u32fc;\\u6ab8on;\\u4161u\\xe5\\u11fe\\u0100;d\\u11f3\\u3307il;\\u415frc;\\u415d\\u0180Eas\\u3316\\u3318\\u331b;\\u6ab6p;\\u6abaim;\\u62e9olint;\\u6a13i\\xed\\u1204;\\u4441ot\\u0180;be\\u3334\\u1d47\\u3335\\u62c5;\\u6a66\\u0380Aacmstx\\u3346\\u334a\\u3357\\u335b\\u335e\\u3363\\u336drr;\\u61d8r\\u0100hr\\u3350\\u3352\\xeb\\u2228\\u0100;o\\u0a36\\u0a34t\\u803b\\xa7\\u40a7i;\\u403bwar;\\u6929m\\u0100in\\u3369\\xf0nu\\xf3\\xf1t;\\u6736r\\u0100;o\\u3376\\u2055\\uc000\\ud835\\udd30\\u0200acoy\\u3382\\u3386\\u3391\\u33a0rp;\\u666f\\u0100hy\\u338b\\u338fcy;\\u4449;\\u4448rt\\u026d\\u3399\\0\\0\\u339ci\\xe4\\u1464ara\\xec\\u2e6f\\u803b\\xad\\u40ad\\u0100gm\\u33a8\\u33b4ma\\u0180;fv\\u33b1\\u33b2\\u33b2\\u43c3;\\u43c2\\u0400;deglnpr\\u12ab\\u33c5\\u33c9\\u33ce\\u33d6\\u33de\\u33e1\\u33e6ot;\\u6a6a\\u0100;q\\u12b1\\u12b0\\u0100;E\\u33d3\\u33d4\\u6a9e;\\u6aa0\\u0100;E\\u33db\\u33dc\\u6a9d;\\u6a9fe;\\u6246lus;\\u6a24arr;\\u6972ar\\xf2\\u113d\\u0200aeit\\u33f8\\u3408\\u340f\\u3417\\u0100ls\\u33fd\\u3404lsetm\\xe9\\u336ahp;\\u6a33parsl;\\u69e4\\u0100dl\\u1463\\u3414e;\\u6323\\u0100;e\\u341c\\u341d\\u6aaa\\u0100;s\\u3422\\u3423\\u6aac;\\uc000\\u2aac\\ufe00\\u0180flp\\u342e\\u3433\\u3442tcy;\\u444c\\u0100;b\\u3438\\u3439\\u402f\\u0100;a\\u343e\\u343f\\u69c4r;\\u633ff;\\uc000\\ud835\\udd64a\\u0100dr\\u344d\\u0402es\\u0100;u\\u3454\\u3455\\u6660it\\xbb\\u3455\\u0180csu\\u3460\\u3479\\u349f\\u0100au\\u3465\\u346fp\\u0100;s\\u1188\\u346b;\\uc000\\u2293\\ufe00p\\u0100;s\\u11b4\\u3475;\\uc000\\u2294\\ufe00u\\u0100bp\\u347f\\u348f\\u0180;es\\u1197\\u119c\\u3486et\\u0100;e\\u1197\\u348d\\xf1\\u119d\\u0180;es\\u11a8\\u11ad\\u3496et\\u0100;e\\u11a8\\u349d\\xf1\\u11ae\\u0180;af\\u117b\\u34a6\\u05b0r\\u0165\\u34ab\\u05b1\\xbb\\u117car\\xf2\\u1148\\u0200cemt\\u34b9\\u34be\\u34c2\\u34c5r;\\uc000\\ud835\\udcc8tm\\xee\\xf1i\\xec\\u3415ar\\xe6\\u11be\\u0100ar\\u34ce\\u34d5r\\u0100;f\\u34d4\\u17bf\\u6606\\u0100an\\u34da\\u34edight\\u0100ep\\u34e3\\u34eapsilo\\xee\\u1ee0h\\xe9\\u2eafs\\xbb\\u2852\\u0280bcmnp\\u34fb\\u355e\\u1209\\u358b\\u358e\\u0480;Edemnprs\\u350e\\u350f\\u3511\\u3515\\u351e\\u3523\\u352c\\u3531\\u3536\\u6282;\\u6ac5ot;\\u6abd\\u0100;d\\u11da\\u351aot;\\u6ac3ult;\\u6ac1\\u0100Ee\\u3528\\u352a;\\u6acb;\\u628alus;\\u6abfarr;\\u6979\\u0180eiu\\u353d\\u3552\\u3555t\\u0180;en\\u350e\\u3545\\u354bq\\u0100;q\\u11da\\u350feq\\u0100;q\\u352b\\u3528m;\\u6ac7\\u0100bp\\u355a\\u355c;\\u6ad5;\\u6ad3c\\u0300;acens\\u11ed\\u356c\\u3572\\u3579\\u357b\\u3326ppro\\xf8\\u32faurlye\\xf1\\u11fe\\xf1\\u11f3\\u0180aes\\u3582\\u3588\\u331bppro\\xf8\\u331aq\\xf1\\u3317g;\\u666a\\u0680123;Edehlmnps\\u35a9\\u35ac\\u35af\\u121c\\u35b2\\u35b4\\u35c0\\u35c9\\u35d5\\u35da\\u35df\\u35e8\\u35ed\\u803b\\xb9\\u40b9\\u803b\\xb2\\u40b2\\u803b\\xb3\\u40b3;\\u6ac6\\u0100os\\u35b9\\u35bct;\\u6abeub;\\u6ad8\\u0100;d\\u1222\\u35c5ot;\\u6ac4s\\u0100ou\\u35cf\\u35d2l;\\u67c9b;\\u6ad7arr;\\u697bult;\\u6ac2\\u0100Ee\\u35e4\\u35e6;\\u6acc;\\u628blus;\\u6ac0\\u0180eiu\\u35f4\\u3609\\u360ct\\u0180;en\\u121c\\u35fc\\u3602q\\u0100;q\\u1222\\u35b2eq\\u0100;q\\u35e7\\u35e4m;\\u6ac8\\u0100bp\\u3611\\u3613;\\u6ad4;\\u6ad6\\u0180Aan\\u361c\\u3620\\u362drr;\\u61d9r\\u0100hr\\u3626\\u3628\\xeb\\u222e\\u0100;o\\u0a2b\\u0a29war;\\u692alig\\u803b\\xdf\\u40df\\u0be1\\u3651\\u365d\\u3660\\u12ce\\u3673\\u3679\\0\\u367e\\u36c2\\0\\0\\0\\0\\0\\u36db\\u3703\\0\\u3709\\u376c\\0\\0\\0\\u3787\\u0272\\u3656\\0\\0\\u365bget;\\u6316;\\u43c4r\\xeb\\u0e5f\\u0180aey\\u3666\\u366b\\u3670ron;\\u4165dil;\\u4163;\\u4442lrec;\\u6315r;\\uc000\\ud835\\udd31\\u0200eiko\\u3686\\u369d\\u36b5\\u36bc\\u01f2\\u368b\\0\\u3691e\\u01004f\\u1284\\u1281a\\u0180;sv\\u3698\\u3699\\u369b\\u43b8ym;\\u43d1\\u0100cn\\u36a2\\u36b2k\\u0100as\\u36a8\\u36aeppro\\xf8\\u12c1im\\xbb\\u12acs\\xf0\\u129e\\u0100as\\u36ba\\u36ae\\xf0\\u12c1rn\\u803b\\xfe\\u40fe\\u01ec\\u031f\\u36c6\\u22e7es\\u8180\\xd7;bd\\u36cf\\u36d0\\u36d8\\u40d7\\u0100;a\\u190f\\u36d5r;\\u6a31;\\u6a30\\u0180eps\\u36e1\\u36e3\\u3700\\xe1\\u2a4d\\u0200;bcf\\u0486\\u36ec\\u36f0\\u36f4ot;\\u6336ir;\\u6af1\\u0100;o\\u36f9\\u36fc\\uc000\\ud835\\udd65rk;\\u6ada\\xe1\\u3362rime;\\u6034\\u0180aip\\u370f\\u3712\\u3764d\\xe5\\u1248\\u0380adempst\\u3721\\u374d\\u3740\\u3751\\u3757\\u375c\\u375fngle\\u0280;dlqr\\u3730\\u3731\\u3736\\u3740\\u3742\\u65b5own\\xbb\\u1dbbeft\\u0100;e\\u2800\\u373e\\xf1\\u092e;\\u625cight\\u0100;e\\u32aa\\u374b\\xf1\\u105aot;\\u65ecinus;\\u6a3alus;\\u6a39b;\\u69cdime;\\u6a3bezium;\\u63e2\\u0180cht\\u3772\\u377d\\u3781\\u0100ry\\u3777\\u377b;\\uc000\\ud835\\udcc9;\\u4446cy;\\u445brok;\\u4167\\u0100io\\u378b\\u378ex\\xf4\\u1777head\\u0100lr\\u3797\\u37a0eftarro\\xf7\\u084fightarrow\\xbb\\u0f5d\\u0900AHabcdfghlmoprstuw\\u37d0\\u37d3\\u37d7\\u37e4\\u37f0\\u37fc\\u380e\\u381c\\u3823\\u3834\\u3851\\u385d\\u386b\\u38a9\\u38cc\\u38d2\\u38ea\\u38f6r\\xf2\\u03edar;\\u6963\\u0100cr\\u37dc\\u37e2ute\\u803b\\xfa\\u40fa\\xf2\\u1150r\\u01e3\\u37ea\\0\\u37edy;\\u445eve;\\u416d\\u0100iy\\u37f5\\u37farc\\u803b\\xfb\\u40fb;\\u4443\\u0180abh\\u3803\\u3806\\u380br\\xf2\\u13adlac;\\u4171a\\xf2\\u13c3\\u0100ir\\u3813\\u3818sht;\\u697e;\\uc000\\ud835\\udd32rave\\u803b\\xf9\\u40f9\\u0161\\u3827\\u3831r\\u0100lr\\u382c\\u382e\\xbb\\u0957\\xbb\\u1083lk;\\u6580\\u0100ct\\u3839\\u384d\\u026f\\u383f\\0\\0\\u384arn\\u0100;e\\u3845\\u3846\\u631cr\\xbb\\u3846op;\\u630fri;\\u65f8\\u0100al\\u3856\\u385acr;\\u416b\\u80bb\\xa8\\u0349\\u0100gp\\u3862\\u3866on;\\u4173f;\\uc000\\ud835\\udd66\\u0300adhlsu\\u114b\\u3878\\u387d\\u1372\\u3891\\u38a0own\\xe1\\u13b3arpoon\\u0100lr\\u3888\\u388cef\\xf4\\u382digh\\xf4\\u382fi\\u0180;hl\\u3899\\u389a\\u389c\\u43c5\\xbb\\u13faon\\xbb\\u389aparrows;\\u61c8\\u0180cit\\u38b0\\u38c4\\u38c8\\u026f\\u38b6\\0\\0\\u38c1rn\\u0100;e\\u38bc\\u38bd\\u631dr\\xbb\\u38bdop;\\u630eng;\\u416fri;\\u65f9cr;\\uc000\\ud835\\udcca\\u0180dir\\u38d9\\u38dd\\u38e2ot;\\u62f0lde;\\u4169i\\u0100;f\\u3730\\u38e8\\xbb\\u1813\\u0100am\\u38ef\\u38f2r\\xf2\\u38a8l\\u803b\\xfc\\u40fcangle;\\u69a7\\u0780ABDacdeflnoprsz\\u391c\\u391f\\u3929\\u392d\\u39b5\\u39b8\\u39bd\\u39df\\u39e4\\u39e8\\u39f3\\u39f9\\u39fd\\u3a01\\u3a20r\\xf2\\u03f7ar\\u0100;v\\u3926\\u3927\\u6ae8;\\u6ae9as\\xe8\\u03e1\\u0100nr\\u3932\\u3937grt;\\u699c\\u0380eknprst\\u34e3\\u3946\\u394b\\u3952\\u395d\\u3964\\u3996app\\xe1\\u2415othin\\xe7\\u1e96\\u0180hir\\u34eb\\u2ec8\\u3959op\\xf4\\u2fb5\\u0100;h\\u13b7\\u3962\\xef\\u318d\\u0100iu\\u3969\\u396dgm\\xe1\\u33b3\\u0100bp\\u3972\\u3984setneq\\u0100;q\\u397d\\u3980\\uc000\\u228a\\ufe00;\\uc000\\u2acb\\ufe00setneq\\u0100;q\\u398f\\u3992\\uc000\\u228b\\ufe00;\\uc000\\u2acc\\ufe00\\u0100hr\\u399b\\u399fet\\xe1\\u369ciangle\\u0100lr\\u39aa\\u39afeft\\xbb\\u0925ight\\xbb\\u1051y;\\u4432ash\\xbb\\u1036\\u0180elr\\u39c4\\u39d2\\u39d7\\u0180;be\\u2dea\\u39cb\\u39cfar;\\u62bbq;\\u625alip;\\u62ee\\u0100bt\\u39dc\\u1468a\\xf2\\u1469r;\\uc000\\ud835\\udd33tr\\xe9\\u39aesu\\u0100bp\\u39ef\\u39f1\\xbb\\u0d1c\\xbb\\u0d59pf;\\uc000\\ud835\\udd67ro\\xf0\\u0efbtr\\xe9\\u39b4\\u0100cu\\u3a06\\u3a0br;\\uc000\\ud835\\udccb\\u0100bp\\u3a10\\u3a18n\\u0100Ee\\u3980\\u3a16\\xbb\\u397en\\u0100Ee\\u3992\\u3a1e\\xbb\\u3990igzag;\\u699a\\u0380cefoprs\\u3a36\\u3a3b\\u3a56\\u3a5b\\u3a54\\u3a61\\u3a6airc;\\u4175\\u0100di\\u3a40\\u3a51\\u0100bg\\u3a45\\u3a49ar;\\u6a5fe\\u0100;q\\u15fa\\u3a4f;\\u6259erp;\\u6118r;\\uc000\\ud835\\udd34pf;\\uc000\\ud835\\udd68\\u0100;e\\u1479\\u3a66at\\xe8\\u1479cr;\\uc000\\ud835\\udccc\\u0ae3\\u178e\\u3a87\\0\\u3a8b\\0\\u3a90\\u3a9b\\0\\0\\u3a9d\\u3aa8\\u3aab\\u3aaf\\0\\0\\u3ac3\\u3ace\\0\\u3ad8\\u17dc\\u17dftr\\xe9\\u17d1r;\\uc000\\ud835\\udd35\\u0100Aa\\u3a94\\u3a97r\\xf2\\u03c3r\\xf2\\u09f6;\\u43be\\u0100Aa\\u3aa1\\u3aa4r\\xf2\\u03b8r\\xf2\\u09eba\\xf0\\u2713is;\\u62fb\\u0180dpt\\u17a4\\u3ab5\\u3abe\\u0100fl\\u3aba\\u17a9;\\uc000\\ud835\\udd69im\\xe5\\u17b2\\u0100Aa\\u3ac7\\u3acar\\xf2\\u03cer\\xf2\\u0a01\\u0100cq\\u3ad2\\u17b8r;\\uc000\\ud835\\udccd\\u0100pt\\u17d6\\u3adcr\\xe9\\u17d4\\u0400acefiosu\\u3af0\\u3afd\\u3b08\\u3b0c\\u3b11\\u3b15\\u3b1b\\u3b21c\\u0100uy\\u3af6\\u3afbte\\u803b\\xfd\\u40fd;\\u444f\\u0100iy\\u3b02\\u3b06rc;\\u4177;\\u444bn\\u803b\\xa5\\u40a5r;\\uc000\\ud835\\udd36cy;\\u4457pf;\\uc000\\ud835\\udd6acr;\\uc000\\ud835\\udcce\\u0100cm\\u3b26\\u3b29y;\\u444el\\u803b\\xff\\u40ff\\u0500acdefhiosw\\u3b42\\u3b48\\u3b54\\u3b58\\u3b64\\u3b69\\u3b6d\\u3b74\\u3b7a\\u3b80cute;\\u417a\\u0100ay\\u3b4d\\u3b52ron;\\u417e;\\u4437ot;\\u417c\\u0100et\\u3b5d\\u3b61tr\\xe6\\u155fa;\\u43b6r;\\uc000\\ud835\\udd37cy;\\u4436grarr;\\u61ddpf;\\uc000\\ud835\\udd6bcr;\\uc000\\ud835\\udccf\\u0100jn\\u3b85\\u3b87;\\u600dj;\\u600c\"\n    .split(\"\")\n    .map((c) => c.charCodeAt(0)));\n//# sourceMappingURL=decode-data-html.js.map","// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\nvar _a;\nconst decodeMap = new Map([\n    [0, 65533],\n    // C1 Unicode control character reference replacements\n    [128, 8364],\n    [130, 8218],\n    [131, 402],\n    [132, 8222],\n    [133, 8230],\n    [134, 8224],\n    [135, 8225],\n    [136, 710],\n    [137, 8240],\n    [138, 352],\n    [139, 8249],\n    [140, 338],\n    [142, 381],\n    [145, 8216],\n    [146, 8217],\n    [147, 8220],\n    [148, 8221],\n    [149, 8226],\n    [150, 8211],\n    [151, 8212],\n    [152, 732],\n    [153, 8482],\n    [154, 353],\n    [155, 8250],\n    [156, 339],\n    [158, 382],\n    [159, 376],\n]);\n/**\n * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.\n */\nexport const fromCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins\n(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {\n    let output = \"\";\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n        codePoint = 0xdc00 | (codePoint & 0x3ff);\n    }\n    output += String.fromCharCode(codePoint);\n    return output;\n};\n/**\n * Replace the given code point with a replacement character if it is a\n * surrogate or is outside the valid range. Otherwise return the code\n * point unchanged.\n */\nexport function replaceCodePoint(codePoint) {\n    var _a;\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return 0xfffd;\n    }\n    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;\n}\n/**\n * Replace the code point if relevant, then convert it to a string.\n *\n * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.\n * @param codePoint The code point to decode.\n * @returns The decoded code point.\n */\nexport default function decodeCodePoint(codePoint) {\n    return fromCodePoint(replaceCodePoint(codePoint));\n}\n//# sourceMappingURL=decode_codepoint.js.map","// Generated using scripts/write-decode-map.ts\nexport default new Uint16Array(\n// prettier-ignore\n\"\\u0200aglq\\t\\x15\\x18\\x1b\\u026d\\x0f\\0\\0\\x12p;\\u4026os;\\u4027t;\\u403et;\\u403cuot;\\u4022\"\n    .split(\"\")\n    .map((c) => c.charCodeAt(0)));\n//# sourceMappingURL=decode-data-xml.js.map","import htmlDecodeTree from \"./generated/decode-data-html.js\";\nimport xmlDecodeTree from \"./generated/decode-data-xml.js\";\nimport decodeCodePoint, { replaceCodePoint, fromCodePoint, } from \"./decode_codepoint.js\";\n// Re-export for use by eg. htmlparser2\nexport { htmlDecodeTree, xmlDecodeTree, decodeCodePoint };\nexport { replaceCodePoint, fromCodePoint } from \"./decode_codepoint.js\";\nvar CharCodes;\n(function (CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\nconst TO_LOWER_BIT = 0b100000;\nexport var BinTrieFlags;\n(function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags || (BinTrieFlags = {}));\nfunction isNumber(code) {\n    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));\n}\nfunction isAsciiAlphaNumeric(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||\n        isNumber(code));\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */\nfunction isEntityInAttributeInvalidEnd(code) {\n    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function (EntityDecoderState) {\n    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nexport var DecodingMode;\n(function (DecodingMode) {\n    /** Entities in text nodes that can end with any character. */\n    DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Only allow entities terminated with a semicolon. */\n    DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n    /** Entities in attributes have limitations on ending characters. */\n    DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode || (DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */\nexport class EntityDecoder {\n    constructor(\n    /** The tree used to decode entities. */\n    decodeTree, \n    /**\n     * The function that is called when a codepoint is decoded.\n     *\n     * For multi-byte named entities, this will be called multiple times,\n     * with the second codepoint, and the same `consumed` value.\n     *\n     * @param codepoint The decoded codepoint.\n     * @param consumed The number of bytes consumed by the decoder.\n     */\n    emitCodePoint, \n    /** An object that is used to produce errors. */\n    errors) {\n        this.decodeTree = decodeTree;\n        this.emitCodePoint = emitCodePoint;\n        this.errors = errors;\n        /** The current state of the decoder. */\n        this.state = EntityDecoderState.EntityStart;\n        /** Characters that were consumed while parsing an entity. */\n        this.consumed = 1;\n        /**\n         * The result of the entity.\n         *\n         * Either the result index of a numeric entity, or the codepoint of a\n         * numeric entity.\n         */\n        this.result = 0;\n        /** The current index in the decode tree. */\n        this.treeIndex = 0;\n        /** The number of characters that were consumed in excess. */\n        this.excess = 1;\n        /** The mode in which the decoder is operating. */\n        this.decodeMode = DecodingMode.Strict;\n    }\n    /** Resets the instance to make it reusable. */\n    startEntity(decodeMode) {\n        this.decodeMode = decodeMode;\n        this.state = EntityDecoderState.EntityStart;\n        this.result = 0;\n        this.treeIndex = 0;\n        this.excess = 1;\n        this.consumed = 1;\n    }\n    /**\n     * Write an entity to the decoder. This can be called multiple times with partial entities.\n     * If the entity is incomplete, the decoder will return -1.\n     *\n     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n     * entity is incomplete, and resume when the next string is written.\n     *\n     * @param string The string containing the entity (or a continuation of the entity).\n     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    write(str, offset) {\n        switch (this.state) {\n            case EntityDecoderState.EntityStart: {\n                if (str.charCodeAt(offset) === CharCodes.NUM) {\n                    this.state = EntityDecoderState.NumericStart;\n                    this.consumed += 1;\n                    return this.stateNumericStart(str, offset + 1);\n                }\n                this.state = EntityDecoderState.NamedEntity;\n                return this.stateNamedEntity(str, offset);\n            }\n            case EntityDecoderState.NumericStart: {\n                return this.stateNumericStart(str, offset);\n            }\n            case EntityDecoderState.NumericDecimal: {\n                return this.stateNumericDecimal(str, offset);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.stateNumericHex(str, offset);\n            }\n            case EntityDecoderState.NamedEntity: {\n                return this.stateNamedEntity(str, offset);\n            }\n        }\n    }\n    /**\n     * Switches between the numeric decimal and hexadecimal states.\n     *\n     * Equivalent to the `Numeric character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericStart(str, offset) {\n        if (offset >= str.length) {\n            return -1;\n        }\n        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n            this.state = EntityDecoderState.NumericHex;\n            this.consumed += 1;\n            return this.stateNumericHex(str, offset + 1);\n        }\n        this.state = EntityDecoderState.NumericDecimal;\n        return this.stateNumericDecimal(str, offset);\n    }\n    addToNumericResult(str, start, end, base) {\n        if (start !== end) {\n            const digitCount = end - start;\n            this.result =\n                this.result * Math.pow(base, digitCount) +\n                    parseInt(str.substr(start, digitCount), base);\n            this.consumed += digitCount;\n        }\n    }\n    /**\n     * Parses a hexadecimal numeric entity.\n     *\n     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericHex(str, offset) {\n        const startIdx = offset;\n        while (offset < str.length) {\n            const char = str.charCodeAt(offset);\n            if (isNumber(char) || isHexadecimalCharacter(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 16);\n                return this.emitNumericEntity(char, 3);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return -1;\n    }\n    /**\n     * Parses a decimal numeric entity.\n     *\n     * Equivalent to the `Decimal character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericDecimal(str, offset) {\n        const startIdx = offset;\n        while (offset < str.length) {\n            const char = str.charCodeAt(offset);\n            if (isNumber(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 10);\n                return this.emitNumericEntity(char, 2);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return -1;\n    }\n    /**\n     * Validate and emit a numeric entity.\n     *\n     * Implements the logic from the `Hexademical character reference start\n     * state` and `Numeric character reference end state` in the HTML spec.\n     *\n     * @param lastCp The last code point of the entity. Used to see if the\n     *               entity was terminated with a semicolon.\n     * @param expectedLength The minimum number of characters that should be\n     *                       consumed. Used to validate that at least one digit\n     *                       was consumed.\n     * @returns The number of characters that were consumed.\n     */\n    emitNumericEntity(lastCp, expectedLength) {\n        var _a;\n        // Ensure we consumed at least one digit.\n        if (this.consumed <= expectedLength) {\n            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n            return 0;\n        }\n        // Figure out if this is a legit end of the entity\n        if (lastCp === CharCodes.SEMI) {\n            this.consumed += 1;\n        }\n        else if (this.decodeMode === DecodingMode.Strict) {\n            return 0;\n        }\n        this.emitCodePoint(replaceCodePoint(this.result), this.consumed);\n        if (this.errors) {\n            if (lastCp !== CharCodes.SEMI) {\n                this.errors.missingSemicolonAfterCharacterReference();\n            }\n            this.errors.validateNumericCharacterReference(this.result);\n        }\n        return this.consumed;\n    }\n    /**\n     * Parses a named entity.\n     *\n     * Equivalent to the `Named character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNamedEntity(str, offset) {\n        const { decodeTree } = this;\n        let current = decodeTree[this.treeIndex];\n        // The mask is the number of bytes of the value, including the current byte.\n        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n        for (; offset < str.length; offset++, this.excess++) {\n            const char = str.charCodeAt(offset);\n            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n            if (this.treeIndex < 0) {\n                return this.result === 0 ||\n                    // If we are parsing an attribute\n                    (this.decodeMode === DecodingMode.Attribute &&\n                        // We shouldn't have consumed any characters after the entity,\n                        (valueLength === 0 ||\n                            // And there should be no invalid characters.\n                            isEntityInAttributeInvalidEnd(char)))\n                    ? 0\n                    : this.emitNotTerminatedNamedEntity();\n            }\n            current = decodeTree[this.treeIndex];\n            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n            // If the branch is a value, store it and continue\n            if (valueLength !== 0) {\n                // If the entity is terminated by a semicolon, we are done.\n                if (char === CharCodes.SEMI) {\n                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n                }\n                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n                if (this.decodeMode !== DecodingMode.Strict) {\n                    this.result = this.treeIndex;\n                    this.consumed += this.excess;\n                    this.excess = 0;\n                }\n            }\n        }\n        return -1;\n    }\n    /**\n     * Emit a named entity that was not terminated with a semicolon.\n     *\n     * @returns The number of characters consumed.\n     */\n    emitNotTerminatedNamedEntity() {\n        var _a;\n        const { result, decodeTree } = this;\n        const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        this.emitNamedEntityData(result, valueLength, this.consumed);\n        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n        return this.consumed;\n    }\n    /**\n     * Emit a named entity.\n     *\n     * @param result The index of the entity in the decode tree.\n     * @param valueLength The number of bytes in the entity.\n     * @param consumed The number of characters consumed.\n     *\n     * @returns The number of characters consumed.\n     */\n    emitNamedEntityData(result, valueLength, consumed) {\n        const { decodeTree } = this;\n        this.emitCodePoint(valueLength === 1\n            ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH\n            : decodeTree[result + 1], consumed);\n        if (valueLength === 3) {\n            // For multi-byte values, we need to emit the second byte.\n            this.emitCodePoint(decodeTree[result + 2], consumed);\n        }\n        return consumed;\n    }\n    /**\n     * Signal to the parser that the end of the input was reached.\n     *\n     * Remaining data will be emitted and relevant errors will be produced.\n     *\n     * @returns The number of characters consumed.\n     */\n    end() {\n        var _a;\n        switch (this.state) {\n            case EntityDecoderState.NamedEntity: {\n                // Emit a named entity if we have one.\n                return this.result !== 0 &&\n                    (this.decodeMode !== DecodingMode.Attribute ||\n                        this.result === this.treeIndex)\n                    ? this.emitNotTerminatedNamedEntity()\n                    : 0;\n            }\n            // Otherwise, emit a numeric entity if we have one.\n            case EntityDecoderState.NumericDecimal: {\n                return this.emitNumericEntity(0, 2);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.emitNumericEntity(0, 3);\n            }\n            case EntityDecoderState.NumericStart: {\n                (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n                return 0;\n            }\n            case EntityDecoderState.EntityStart: {\n                // Return 0 if we have no entity.\n                return 0;\n            }\n        }\n    }\n}\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */\nfunction getDecoder(decodeTree) {\n    let ret = \"\";\n    const decoder = new EntityDecoder(decodeTree, (str) => (ret += fromCodePoint(str)));\n    return function decodeWithTrie(str, decodeMode) {\n        let lastIndex = 0;\n        let offset = 0;\n        while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n            ret += str.slice(lastIndex, offset);\n            decoder.startEntity(decodeMode);\n            const len = decoder.write(str, \n            // Skip the \"&\"\n            offset + 1);\n            if (len < 0) {\n                lastIndex = offset + decoder.end();\n                break;\n            }\n            lastIndex = offset + len;\n            // If `len` is 0, skip the current `&` and continue.\n            offset = len === 0 ? lastIndex + 1 : lastIndex;\n        }\n        const result = ret + str.slice(lastIndex);\n        // Make sure we don't keep a reference to the final string.\n        ret = \"\";\n        return result;\n    };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */\nexport function determineBranch(decodeTree, current, nodeIdx, char) {\n    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n        const value = char - jumpOffset;\n        return value < 0 || value >= branchCount\n            ? -1\n            : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    let lo = nodeIdx;\n    let hi = lo + branchCount - 1;\n    while (lo <= hi) {\n        const mid = (lo + hi) >>> 1;\n        const midVal = decodeTree[mid];\n        if (midVal < char) {\n            lo = mid + 1;\n        }\n        else if (midVal > char) {\n            hi = mid - 1;\n        }\n        else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nconst htmlDecoder = getDecoder(htmlDecodeTree);\nconst xmlDecoder = getDecoder(xmlDecodeTree);\n/**\n * Decodes an HTML string.\n *\n * @param str The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */\nexport function decodeHTML(str, mode = DecodingMode.Legacy) {\n    return htmlDecoder(str, mode);\n}\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLAttribute(str) {\n    return htmlDecoder(str, DecodingMode.Attribute);\n}\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLStrict(str) {\n    return htmlDecoder(str, DecodingMode.Strict);\n}\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeXML(str) {\n    return xmlDecoder(str, DecodingMode.Strict);\n}\n//# sourceMappingURL=decode.js.map","import { TransformOptions, RenderModel } from './types'\n\n/*\n * Intake options\n * @member {Array} delimit - units to be kept together - should be like a human word\n *    @member {String || RegExp}\n * @member {Array} preserve - units to be kept together and be protected - should be like a human word\n *    @member {String || RegExp}\n * @member {String} delimitInput - character to delimit input\n * @member {Boolean} delimitLetterNumber - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitLowerUpper - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitNumberLetter - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitUpperLower - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitUpperUpperLower - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {String} delimitOutput - character to delimit output\n */\nexport const INTAKE_OPTIONS: TransformOptions = {\n    delimit: [],\n    preserve: [],\n    delimitLetterNumber: true,\n    delimitLowerUpper: true,\n    delimitNumberLetter: true,\n    delimitUpperLower: false,\n    delimitUpperUpperLower: true,\n    delimitInput: '',\n    delimitOutput: ' ',\n}\n\n/*\n * Render model, with do-nothing-functions, to be exchanged by the pattern finally\n * @member {Function} preprocess\n      do operations in fresh words array, for pure alphaNumeric patterns\n * @member {Function} postProcess\n      do operations in string, just before delivery, for pure alphaNumeric patterns\n * @member {Function} firstWordFirstChar - transform word parts\n * @member {Function} firstWordNextChars - transform word parts\n * @member {Function} nextWordsFirstChar - transform word parts\n * @member {Function} nextWordsNextChars - transform word parts\n */\nexport const RENDER_MODEL: RenderModel = {\n    delimitOutput: '',\n    preprocess: (word, delimiter) => word.replace(' ', delimiter),\n    postProcess: (line) => line,\n    firstWordFirstChar: (word) => word,\n    firstWordNextChars: (word) => word,\n    nextWordsFirstChar: (word) => word,\n    nextWordsNextChars: (word) => word,\n}\n\n/* eslint-disable no-control-regex */\nexport const SPACE_REGEX =\n    /[\\u0009-\\u000D \\u00A0\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]+/g\nexport const CONTROL_REGEX =\n    /[\\u0000-\\u0008\\u000E-\\u001F\\u007F-\\u009F\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\uFEFF]+/g\n/* eslint-enable no-control-regex */\n","import { isDigit, isLetter, isLower, isUpper } from 'my-lib'\nimport { decodeHTML } from 'entities'\nimport { TransformOptions } from './types'\nimport { SPACE_REGEX, CONTROL_REGEX } from './constants'\n\n/**\n * remove extraneous and doubled characters\n * @private\n * @param {String} line\n * @param {String} char\n * @returns {String} cleaned line\n */\nexport const dedupe = (line: string, char: string): string => {\n    // escape sensitive chars:\n    char = '\\\\' + char\n    const leading = new RegExp(`^[${char}]+`)\n    const trailing = new RegExp(`[${char}]+$`)\n    const doubling = new RegExp(`[${char}]+`, 'g')\n\n    if (char.length > 1) char = char.substr(-1)\n    return line\n        .replace(doubling, char)\n        .replace(leading, '')\n        .replace(trailing, '')\n}\n\n/**\n * Get rid of html entities\n * @private\n * @param {String} word\n * @param {String} separator\n * @returns {String} stripped string\n */\nexport const decodeHtmlEntities = (word: string): string => {\n    const allEntities = /&([A-Za-z]+|#[0-9]+|#x[A-Fa-f0-9]+);/g\n    const decoder = (entity: string): string => decodeHTML(entity)\n    return word.replace(allEntities, decoder)\n}\n\n/**\n * Transform whitespace to spaces, then clear all control characters\n * @private\n * @param {String} line\n * @returns {String} cleaned line\n */\nexport const tidy = (line: string): string => {\n    line = decodeHtmlEntities(line)\n    return line.replace(SPACE_REGEX, ' ').trim().replace(CONTROL_REGEX, '')\n}\n\n/**\n * Test need to insert a delimiter in pureAlphaNumeric input\n * @private\n * @param {String} prev - previous character\n * @param {String} curr - current character\n * @param {String} next - character following current\n * @param {Object} options\n * @returns {String} Need to insert a delimiter\n */\nconst needToInsertDelimiter = (\n    prev: string,\n    curr: string,\n    next: string,\n    options: TransformOptions,\n): boolean => {\n    const letNum =\n        options.delimitLetterNumber && isLetter(prev) && isDigit(curr)\n    const lowUp = options.delimitLowerUpper && isLower(prev) && isUpper(curr)\n    const numLet =\n        options.delimitNumberLetter && isDigit(prev) && isLetter(curr)\n    const upLow = options.delimitUpperLower && isUpper(prev) && isLower(curr)\n    const upUpLow =\n        options.delimitUpperUpperLower &&\n        isUpper(prev) &&\n        isUpper(curr) &&\n        isLower(next)\n\n    const needToDelimit = letNum || lowUp || numLet || upLow || upUpLow\n    return needToDelimit\n}\n\n/**\n * Put separator before each concatenated word, in pureAlphaNumeric input\n * @private\n * @param {String} line\n * @param {Object} options\n * @returns {String} phrase of seperated words\n */\nexport const delimitWords = (\n    line: string,\n    options: TransformOptions,\n): string => {\n    let phrase = line[0]\n    for (let i = 1; i < line.length; i++) {\n        if (\n            needToInsertDelimiter(\n                line[i - 1],\n                line[i],\n                line[i + 1] || '',\n                options,\n            )\n        ) {\n            phrase += options.delimitOutput\n        }\n        phrase += line[i]\n    }\n    return phrase\n}\n\n/**\n * Find optional delimit and preserved chunks and delimit these,\n * @private\n * @param {String} line\n * @param {String[]} rules\n * @param {String} delimiter\n * @returns {String} phrase of separated words\n */\nexport const delimitChunks = (\n    line: string,\n    rules: RegExp[],\n    delimiter: string,\n): string => {\n    const usedMatches = new Set()\n    rules.forEach((rule) => {\n        const words = line.split(delimiter)\n        const foundMatches = new Set()\n        line = words\n            .map((word) => {\n                const treated = word.replace(rule, (match) => {\n                    foundMatches.add(match)\n                    const used = usedMatches.has(word)\n                    return used ? match : delimiter + match + delimiter\n                })\n                return treated\n            })\n            .join(delimiter)\n        // store found matches\n        foundMatches.forEach((match) => usedMatches.add(match))\n    })\n\n    line = dedupe(line, delimiter)\n    return line\n}\n\n/**\n * Convert protected strings to regular expressions\n * @param {String[] | RegExp[]} protections\n * @returns {RegExp[]} - normalised array\n */\nexport const normaliseProtections = (\n    protections: (string | RegExp)[],\n): RegExp[] =>\n    protections.map((pt) => (typeof pt === 'string' ? new RegExp(pt, 'g') : pt))\n","/**\n * ascii-folder.js\n * https://github.com/mplatt/fold-to-ascii-js\n *\n * This is a JavaScript port of the Apache Lucene ASCII Folding Filter.\n *\n * The Apache Lucene ASCII Folding Filter is licensed to the Apache Software\n * Foundation (ASF) under one or more contributor license agreements. See the\n * NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache\n * License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\nclass ASCIIFolder {\n\n    static foldReplacing(str = '', replacement = '') {\n        return this._fold(str, () => replacement);\n    }\n\n    static foldMaintaining(str = '') {\n        return this._fold(str, (char) => char);\n    }\n\n    static _fold(str, fallback) {\n        if (str === null)\n            return '';\n\n        if (typeof str === 'number')\n            return '' + str;\n\n        if (typeof str !== 'string')\n            throw new Error('Invalid input data type');\n\n        return str.split('').map(character => {\n            if (character.charCodeAt(0) < 128) {\n                return character;\n            } else {\n                const replacement = this.mapping.get(character.charCodeAt(0));\n                return (replacement === undefined) ? fallback(character) : replacement;\n            }\n        }).join('');\n    }\n}\n\nASCIIFolder.mapping = new Map([\n    [0xC0, 'A'],\n    [0xC1, 'A'],\n    [0xC2, 'A'],\n    [0xC3, 'A'],\n    [0xC4, 'A'],\n    [0xC5, 'A'],\n    [0x100, 'A'],\n    [0x102, 'A'],\n    [0x104, 'A'],\n    [0x18F, 'A'],\n    [0x1CD, 'A'],\n    [0x1DE, 'A'],\n    [0x1E0, 'A'],\n    [0x1FA, 'A'],\n    [0x200, 'A'],\n    [0x202, 'A'],\n    [0x226, 'A'],\n    [0x23A, 'A'],\n    [0x1D00, 'A'],\n    [0x1E00, 'A'],\n    [0x1EA0, 'A'],\n    [0x1EA2, 'A'],\n    [0x1EA4, 'A'],\n    [0x1EA6, 'A'],\n    [0x1EA8, 'A'],\n    [0x1EAA, 'A'],\n    [0x1EAC, 'A'],\n    [0x1EAE, 'A'],\n    [0x1EB0, 'A'],\n    [0x1EB2, 'A'],\n    [0x1EB4, 'A'],\n    [0x1EB6, 'A'],\n    [0x24B6, 'A'],\n    [0xFF21, 'A'],\n    [0xE0, 'a'],\n    [0xE1, 'a'],\n    [0xE2, 'a'],\n    [0xE3, 'a'],\n    [0xE4, 'a'],\n    [0xE5, 'a'],\n    [0x101, 'a'],\n    [0x103, 'a'],\n    [0x105, 'a'],\n    [0x1CE, 'a'],\n    [0x1DF, 'a'],\n    [0x1E1, 'a'],\n    [0x1FB, 'a'],\n    [0x201, 'a'],\n    [0x203, 'a'],\n    [0x227, 'a'],\n    [0x250, 'a'],\n    [0x259, 'a'],\n    [0x25A, 'a'],\n    [0x1D8F, 'a'],\n    [0x1D95, 'a'],\n    [0x1E01, 'a'],\n    [0x1E9A, 'a'],\n    [0x1EA1, 'a'],\n    [0x1EA3, 'a'],\n    [0x1EA5, 'a'],\n    [0x1EA7, 'a'],\n    [0x1EA9, 'a'],\n    [0x1EAB, 'a'],\n    [0x1EAD, 'a'],\n    [0x1EAF, 'a'],\n    [0x1EB1, 'a'],\n    [0x1EB3, 'a'],\n    [0x1EB5, 'a'],\n    [0x1EB7, 'a'],\n    [0x2090, 'a'],\n    [0x2094, 'a'],\n    [0x24D0, 'a'],\n    [0x2C65, 'a'],\n    [0x2C6F, 'a'],\n    [0xFF41, 'a'],\n    [0xA732, 'AA'],\n    [0xC6, 'AE'],\n    [0x1E2, 'AE'],\n    [0x1FC, 'AE'],\n    [0x1D01, 'AE'],\n    [0xA734, 'AO'],\n    [0xA736, 'AU'],\n    [0xA738, 'AV'],\n    [0xA73A, 'AV'],\n    [0xA73C, 'AY'],\n    [0x249C, '(a)'],\n    [0xA733, 'aa'],\n    [0xE6, 'ae'],\n    [0x1E3, 'ae'],\n    [0x1FD, 'ae'],\n    [0x1D02, 'ae'],\n    [0xA735, 'ao'],\n    [0xA737, 'au'],\n    [0xA739, 'av'],\n    [0xA73B, 'av'],\n    [0xA73D, 'ay'],\n    [0x181, 'B'],\n    [0x182, 'B'],\n    [0x243, 'B'],\n    [0x299, 'B'],\n    [0x1D03, 'B'],\n    [0x1E02, 'B'],\n    [0x1E04, 'B'],\n    [0x1E06, 'B'],\n    [0x24B7, 'B'],\n    [0xFF22, 'B'],\n    [0x180, 'b'],\n    [0x183, 'b'],\n    [0x253, 'b'],\n    [0x1D6C, 'b'],\n    [0x1D80, 'b'],\n    [0x1E03, 'b'],\n    [0x1E05, 'b'],\n    [0x1E07, 'b'],\n    [0x24D1, 'b'],\n    [0xFF42, 'b'],\n    [0x249D, '(b)'],\n    [0xC7, 'C'],\n    [0x106, 'C'],\n    [0x108, 'C'],\n    [0x10A, 'C'],\n    [0x10C, 'C'],\n    [0x187, 'C'],\n    [0x23B, 'C'],\n    [0x297, 'C'],\n    [0x1D04, 'C'],\n    [0x1E08, 'C'],\n    [0x24B8, 'C'],\n    [0xFF23, 'C'],\n    [0xE7, 'c'],\n    [0x107, 'c'],\n    [0x109, 'c'],\n    [0x10B, 'c'],\n    [0x10D, 'c'],\n    [0x188, 'c'],\n    [0x23C, 'c'],\n    [0x255, 'c'],\n    [0x1E09, 'c'],\n    [0x2184, 'c'],\n    [0x24D2, 'c'],\n    [0xA73E, 'c'],\n    [0xA73F, 'c'],\n    [0xFF43, 'c'],\n    [0x249E, '(c)'],\n    [0xD0, 'D'],\n    [0x10E, 'D'],\n    [0x110, 'D'],\n    [0x189, 'D'],\n    [0x18A, 'D'],\n    [0x18B, 'D'],\n    [0x1D05, 'D'],\n    [0x1D06, 'D'],\n    [0x1E0A, 'D'],\n    [0x1E0C, 'D'],\n    [0x1E0E, 'D'],\n    [0x1E10, 'D'],\n    [0x1E12, 'D'],\n    [0x24B9, 'D'],\n    [0xA779, 'D'],\n    [0xFF24, 'D'],\n    [0xF0, 'd'],\n    [0x10F, 'd'],\n    [0x111, 'd'],\n    [0x18C, 'd'],\n    [0x221, 'd'],\n    [0x256, 'd'],\n    [0x257, 'd'],\n    [0x1D6D, 'd'],\n    [0x1D81, 'd'],\n    [0x1D91, 'd'],\n    [0x1E0B, 'd'],\n    [0x1E0D, 'd'],\n    [0x1E0F, 'd'],\n    [0x1E11, 'd'],\n    [0x1E13, 'd'],\n    [0x24D3, 'd'],\n    [0xA77A, 'd'],\n    [0xFF44, 'd'],\n    [0x1C4, 'DZ'],\n    [0x1F1, 'DZ'],\n    [0x1C5, 'Dz'],\n    [0x1F2, 'Dz'],\n    [0x249F, '(d)'],\n    [0x238, 'db'],\n    [0x1C6, 'dz'],\n    [0x1F3, 'dz'],\n    [0x2A3, 'dz'],\n    [0x2A5, 'dz'],\n    [0xC8, 'E'],\n    [0xC9, 'E'],\n    [0xCA, 'E'],\n    [0xCB, 'E'],\n    [0x112, 'E'],\n    [0x114, 'E'],\n    [0x116, 'E'],\n    [0x118, 'E'],\n    [0x11A, 'E'],\n    [0x18E, 'E'],\n    [0x190, 'E'],\n    [0x204, 'E'],\n    [0x206, 'E'],\n    [0x228, 'E'],\n    [0x246, 'E'],\n    [0x1D07, 'E'],\n    [0x1E14, 'E'],\n    [0x1E16, 'E'],\n    [0x1E18, 'E'],\n    [0x1E1A, 'E'],\n    [0x1E1C, 'E'],\n    [0x1EB8, 'E'],\n    [0x1EBA, 'E'],\n    [0x1EBC, 'E'],\n    [0x1EBE, 'E'],\n    [0x1EC0, 'E'],\n    [0x1EC2, 'E'],\n    [0x1EC4, 'E'],\n    [0x1EC6, 'E'],\n    [0x24BA, 'E'],\n    [0x2C7B, 'E'],\n    [0xFF25, 'E'],\n    [0xE8, 'e'],\n    [0xE9, 'e'],\n    [0xEA, 'e'],\n    [0xEB, 'e'],\n    [0x113, 'e'],\n    [0x115, 'e'],\n    [0x117, 'e'],\n    [0x119, 'e'],\n    [0x11B, 'e'],\n    [0x1DD, 'e'],\n    [0x205, 'e'],\n    [0x207, 'e'],\n    [0x229, 'e'],\n    [0x247, 'e'],\n    [0x258, 'e'],\n    [0x25B, 'e'],\n    [0x25C, 'e'],\n    [0x25D, 'e'],\n    [0x25E, 'e'],\n    [0x29A, 'e'],\n    [0x1D08, 'e'],\n    [0x1D92, 'e'],\n    [0x1D93, 'e'],\n    [0x1D94, 'e'],\n    [0x1E15, 'e'],\n    [0x1E17, 'e'],\n    [0x1E19, 'e'],\n    [0x1E1B, 'e'],\n    [0x1E1D, 'e'],\n    [0x1EB9, 'e'],\n    [0x1EBB, 'e'],\n    [0x1EBD, 'e'],\n    [0x1EBF, 'e'],\n    [0x1EC1, 'e'],\n    [0x1EC3, 'e'],\n    [0x1EC5, 'e'],\n    [0x1EC7, 'e'],\n    [0x2091, 'e'],\n    [0x24D4, 'e'],\n    [0x2C78, 'e'],\n    [0xFF45, 'e'],\n    [0x24A0, '(e)'],\n    [0x191, 'F'],\n    [0x1E1E, 'F'],\n    [0x24BB, 'F'],\n    [0xA730, 'F'],\n    [0xA77B, 'F'],\n    [0xA7FB, 'F'],\n    [0xFF26, 'F'],\n    [0x192, 'f'],\n    [0x1D6E, 'f'],\n    [0x1D82, 'f'],\n    [0x1E1F, 'f'],\n    [0x1E9B, 'f'],\n    [0x24D5, 'f'],\n    [0xA77C, 'f'],\n    [0xFF46, 'f'],\n    [0x24A1, '(f)'],\n    [0xFB00, 'ff'],\n    [0xFB03, 'ffi'],\n    [0xFB04, 'ffl'],\n    [0xFB01, 'fi'],\n    [0xFB02, 'fl'],\n    [0x11C, 'G'],\n    [0x11E, 'G'],\n    [0x120, 'G'],\n    [0x122, 'G'],\n    [0x193, 'G'],\n    [0x1E4, 'G'],\n    [0x1E5, 'G'],\n    [0x1E6, 'G'],\n    [0x1E7, 'G'],\n    [0x1F4, 'G'],\n    [0x262, 'G'],\n    [0x29B, 'G'],\n    [0x1E20, 'G'],\n    [0x24BC, 'G'],\n    [0xA77D, 'G'],\n    [0xA77E, 'G'],\n    [0xFF27, 'G'],\n    [0x11D, 'g'],\n    [0x11F, 'g'],\n    [0x121, 'g'],\n    [0x123, 'g'],\n    [0x1F5, 'g'],\n    [0x260, 'g'],\n    [0x261, 'g'],\n    [0x1D77, 'g'],\n    [0x1D79, 'g'],\n    [0x1D83, 'g'],\n    [0x1E21, 'g'],\n    [0x24D6, 'g'],\n    [0xA77F, 'g'],\n    [0xFF47, 'g'],\n    [0x24A2, '(g)'],\n    [0x124, 'H'],\n    [0x126, 'H'],\n    [0x21E, 'H'],\n    [0x29C, 'H'],\n    [0x1E22, 'H'],\n    [0x1E24, 'H'],\n    [0x1E26, 'H'],\n    [0x1E28, 'H'],\n    [0x1E2A, 'H'],\n    [0x24BD, 'H'],\n    [0x2C67, 'H'],\n    [0x2C75, 'H'],\n    [0xFF28, 'H'],\n    [0x125, 'h'],\n    [0x127, 'h'],\n    [0x21F, 'h'],\n    [0x265, 'h'],\n    [0x266, 'h'],\n    [0x2AE, 'h'],\n    [0x2AF, 'h'],\n    [0x1E23, 'h'],\n    [0x1E25, 'h'],\n    [0x1E27, 'h'],\n    [0x1E29, 'h'],\n    [0x1E2B, 'h'],\n    [0x1E96, 'h'],\n    [0x24D7, 'h'],\n    [0x2C68, 'h'],\n    [0x2C76, 'h'],\n    [0xFF48, 'h'],\n    [0x1F6, 'HV'],\n    [0x24A3, '(h)'],\n    [0x195, 'hv'],\n    [0xCC, 'I'],\n    [0xCD, 'I'],\n    [0xCE, 'I'],\n    [0xCF, 'I'],\n    [0x128, 'I'],\n    [0x12A, 'I'],\n    [0x12C, 'I'],\n    [0x12E, 'I'],\n    [0x130, 'I'],\n    [0x196, 'I'],\n    [0x197, 'I'],\n    [0x1CF, 'I'],\n    [0x208, 'I'],\n    [0x20A, 'I'],\n    [0x26A, 'I'],\n    [0x1D7B, 'I'],\n    [0x1E2C, 'I'],\n    [0x1E2E, 'I'],\n    [0x1EC8, 'I'],\n    [0x1ECA, 'I'],\n    [0x24BE, 'I'],\n    [0xA7FE, 'I'],\n    [0xFF29, 'I'],\n    [0xEC, 'i'],\n    [0xED, 'i'],\n    [0xEE, 'i'],\n    [0xEF, 'i'],\n    [0x129, 'i'],\n    [0x12B, 'i'],\n    [0x12D, 'i'],\n    [0x12F, 'i'],\n    [0x131, 'i'],\n    [0x1D0, 'i'],\n    [0x209, 'i'],\n    [0x20B, 'i'],\n    [0x268, 'i'],\n    [0x1D09, 'i'],\n    [0x1D62, 'i'],\n    [0x1D7C, 'i'],\n    [0x1D96, 'i'],\n    [0x1E2D, 'i'],\n    [0x1E2F, 'i'],\n    [0x1EC9, 'i'],\n    [0x1ECB, 'i'],\n    [0x2071, 'i'],\n    [0x24D8, 'i'],\n    [0xFF49, 'i'],\n    [0x132, 'IJ'],\n    [0x24A4, '(i)'],\n    [0x133, 'ij'],\n    [0x134, 'J'],\n    [0x248, 'J'],\n    [0x1D0A, 'J'],\n    [0x24BF, 'J'],\n    [0xFF2A, 'J'],\n    [0x135, 'j'],\n    [0x1F0, 'j'],\n    [0x237, 'j'],\n    [0x249, 'j'],\n    [0x25F, 'j'],\n    [0x284, 'j'],\n    [0x29D, 'j'],\n    [0x24D9, 'j'],\n    [0x2C7C, 'j'],\n    [0xFF4A, 'j'],\n    [0x24A5, '(j)'],\n    [0x136, 'K'],\n    [0x198, 'K'],\n    [0x1E8, 'K'],\n    [0x1D0B, 'K'],\n    [0x1E30, 'K'],\n    [0x1E32, 'K'],\n    [0x1E34, 'K'],\n    [0x24C0, 'K'],\n    [0x2C69, 'K'],\n    [0xA740, 'K'],\n    [0xA742, 'K'],\n    [0xA744, 'K'],\n    [0xFF2B, 'K'],\n    [0x137, 'k'],\n    [0x199, 'k'],\n    [0x1E9, 'k'],\n    [0x29E, 'k'],\n    [0x1D84, 'k'],\n    [0x1E31, 'k'],\n    [0x1E33, 'k'],\n    [0x1E35, 'k'],\n    [0x24DA, 'k'],\n    [0x2C6A, 'k'],\n    [0xA741, 'k'],\n    [0xA743, 'k'],\n    [0xA745, 'k'],\n    [0xFF4B, 'k'],\n    [0x24A6, '(k)'],\n    [0x139, 'L'],\n    [0x13B, 'L'],\n    [0x13D, 'L'],\n    [0x13F, 'L'],\n    [0x141, 'L'],\n    [0x23D, 'L'],\n    [0x29F, 'L'],\n    [0x1D0C, 'L'],\n    [0x1E36, 'L'],\n    [0x1E38, 'L'],\n    [0x1E3A, 'L'],\n    [0x1E3C, 'L'],\n    [0x24C1, 'L'],\n    [0x2C60, 'L'],\n    [0x2C62, 'L'],\n    [0xA746, 'L'],\n    [0xA748, 'L'],\n    [0xA780, 'L'],\n    [0xFF2C, 'L'],\n    [0x13A, 'l'],\n    [0x13C, 'l'],\n    [0x13E, 'l'],\n    [0x140, 'l'],\n    [0x142, 'l'],\n    [0x19A, 'l'],\n    [0x234, 'l'],\n    [0x26B, 'l'],\n    [0x26C, 'l'],\n    [0x26D, 'l'],\n    [0x1D85, 'l'],\n    [0x1E37, 'l'],\n    [0x1E39, 'l'],\n    [0x1E3B, 'l'],\n    [0x1E3D, 'l'],\n    [0x24DB, 'l'],\n    [0x2C61, 'l'],\n    [0xA747, 'l'],\n    [0xA749, 'l'],\n    [0xA781, 'l'],\n    [0xFF4C, 'l'],\n    [0x1C7, 'LJ'],\n    [0x1EFA, 'LL'],\n    [0x1C8, 'Lj'],\n    [0x24A7, '(l)'],\n    [0x1C9, 'lj'],\n    [0x1EFB, 'll'],\n    [0x2AA, 'ls'],\n    [0x2AB, 'lz'],\n    [0x19C, 'M'],\n    [0x1D0D, 'M'],\n    [0x1E3E, 'M'],\n    [0x1E40, 'M'],\n    [0x1E42, 'M'],\n    [0x24C2, 'M'],\n    [0x2C6E, 'M'],\n    [0xA7FD, 'M'],\n    [0xA7FF, 'M'],\n    [0xFF2D, 'M'],\n    [0x26F, 'm'],\n    [0x270, 'm'],\n    [0x271, 'm'],\n    [0x1D6F, 'm'],\n    [0x1D86, 'm'],\n    [0x1E3F, 'm'],\n    [0x1E41, 'm'],\n    [0x1E43, 'm'],\n    [0x24DC, 'm'],\n    [0xFF4D, 'm'],\n    [0x24A8, '(m)'],\n    [0xD1, 'N'],\n    [0x143, 'N'],\n    [0x145, 'N'],\n    [0x147, 'N'],\n    [0x14A, 'N'],\n    [0x19D, 'N'],\n    [0x1F8, 'N'],\n    [0x220, 'N'],\n    [0x274, 'N'],\n    [0x1D0E, 'N'],\n    [0x1E44, 'N'],\n    [0x1E46, 'N'],\n    [0x1E48, 'N'],\n    [0x1E4A, 'N'],\n    [0x24C3, 'N'],\n    [0xFF2E, 'N'],\n    [0xF1, 'n'],\n    [0x144, 'n'],\n    [0x146, 'n'],\n    [0x148, 'n'],\n    [0x149, 'n'],\n    [0x14B, 'n'],\n    [0x19E, 'n'],\n    [0x1F9, 'n'],\n    [0x235, 'n'],\n    [0x272, 'n'],\n    [0x273, 'n'],\n    [0x1D70, 'n'],\n    [0x1D87, 'n'],\n    [0x1E45, 'n'],\n    [0x1E47, 'n'],\n    [0x1E49, 'n'],\n    [0x1E4B, 'n'],\n    [0x207F, 'n'],\n    [0x24DD, 'n'],\n    [0xFF4E, 'n'],\n    [0x1CA, 'NJ'],\n    [0x1CB, 'Nj'],\n    [0x24A9, '(n)'],\n    [0x1CC, 'nj'],\n    [0xD2, 'O'],\n    [0xD3, 'O'],\n    [0xD4, 'O'],\n    [0xD5, 'O'],\n    [0xD6, 'O'],\n    [0xD8, 'O'],\n    [0x14C, 'O'],\n    [0x14E, 'O'],\n    [0x150, 'O'],\n    [0x186, 'O'],\n    [0x19F, 'O'],\n    [0x1A0, 'O'],\n    [0x1D1, 'O'],\n    [0x1EA, 'O'],\n    [0x1EC, 'O'],\n    [0x1FE, 'O'],\n    [0x20C, 'O'],\n    [0x20E, 'O'],\n    [0x22A, 'O'],\n    [0x22C, 'O'],\n    [0x22E, 'O'],\n    [0x230, 'O'],\n    [0x1D0F, 'O'],\n    [0x1D10, 'O'],\n    [0x1E4C, 'O'],\n    [0x1E4E, 'O'],\n    [0x1E50, 'O'],\n    [0x1E52, 'O'],\n    [0x1ECC, 'O'],\n    [0x1ECE, 'O'],\n    [0x1ED0, 'O'],\n    [0x1ED2, 'O'],\n    [0x1ED4, 'O'],\n    [0x1ED6, 'O'],\n    [0x1ED8, 'O'],\n    [0x1EDA, 'O'],\n    [0x1EDC, 'O'],\n    [0x1EDE, 'O'],\n    [0x1EE0, 'O'],\n    [0x1EE2, 'O'],\n    [0x24C4, 'O'],\n    [0xA74A, 'O'],\n    [0xA74C, 'O'],\n    [0xFF2F, 'O'],\n    [0xF2, 'o'],\n    [0xF3, 'o'],\n    [0xF4, 'o'],\n    [0xF5, 'o'],\n    [0xF6, 'o'],\n    [0xF8, 'o'],\n    [0x14D, 'o'],\n    [0x14F, 'o'],\n    [0x151, 'o'],\n    [0x1A1, 'o'],\n    [0x1D2, 'o'],\n    [0x1EB, 'o'],\n    [0x1ED, 'o'],\n    [0x1FF, 'o'],\n    [0x20D, 'o'],\n    [0x20F, 'o'],\n    [0x22B, 'o'],\n    [0x22D, 'o'],\n    [0x22F, 'o'],\n    [0x231, 'o'],\n    [0x254, 'o'],\n    [0x275, 'o'],\n    [0x1D16, 'o'],\n    [0x1D17, 'o'],\n    [0x1D97, 'o'],\n    [0x1E4D, 'o'],\n    [0x1E4F, 'o'],\n    [0x1E51, 'o'],\n    [0x1E53, 'o'],\n    [0x1ECD, 'o'],\n    [0x1ECF, 'o'],\n    [0x1ED1, 'o'],\n    [0x1ED3, 'o'],\n    [0x1ED5, 'o'],\n    [0x1ED7, 'o'],\n    [0x1ED9, 'o'],\n    [0x1EDB, 'o'],\n    [0x1EDD, 'o'],\n    [0x1EDF, 'o'],\n    [0x1EE1, 'o'],\n    [0x1EE3, 'o'],\n    [0x2092, 'o'],\n    [0x24DE, 'o'],\n    [0x2C7A, 'o'],\n    [0xA74B, 'o'],\n    [0xA74D, 'o'],\n    [0xFF4F, 'o'],\n    [0x152, 'OE'],\n    [0x276, 'OE'],\n    [0xA74E, 'OO'],\n    [0x222, 'OU'],\n    [0x1D15, 'OU'],\n    [0x24AA, '(o)'],\n    [0x153, 'oe'],\n    [0x1D14, 'oe'],\n    [0xA74F, 'oo'],\n    [0x223, 'ou'],\n    [0x1A4, 'P'],\n    [0x1D18, 'P'],\n    [0x1E54, 'P'],\n    [0x1E56, 'P'],\n    [0x24C5, 'P'],\n    [0x2C63, 'P'],\n    [0xA750, 'P'],\n    [0xA752, 'P'],\n    [0xA754, 'P'],\n    [0xFF30, 'P'],\n    [0x1A5, 'p'],\n    [0x1D71, 'p'],\n    [0x1D7D, 'p'],\n    [0x1D88, 'p'],\n    [0x1E55, 'p'],\n    [0x1E57, 'p'],\n    [0x24DF, 'p'],\n    [0xA751, 'p'],\n    [0xA753, 'p'],\n    [0xA755, 'p'],\n    [0xA7FC, 'p'],\n    [0xFF50, 'p'],\n    [0x24AB, '(p)'],\n    [0x24A, 'Q'],\n    [0x24C6, 'Q'],\n    [0xA756, 'Q'],\n    [0xA758, 'Q'],\n    [0xFF31, 'Q'],\n    [0x138, 'q'],\n    [0x24B, 'q'],\n    [0x2A0, 'q'],\n    [0x24E0, 'q'],\n    [0xA757, 'q'],\n    [0xA759, 'q'],\n    [0xFF51, 'q'],\n    [0x24AC, '(q)'],\n    [0x239, 'qp'],\n    [0x154, 'R'],\n    [0x156, 'R'],\n    [0x158, 'R'],\n    [0x210, 'R'],\n    [0x212, 'R'],\n    [0x24C, 'R'],\n    [0x280, 'R'],\n    [0x281, 'R'],\n    [0x1D19, 'R'],\n    [0x1D1A, 'R'],\n    [0x1E58, 'R'],\n    [0x1E5A, 'R'],\n    [0x1E5C, 'R'],\n    [0x1E5E, 'R'],\n    [0x24C7, 'R'],\n    [0x2C64, 'R'],\n    [0xA75A, 'R'],\n    [0xA782, 'R'],\n    [0xFF32, 'R'],\n    [0x155, 'r'],\n    [0x157, 'r'],\n    [0x159, 'r'],\n    [0x211, 'r'],\n    [0x213, 'r'],\n    [0x24D, 'r'],\n    [0x27C, 'r'],\n    [0x27D, 'r'],\n    [0x27E, 'r'],\n    [0x27F, 'r'],\n    [0x1D63, 'r'],\n    [0x1D72, 'r'],\n    [0x1D73, 'r'],\n    [0x1D89, 'r'],\n    [0x1E59, 'r'],\n    [0x1E5B, 'r'],\n    [0x1E5D, 'r'],\n    [0x1E5F, 'r'],\n    [0x24E1, 'r'],\n    [0xA75B, 'r'],\n    [0xA783, 'r'],\n    [0xFF52, 'r'],\n    [0x24AD, '(r)'],\n    [0x15A, 'S'],\n    [0x15C, 'S'],\n    [0x15E, 'S'],\n    [0x160, 'S'],\n    [0x218, 'S'],\n    [0x1E60, 'S'],\n    [0x1E62, 'S'],\n    [0x1E64, 'S'],\n    [0x1E66, 'S'],\n    [0x1E68, 'S'],\n    [0x24C8, 'S'],\n    [0xA731, 'S'],\n    [0xA785, 'S'],\n    [0xFF33, 'S'],\n    [0x15B, 's'],\n    [0x15D, 's'],\n    [0x15F, 's'],\n    [0x161, 's'],\n    [0x17F, 's'],\n    [0x219, 's'],\n    [0x23F, 's'],\n    [0x282, 's'],\n    [0x1D74, 's'],\n    [0x1D8A, 's'],\n    [0x1E61, 's'],\n    [0x1E63, 's'],\n    [0x1E65, 's'],\n    [0x1E67, 's'],\n    [0x1E69, 's'],\n    [0x1E9C, 's'],\n    [0x1E9D, 's'],\n    [0x24E2, 's'],\n    [0xA784, 's'],\n    [0xFF53, 's'],\n    [0x1E9E, 'SS'],\n    [0x24AE, '(s)'],\n    [0xDF, 'ss'],\n    [0xFB06, 'st'],\n    [0x162, 'T'],\n    [0x164, 'T'],\n    [0x166, 'T'],\n    [0x1AC, 'T'],\n    [0x1AE, 'T'],\n    [0x21A, 'T'],\n    [0x23E, 'T'],\n    [0x1D1B, 'T'],\n    [0x1E6A, 'T'],\n    [0x1E6C, 'T'],\n    [0x1E6E, 'T'],\n    [0x1E70, 'T'],\n    [0x24C9, 'T'],\n    [0xA786, 'T'],\n    [0xFF34, 'T'],\n    [0x163, 't'],\n    [0x165, 't'],\n    [0x167, 't'],\n    [0x1AB, 't'],\n    [0x1AD, 't'],\n    [0x21B, 't'],\n    [0x236, 't'],\n    [0x287, 't'],\n    [0x288, 't'],\n    [0x1D75, 't'],\n    [0x1E6B, 't'],\n    [0x1E6D, 't'],\n    [0x1E6F, 't'],\n    [0x1E71, 't'],\n    [0x1E97, 't'],\n    [0x24E3, 't'],\n    [0x2C66, 't'],\n    [0xFF54, 't'],\n    [0xDE, 'TH'],\n    [0xA766, 'TH'],\n    [0xA728, 'TZ'],\n    [0x24AF, '(t)'],\n    [0x2A8, 'tc'],\n    [0xFE, 'th'],\n    [0x1D7A, 'th'],\n    [0xA767, 'th'],\n    [0x2A6, 'ts'],\n    [0xA729, 'tz'],\n    [0xD9, 'U'],\n    [0xDA, 'U'],\n    [0xDB, 'U'],\n    [0xDC, 'U'],\n    [0x168, 'U'],\n    [0x16A, 'U'],\n    [0x16C, 'U'],\n    [0x16E, 'U'],\n    [0x170, 'U'],\n    [0x172, 'U'],\n    [0x1AF, 'U'],\n    [0x1D3, 'U'],\n    [0x1D5, 'U'],\n    [0x1D7, 'U'],\n    [0x1D9, 'U'],\n    [0x1DB, 'U'],\n    [0x214, 'U'],\n    [0x216, 'U'],\n    [0x244, 'U'],\n    [0x1D1C, 'U'],\n    [0x1D7E, 'U'],\n    [0x1E72, 'U'],\n    [0x1E74, 'U'],\n    [0x1E76, 'U'],\n    [0x1E78, 'U'],\n    [0x1E7A, 'U'],\n    [0x1EE4, 'U'],\n    [0x1EE6, 'U'],\n    [0x1EE8, 'U'],\n    [0x1EEA, 'U'],\n    [0x1EEC, 'U'],\n    [0x1EEE, 'U'],\n    [0x1EF0, 'U'],\n    [0x24CA, 'U'],\n    [0xFF35, 'U'],\n    [0xF9, 'u'],\n    [0xFA, 'u'],\n    [0xFB, 'u'],\n    [0xFC, 'u'],\n    [0x169, 'u'],\n    [0x16B, 'u'],\n    [0x16D, 'u'],\n    [0x16F, 'u'],\n    [0x171, 'u'],\n    [0x173, 'u'],\n    [0x1B0, 'u'],\n    [0x1D4, 'u'],\n    [0x1D6, 'u'],\n    [0x1D8, 'u'],\n    [0x1DA, 'u'],\n    [0x1DC, 'u'],\n    [0x215, 'u'],\n    [0x217, 'u'],\n    [0x289, 'u'],\n    [0x1D64, 'u'],\n    [0x1D99, 'u'],\n    [0x1E73, 'u'],\n    [0x1E75, 'u'],\n    [0x1E77, 'u'],\n    [0x1E79, 'u'],\n    [0x1E7B, 'u'],\n    [0x1EE5, 'u'],\n    [0x1EE7, 'u'],\n    [0x1EE9, 'u'],\n    [0x1EEB, 'u'],\n    [0x1EED, 'u'],\n    [0x1EEF, 'u'],\n    [0x1EF1, 'u'],\n    [0x24E4, 'u'],\n    [0xFF55, 'u'],\n    [0x24B0, '(u)'],\n    [0x1D6B, 'ue'],\n    [0x1B2, 'V'],\n    [0x245, 'V'],\n    [0x1D20, 'V'],\n    [0x1E7C, 'V'],\n    [0x1E7E, 'V'],\n    [0x1EFC, 'V'],\n    [0x24CB, 'V'],\n    [0xA75E, 'V'],\n    [0xA768, 'V'],\n    [0xFF36, 'V'],\n    [0x28B, 'v'],\n    [0x28C, 'v'],\n    [0x1D65, 'v'],\n    [0x1D8C, 'v'],\n    [0x1E7D, 'v'],\n    [0x1E7F, 'v'],\n    [0x24E5, 'v'],\n    [0x2C71, 'v'],\n    [0x2C74, 'v'],\n    [0xA75F, 'v'],\n    [0xFF56, 'v'],\n    [0xA760, 'VY'],\n    [0x24B1, '(v)'],\n    [0xA761, 'vy'],\n    [0x174, 'W'],\n    [0x1F7, 'W'],\n    [0x1D21, 'W'],\n    [0x1E80, 'W'],\n    [0x1E82, 'W'],\n    [0x1E84, 'W'],\n    [0x1E86, 'W'],\n    [0x1E88, 'W'],\n    [0x24CC, 'W'],\n    [0x2C72, 'W'],\n    [0xFF37, 'W'],\n    [0x175, 'w'],\n    [0x1BF, 'w'],\n    [0x28D, 'w'],\n    [0x1E81, 'w'],\n    [0x1E83, 'w'],\n    [0x1E85, 'w'],\n    [0x1E87, 'w'],\n    [0x1E89, 'w'],\n    [0x1E98, 'w'],\n    [0x24E6, 'w'],\n    [0x2C73, 'w'],\n    [0xFF57, 'w'],\n    [0x24B2, '(w)'],\n    [0x1E8A, 'X'],\n    [0x1E8C, 'X'],\n    [0x24CD, 'X'],\n    [0xFF38, 'X'],\n    [0x1D8D, 'x'],\n    [0x1E8B, 'x'],\n    [0x1E8D, 'x'],\n    [0x2093, 'x'],\n    [0x24E7, 'x'],\n    [0xFF58, 'x'],\n    [0x24B3, '(x)'],\n    [0xDD, 'Y'],\n    [0x176, 'Y'],\n    [0x178, 'Y'],\n    [0x1B3, 'Y'],\n    [0x232, 'Y'],\n    [0x24E, 'Y'],\n    [0x28F, 'Y'],\n    [0x1E8E, 'Y'],\n    [0x1EF2, 'Y'],\n    [0x1EF4, 'Y'],\n    [0x1EF6, 'Y'],\n    [0x1EF8, 'Y'],\n    [0x1EFE, 'Y'],\n    [0x24CE, 'Y'],\n    [0xFF39, 'Y'],\n    [0xFD, 'y'],\n    [0xFF, 'y'],\n    [0x177, 'y'],\n    [0x1B4, 'y'],\n    [0x233, 'y'],\n    [0x24F, 'y'],\n    [0x28E, 'y'],\n    [0x1E8F, 'y'],\n    [0x1E99, 'y'],\n    [0x1EF3, 'y'],\n    [0x1EF5, 'y'],\n    [0x1EF7, 'y'],\n    [0x1EF9, 'y'],\n    [0x1EFF, 'y'],\n    [0x24E8, 'y'],\n    [0xFF59, 'y'],\n    [0x24B4, '(y)'],\n    [0x179, 'Z'],\n    [0x17B, 'Z'],\n    [0x17D, 'Z'],\n    [0x1B5, 'Z'],\n    [0x21C, 'Z'],\n    [0x224, 'Z'],\n    [0x1D22, 'Z'],\n    [0x1E90, 'Z'],\n    [0x1E92, 'Z'],\n    [0x1E94, 'Z'],\n    [0x24CF, 'Z'],\n    [0x2C6B, 'Z'],\n    [0xA762, 'Z'],\n    [0xFF3A, 'Z'],\n    [0x17A, 'z'],\n    [0x17C, 'z'],\n    [0x17E, 'z'],\n    [0x1B6, 'z'],\n    [0x21D, 'z'],\n    [0x225, 'z'],\n    [0x240, 'z'],\n    [0x290, 'z'],\n    [0x291, 'z'],\n    [0x1D76, 'z'],\n    [0x1D8E, 'z'],\n    [0x1E91, 'z'],\n    [0x1E93, 'z'],\n    [0x1E95, 'z'],\n    [0x24E9, 'z'],\n    [0x2C6C, 'z'],\n    [0xA763, 'z'],\n    [0xFF5A, 'z'],\n    [0x24B5, '(z)'],\n    [0x2070, '0'],\n    [0x2080, '0'],\n    [0x24EA, '0'],\n    [0x24FF, '0'],\n    [0xFF10, '0'],\n    [0xB9, '1'],\n    [0x2081, '1'],\n    [0x2460, '1'],\n    [0x24F5, '1'],\n    [0x2776, '1'],\n    [0x2780, '1'],\n    [0x278A, '1'],\n    [0xFF11, '1'],\n    [0x2488, '1.'],\n    [0x2474, '(1)'],\n    [0xB2, '2'],\n    [0x2082, '2'],\n    [0x2461, '2'],\n    [0x24F6, '2'],\n    [0x2777, '2'],\n    [0x2781, '2'],\n    [0x278B, '2'],\n    [0xFF12, '2'],\n    [0x2489, '2.'],\n    [0x2475, '(2)'],\n    [0xB3, '3'],\n    [0x2083, '3'],\n    [0x2462, '3'],\n    [0x24F7, '3'],\n    [0x2778, '3'],\n    [0x2782, '3'],\n    [0x278C, '3'],\n    [0xFF13, '3'],\n    [0x248A, '3.'],\n    [0x2476, '(3)'],\n    [0x2074, '4'],\n    [0x2084, '4'],\n    [0x2463, '4'],\n    [0x24F8, '4'],\n    [0x2779, '4'],\n    [0x2783, '4'],\n    [0x278D, '4'],\n    [0xFF14, '4'],\n    [0x248B, '4.'],\n    [0x2477, '(4)'],\n    [0x2075, '5'],\n    [0x2085, '5'],\n    [0x2464, '5'],\n    [0x24F9, '5'],\n    [0x277A, '5'],\n    [0x2784, '5'],\n    [0x278E, '5'],\n    [0xFF15, '5'],\n    [0x248C, '5.'],\n    [0x2478, '(5)'],\n    [0x2076, '6'],\n    [0x2086, '6'],\n    [0x2465, '6'],\n    [0x24FA, '6'],\n    [0x277B, '6'],\n    [0x2785, '6'],\n    [0x278F, '6'],\n    [0xFF16, '6'],\n    [0x248D, '6.'],\n    [0x2479, '(6)'],\n    [0x2077, '7'],\n    [0x2087, '7'],\n    [0x2466, '7'],\n    [0x24FB, '7'],\n    [0x277C, '7'],\n    [0x2786, '7'],\n    [0x2790, '7'],\n    [0xFF17, '7'],\n    [0x248E, '7.'],\n    [0x247A, '(7)'],\n    [0x2078, '8'],\n    [0x2088, '8'],\n    [0x2467, '8'],\n    [0x24FC, '8'],\n    [0x277D, '8'],\n    [0x2787, '8'],\n    [0x2791, '8'],\n    [0xFF18, '8'],\n    [0x248F, '8.'],\n    [0x247B, '(8)'],\n    [0x2079, '9'],\n    [0x2089, '9'],\n    [0x2468, '9'],\n    [0x24FD, '9'],\n    [0x277E, '9'],\n    [0x2788, '9'],\n    [0x2792, '9'],\n    [0xFF19, '9'],\n    [0x2490, '9.'],\n    [0x247C, '(9)'],\n    [0x2469, '10'],\n    [0x24FE, '10'],\n    [0x277F, '10'],\n    [0x2789, '10'],\n    [0x2793, '10'],\n    [0x2491, '10.'],\n    [0x247D, '(10)'],\n    [0x246A, '11'],\n    [0x24EB, '11'],\n    [0x2492, '11.'],\n    [0x247E, '(11)'],\n    [0x246B, '12'],\n    [0x24EC, '12'],\n    [0x2493, '12.'],\n    [0x247F, '(12)'],\n    [0x246C, '13'],\n    [0x24ED, '13'],\n    [0x2494, '13.'],\n    [0x2480, '(13)'],\n    [0x246D, '14'],\n    [0x24EE, '14'],\n    [0x2495, '14.'],\n    [0x2481, '(14)'],\n    [0x246E, '15'],\n    [0x24EF, '15'],\n    [0x2496, '15.'],\n    [0x2482, '(15)'],\n    [0x246F, '16'],\n    [0x24F0, '16'],\n    [0x2497, '16.'],\n    [0x2483, '(16)'],\n    [0x2470, '17'],\n    [0x24F1, '17'],\n    [0x2498, '17.'],\n    [0x2484, '(17)'],\n    [0x2471, '18'],\n    [0x24F2, '18'],\n    [0x2499, '18.'],\n    [0x2485, '(18)'],\n    [0x2472, '19'],\n    [0x24F3, '19'],\n    [0x249A, '19.'],\n    [0x2486, '(19)'],\n    [0x2473, '20'],\n    [0x24F4, '20'],\n    [0x249B, '20.'],\n    [0x2487, '(20)'],\n    [0xAB, '\"'],\n    [0xBB, '\"'],\n    [0x201C, '\"'],\n    [0x201D, '\"'],\n    [0x201E, '\"'],\n    [0x2033, '\"'],\n    [0x2036, '\"'],\n    [0x275D, '\"'],\n    [0x275E, '\"'],\n    [0x276E, '\"'],\n    [0x276F, '\"'],\n    [0xFF02, '\"'],\n    [0x2018, '\\''],\n    [0x2019, '\\''],\n    [0x201A, '\\''],\n    [0x201B, '\\''],\n    [0x2032, '\\''],\n    [0x2035, '\\''],\n    [0x2039, '\\''],\n    [0x203A, '\\''],\n    [0x275B, '\\''],\n    [0x275C, '\\''],\n    [0xFF07, '\\''],\n    [0x2010, '-'],\n    [0x2011, '-'],\n    [0x2012, '-'],\n    [0x2013, '-'],\n    [0x2014, '-'],\n    [0x207B, '-'],\n    [0x208B, '-'],\n    [0xFF0D, '-'],\n    [0x2045, '['],\n    [0x2772, '['],\n    [0xFF3B, '['],\n    [0x2046, ']'],\n    [0x2773, ']'],\n    [0xFF3D, ']'],\n    [0x207D, '('],\n    [0x208D, '('],\n    [0x2768, '('],\n    [0x276A, '('],\n    [0xFF08, '('],\n    [0x2E28, '(('],\n    [0x207E, ')'],\n    [0x208E, ')'],\n    [0x2769, ')'],\n    [0x276B, ')'],\n    [0xFF09, ')'],\n    [0x2E29, '))'],\n    [0x276C, '<'],\n    [0x2770, '<'],\n    [0xFF1C, '<'],\n    [0x276D, '>'],\n    [0x2771, '>'],\n    [0xFF1E, '>'],\n    [0x2774, '{'],\n    [0xFF5B, '{'],\n    [0x2775, '}'],\n    [0xFF5D, '}'],\n    [0x207A, '+'],\n    [0x208A, '+'],\n    [0xFF0B, '+'],\n    [0x207C, '='],\n    [0x208C, '='],\n    [0xFF1D, '='],\n    [0xFF01, '!'],\n    [0x203C, '!!'],\n    [0x2049, '!?'],\n    [0xFF03, '#'],\n    [0xFF04, '$'],\n    [0x2052, '%'],\n    [0xFF05, '%'],\n    [0xFF06, '&'],\n    [0x204E, '*'],\n    [0xFF0A, '*'],\n    [0xFF0C, ','],\n    [0xFF0E, '.'],\n    [0x2044, '/'],\n    [0xFF0F, '/'],\n    [0xFF1A, ':'],\n    [0x204F, ';'],\n    [0xFF1B, ';'],\n    [0xFF1F, '?'],\n    [0x2047, '??'],\n    [0x2048, '?!'],\n    [0xFF20, '@'],\n    [0xFF3C, '\\\\'],\n    [0x2038, '^'],\n    [0xFF3E, '^'],\n    [0xFF3F, '_'],\n    [0x2053, '~'],\n    [0xFF5E, '~']\n]);\n\nmodule.exports = ASCIIFolder;\n","import asciiFolder from 'fold-to-ascii'\nimport { isDigit, isLetter } from 'my-lib'\n\n/**\n * Convert curly single quotes and backticks to straight single quotes,\n * convert curly double quotes to straight double quotes\n * @private\n * @param {String} word\n * @returns {String} normalised string\n */\nexport const normaliseQuotes = (word: string): string => {\n    return word.replace(/[‘’`]/g, \"'\").replace(/[“”]/g, '\"')\n}\n\n/**\n * Remove all diacritics and decompose ligatures\n * @private\n * @param {String} line\n * @returns {String} changed string\n */\nexport const simplifyVariations = (line: string): string => {\n    return asciiFolder.foldReplacing(line)\n}\n\n/**\n * Remove control chars, punctuation, symbols etc. from a string\n * @private\n * @param {String} word\n * @param {String} separator\n * @returns {String} stripped string\n */\nexport const stripSigns = (word: string, separator: string): string => {\n    const chars = word.match(/./g) || []\n    const space = ' '\n    const stripped = chars.map((char) => {\n        const isUseful =\n            char.match(/[A-Za-z0-9]/) || isLetter(char) || isDigit(char)\n        return isUseful ? char : space\n    })\n    return stripped.join('').trim().replace(/\\s+/g, separator)\n}\n\n/**\n * Transform helper functions\n * @private\n * @param {String} word\n * @returns {String} transformed word\n */\nexport const toLower = (word: string): string => word.toLowerCase()\nexport const toUpper = (word: string): string => word.toUpperCase()\n","import { isExactMatch } from 'my-lib'\nimport { TransformOptions, RenderModel, RenderMethods } from './types'\nimport {\n    normaliseQuotes,\n    simplifyVariations,\n    stripSigns,\n    toLower,\n    toUpper,\n} from './render-fn'\nimport { RENDER_MODEL } from './constants'\n\n/**\n * Iterative transformation\n * @private\n * @param {String[]} words\n * @param {Object} model\n * @returns {String} transformed words\n */\nconst transform = (\n    words: string[],\n    model: RenderModel,\n    options: TransformOptions,\n): string => {\n    const transformation = words.map((word, index) => {\n        word = model.preprocess(word, model.delimitOutput)\n        const toPreserve = options.preserve.some((regex) =>\n            isExactMatch(word, regex),\n        )\n        if (index === 0) {\n            // first word\n            return toPreserve\n                ? word\n                : model.firstWordFirstChar(word.substr(0, 1)) +\n                      model.firstWordNextChars(word.substr(1))\n        } else {\n            // successive words\n            return toPreserve\n                ? word\n                : model.nextWordsFirstChar(word.substr(0, 1)) +\n                      model.nextWordsNextChars(word.substr(1))\n        }\n    })\n    const line = transformation.join(model.delimitOutput)\n    return model.postProcess(line)\n}\n\nexport const patternRendering = function (\n    words: string[],\n    options: TransformOptions,\n): RenderMethods {\n    const techProcessing = {\n        preprocess: function (word: string, delimitOutput: string): string {\n            word = simplifyVariations(word)\n            word = normaliseQuotes(word)\n            word = stripSigns(word, delimitOutput)\n            return word\n        },\n    }\n\n    /****************************************\n     * cap-marked words\n     ****************************************/\n\n    /**\n     * capMarkedWords base pattern\n     * @param {Function} firstWordFirstChar\n     * @param {Function} nextWordsFirstChar\n     * @private\n     * @returns {String} transformed words\n     */\n    const capMarkedWords = (\n        firstWordFirstChar: (word: string) => string, // eslint-disable-line no-unused-vars\n        nextWordsFirstChar: (word: string) => string, // eslint-disable-line no-unused-vars\n    ): string => {\n        const model = Object.assign({}, RENDER_MODEL, techProcessing, {\n            delimitOutput: '',\n            firstWordFirstChar: firstWordFirstChar,\n            firstWordNextChars: toLower,\n            nextWordsFirstChar: nextWordsFirstChar,\n            nextWordsNextChars: toLower,\n        })\n        return transform(words, model, options)\n    }\n\n    const camelCase = (): string => {\n        return capMarkedWords(toLower, toUpper)\n    }\n    const pascalCase = (): string => {\n        return capMarkedWords(toUpper, toUpper)\n    }\n\n    /****************************************\n     * Human, linguistic patterns\n     ****************************************/\n\n    /**\n     * humanSentence pattern\n     * @returns {String} transformed words\n     */\n    const humanSentence = (): string => {\n        const model = Object.assign({}, RENDER_MODEL, {\n            delimitOutput: ' ',\n            firstWordFirstChar: toUpper,\n            firstWordNextChars: toLower,\n            nextWordsFirstChar: toLower,\n            nextWordsNextChars: toLower,\n        })\n        return transform(words, model, options)\n    }\n\n    /**\n     * humanTitle pattern\n     * @returns {String} transformed words\n     */\n    const humanTitle = (): string => {\n        const model = Object.assign({}, RENDER_MODEL, {\n            delimitOutput: ' ',\n            firstWordFirstChar: toUpper,\n            nextWordsFirstChar: toUpper,\n        })\n        return transform(words, model, options)\n    }\n\n    /****************************************\n     * delimitedLowerCase patterns\n     ****************************************/\n\n    /**\n     * delimitedLowerCase base pattern\n     * @private\n     * @param {String} delimitOutput\n     * @returns {String} delimitedLowerCase transformed words\n     */\n    const delimitedLowerCase = (delimitOutput: string): string => {\n        const model = Object.assign({}, RENDER_MODEL, techProcessing, {\n            delimitOutput: delimitOutput,\n            firstWordFirstChar: toLower,\n            firstWordNextChars: toLower,\n            nextWordsFirstChar: toLower,\n            nextWordsNextChars: toLower,\n        })\n        return transform(words, model, options)\n    }\n\n    const dotCase = (): string => {\n        return delimitedLowerCase('.')\n    }\n    const paramCase = (): string => {\n        return delimitedLowerCase('-')\n    }\n    const pathCase = (): string => {\n        return delimitedLowerCase('/')\n    }\n    const searchCase = (): string => {\n        return delimitedLowerCase('+')\n    }\n    const snakeCase = (): string => {\n        return delimitedLowerCase('_')\n    }\n    const spaceCase = (): string => {\n        return delimitedLowerCase(' ')\n    }\n\n    /****************************************\n     * other variable related patterns\n     ****************************************/\n\n    /**\n     * constantCase pattern\n     * @param {String} delimiter\n     * @returns {String} constantCase transformed words\n     */\n    const constantCase = (): string => {\n        const model = Object.assign({}, RENDER_MODEL, techProcessing, {\n            delimitOutput: '_',\n            firstWordFirstChar: toUpper,\n            firstWordNextChars: toUpper,\n            nextWordsFirstChar: toUpper,\n            nextWordsNextChars: toUpper,\n        })\n        return transform(words, model, options)\n    }\n\n    /**\n     * headerCase pattern\n     * @private\n     * @param {String} delimimter\n     * @returns {String} headerCase transformed words\n     */\n    const headerCase = (): string => {\n        const model = Object.assign({}, RENDER_MODEL, techProcessing, {\n            delimitOutput: '-',\n            firstWordFirstChar: toUpper,\n            firstWordNextChars: toLower,\n            nextWordsFirstChar: toUpper,\n            nextWordsNextChars: toLower,\n        })\n        return transform(words, model, options)\n    }\n\n    const renderMethods: RenderMethods = {\n        camelCase: camelCase,\n        pascalCase: pascalCase,\n        humanSentence: humanSentence,\n        humanTitle: humanTitle,\n        dotCase: dotCase,\n        paramCase: paramCase,\n        pathCase: pathCase,\n        searchCase: searchCase,\n        snakeCase: snakeCase,\n        spaceCase: spaceCase,\n        constantCase: constantCase,\n        headerCase: headerCase,\n    }\n\n    return renderMethods\n}\n","import { isAlphaNumeric, isExactMatch } from 'my-lib'\nimport {\n    dedupe,\n    tidy,\n    delimitWords,\n    delimitChunks,\n    normaliseProtections,\n} from './collect-fn'\nimport {\n    ModuleCache,\n    TransformOptions,\n    UserOptions,\n    TransformCase,\n} from './types'\nimport { INTAKE_OPTIONS } from './constants'\nimport { patternRendering } from './render'\n\n/**\n * Transform a camelcase object-key to title\n * @param {String} line\n * @param {Object} options\n * @returns {Object} - the 'prototype' / methods and some variables\n */\nexport const wordCollector = function (\n    line: string,\n    userOptions: UserOptions,\n): TransformCase {\n    const emptyProtection: RegExp[] = []\n    const normalisedProtections = {\n        delimit: userOptions.delimit\n            ? normaliseProtections(userOptions.delimit)\n            : emptyProtection,\n        preserve: userOptions.preserve\n            ? normaliseProtections(userOptions.preserve)\n            : emptyProtection,\n    }\n\n    const options: TransformOptions = Object.assign(\n        {},\n        INTAKE_OPTIONS,\n        userOptions,\n        normalisedProtections,\n    )\n\n    const normalisedLine = options.delimitInput\n        ? dedupe(tidy(line), options.delimitInput)\n        : tidy(line)\n\n    // prepare\n    const _origin: ModuleCache = {\n        input: line,\n        normalised: normalisedLine,\n        revised: normalisedLine,\n        isAlphaNumeric: isAlphaNumeric(normalisedLine),\n    }\n\n    // different routes for technical (transition-delimited) from\n    //     linguistic transforms (character-delimited)\n    const delimiter = _origin.isAlphaNumeric\n        ? options.delimitOutput\n        : options.delimitInput || options.delimitOutput\n\n    // preserve, delimit - these strings must be kept together\n    const chunks = [\n        ...normalisedProtections.preserve,\n        ...normalisedProtections.delimit,\n    ]\n    if (chunks.length) {\n        _origin.revised = delimitChunks(_origin.normalised, chunks, delimiter)\n    }\n\n    const self = {\n        _origin: _origin,\n        options: options,\n        _phrase: '',\n        words: [] as string[],\n    }\n\n    // produce an array with words\n    if (_origin.isAlphaNumeric) {\n        const parts = _origin.revised.split(delimiter)\n        self._phrase = parts\n            .map((part) =>\n                chunks.some((regex) => isExactMatch(part, regex))\n                    ? part\n                    : delimitWords(part, options),\n            )\n            .join(delimiter)\n    } else {\n        self._phrase = _origin.revised\n    }\n    self.words = self._phrase.split(delimiter)\n\n    return Object.assign(self, patternRendering(self.words, options))\n}\n","import { wordCollector } from './collect'\nimport { UserOptions, TransformCase } from './types'\n\nconst index = function (input: string, options?: UserOptions): TransformCase {\n    if (!options) options = {}\n    return wordCollector(input, options)\n}\n\nexport default index\n"],"names":["e","t","Boolean","length","n","match","o","toLowerCase","toUpperCase","r","c","f","_a","htmlDecodeTree","Uint16Array","split","map","charCodeAt","xmlDecodeTree","decodeMap","Map","fromCodePoint","String","codePoint","output","fromCharCode","CharCodes","BinTrieFlags","EntityDecoderState","DecodingMode","isNumber","code","ZERO","NINE","isEntityInAttributeInvalidEnd","EQUALS","UPPER_A","UPPER_Z","LOWER_A","LOWER_Z","isAsciiAlphaNumeric","EntityDecoder","constructor","decodeTree","emitCodePoint","errors","this","state","EntityStart","consumed","result","treeIndex","excess","decodeMode","Strict","startEntity","write","str","offset","NUM","NumericStart","stateNumericStart","NamedEntity","stateNamedEntity","NumericDecimal","stateNumericDecimal","NumericHex","stateNumericHex","LOWER_X","addToNumericResult","start","end","base","digitCount","Math","pow","parseInt","substr","startIdx","char","UPPER_F","LOWER_F","emitNumericEntity","lastCp","expectedLength","absenceOfDigitsInNumericCharacterReference","SEMI","get","replaceCodePoint","missingSemicolonAfterCharacterReference","validateNumericCharacterReference","current","valueLength","VALUE_LENGTH","determineBranch","max","Attribute","emitNotTerminatedNamedEntity","emitNamedEntityData","getDecoder","ret","decoder","lastIndex","indexOf","slice","len","nodeIdx","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","value","lo","hi","mid","midVal","htmlDecoder","INTAKE_OPTIONS","delimit","preserve","delimitLetterNumber","delimitLowerUpper","delimitNumberLetter","delimitUpperLower","delimitUpperUpperLower","delimitInput","delimitOutput","RENDER_MODEL","preprocess","word","delimiter","replace","postProcess","line","firstWordFirstChar","firstWordNextChars","nextWordsFirstChar","nextWordsNextChars","SPACE_REGEX","CONTROL_REGEX","dedupe","leading","RegExp","trailing","doubling","decodeHtmlEntities","entity","mode","Legacy","decodeHTML","tidy","trim","needToInsertDelimiter","prev","curr","next","options","letNum","isLetter","isDigit","lowUp","isLower","isUpper","numLet","upLow","upUpLow","normaliseProtections","protections","pt","ASCIIFolder","static","replacement","_fold","fallback","Error","character","mapping","undefined","join","toLower","toUpper","transform","words","model","transformation","index","toPreserve","some","regex","isExactMatch","patternRendering","techProcessing","separator","chars","stripSigns","normaliseQuotes","asciiFolder","foldReplacing","capMarkedWords","Object","assign","delimitedLowerCase","camelCase","pascalCase","humanSentence","humanTitle","dotCase","paramCase","pathCase","searchCase","snakeCase","spaceCase","constantCase","headerCase","wordCollector","userOptions","emptyProtection","normalisedProtections","normalisedLine","_origin","input","normalised","revised","isAlphaNumeric","chunks","rules","usedMatches","Set","forEach","rule","foundMatches","add","has","delimitChunks","self","_phrase","parts","part","phrase","i","delimitWords"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,7]}