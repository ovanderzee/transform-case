{"version":3,"file":"transformCase.js","sources":["../src/utilities.js","../src/constants.js","../src/render.js","../src/collect.js","../src/index.js"],"sourcesContent":["/**\n * Helper Test for being a string with length 1\n * @private\n * @param {String} char\n * @returns {Boolean} is a number 0-9\n */\nconst isChar = char => {\n    return Boolean(char && typeof char === 'string' && char.length === 1)\n}\n\n/**\n * Test for being a string representation of a digit\n * @private\n * @param {String} char\n * @returns {Boolean} is a number 0-9\n */\nconst isDigit = char => {\n    return isChar(char) && Boolean(char.match(/[0-9]/))\n}\n\n/**\n * Test for being a letter\n * @private\n * @param {String} char\n * @returns {Boolaen} char is a letter\n */\nconst isLetter = char => {\n    return isChar(char) && char.toLowerCase() !== char.toUpperCase()\n}\n\n/**\n * Test for being a lowercase letter\n * @private\n * @param {String} char\n * @returns {Boolaen} char is a lower-case letter\n */\nconst isLower = char => {\n    return (\n        isChar(char) &&\n        char === char.toLowerCase() &&\n        char !== char.toUpperCase()\n    )\n}\n\n/**\n * Test for being an uppercase letter\n * @private\n * @param {String} char\n * @returns {Boolaen} char is a upper-case letter\n */\nconst isUpper = char => {\n    return (\n        isChar(char) &&\n        char === char.toUpperCase() &&\n        char !== char.toLowerCase()\n    )\n}\n\n/**\n * Test for being a string consisting of letters and/or digits\n * @private\n * @param {String} line\n * @returns {Boolean} consists of letters and/or digits only\n */\nconst isPureAlphaNumeric = line => {\n    return (\n        line &&\n        line.split &&\n        !line.split('').some(char => {\n            return !(isLetter(char) || isDigit(char))\n        })\n    )\n}\n\n/**\n * Check for a match covering the string entirely\n * @private\n * @param {String} word\n * @param {RegExp} regex\n * @returns {Boolean}\n */\nconst isExactMatch = (word, regex) => {\n    const match = word.match(regex)\n    const result = match && match[0] === word\n    return result\n}\n\nexport { isDigit, isLetter, isLower, isUpper, isPureAlphaNumeric, isExactMatch }\n","/*\n * Intake options\n * @member {Array} delimit - units to be kept together - should be like a human word\n *    @member {String || RegExp}\n * @member {Array} preserve - units to be kept together and be protected - should be like a human word\n *    @member {String || RegExp}\n * @member {Object} replace - {toReplace1: replacement1, toReplace2: replacement2}\n * @member {String} delimitInput - character to delimit input\n * @member {Boolean} delimitLetterNumber - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitLowerUpper - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitNumberLetter - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitUpperLower - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {Boolean} delimitUpperUpperLower - insert delimiter in this transition in pure alphaNumeric patterns\n * @member {String} delimitOutput - character to delimit output\n */\nconst INTAKE_OPTIONS = {\n    delimit: [],\n    preserve: [],\n    replace: {},\n    delimitInput: '',\n    delimitLetterNumber: true,\n    delimitLowerUpper: true,\n    delimitNumberLetter: true,\n    delimitUpperLower: false,\n    delimitUpperUpperLower: true,\n    delimitOutput: ' ',\n}\n\n/*\n * Render model, with do-nothing-functions, to be exchanged by the pattern fimally\n * @member {Function} preprocess\n      do operations in fresh words array, for pure alphaNumeric patterns\n * @member {Function} postProcess\n      do operations in string, just before delivery, for pure alphaNumeric patterns\n * @member {Function} firstWordFirstChar - transform word parts\n * @member {Function} firstWordNextChars - transform word parts\n * @member {Function} nextWordsFirstChar - transform word parts\n * @member {Function} nextWordsNextChars - transform word parts\n */\nconst RENDER_MODEL = {\n    preprocess: words => words,\n    postProcess: line => line,\n    firstWordFirstChar: word => word,\n    firstWordNextChars: word => word,\n    nextWordsFirstChar: word => word,\n    nextWordsNextChars: word => word,\n}\n\nexport { INTAKE_OPTIONS, RENDER_MODEL }\n","import { isExactMatch } from './utilities'\nimport { RENDER_MODEL } from './constants'\n\n/**\n * Solve the problem that concatenated numbers loose menaing:\n * delimit the numbers with the delimiter that matches /\\w/\n * @private\n * @param {Array} words\n * @returns {Array} enhanced words\n */\nconst wordDelimitNumbers = words => {\n    const delimitedNumbers = /(\\d)[-:,./](\\d)/g\n    return words.map(word =>\n        word.match(delimitedNumbers)\n            ? word\n                  .replace(delimitedNumbers, '$1_$2')\n                  .replace(delimitedNumbers, '$1_$2')\n            : word,\n    )\n}\n\n/**\n * Convert curly single quotes and backticks to straight single quotes,\n * convert curly double quotes to straight double quotes\n * @private\n * @param {String} line\n * @returns {String} normalised string\n */\nconst normaliseQuotes = line => {\n    return line.replace(/‘’`/g, \"'\").replace(/“”/g, '\"')\n}\n\n/**\n * Remove all punctuation from a string\n * @private\n * @param {String} line\n * @returns {String} stripped string\n */\nconst removePunctuation = line => {\n    return normaliseQuotes(line).replace(/[…,:;[\\](){}\\-‐–—'\".!?]/g, '')\n}\n\n/**\n * Transform helper functions\n * @private\n * @param {String} word\n * @returns {String} transformed word\n */\nconst asIs = word => word\nconst toLower = word => word.toLowerCase()\nconst toUpper = word => word.toUpperCase()\n\nconst patterns = function(words, options) {\n    /**\n     * Iterative transformation\n     * @private\n     * @param {Object} model\n     * @returns {String} transformed words\n     */\n    const transform = model => {\n        const currentWords = model.preprocess(words)\n        const transformation = currentWords.map((word, index) => {\n            if (index === 0) {\n                return options.preserve.some(regex => isExactMatch(word, regex))\n                    ? word\n                    : model.firstWordFirstChar(word.substr(0, 1)) +\n                          model.firstWordNextChars(word.substr(1))\n            } else {\n                return options.preserve.some(regex => isExactMatch(word, regex))\n                    ? word\n                    : model.nextWordsFirstChar(word.substr(0, 1)) +\n                          model.nextWordsNextChars(word.substr(1))\n            }\n        })\n        return model.postProcess(transformation.join(model.delimitOutput))\n    }\n\n    /**\n     * camelCase pattern\n     * @param {Object} model\n     * @returns {String} transformed words\n     */\n    const camelCase = () => {\n        const model = Object.assign({}, RENDER_MODEL, {\n            preprocess: wordDelimitNumbers,\n            postProcess: removePunctuation,\n            delimitOutput: '',\n            firstWordFirstChar: toLower,\n            firstWordNextChars: toLower,\n            nextWordsFirstChar: toUpper,\n            nextWordsNextChars: toLower,\n        })\n        return transform(model)\n    }\n\n    /**\n     * humanTitle pattern\n     * @param {Object} model\n     * @returns {String} transformed words\n     */\n    const humanTitle = () => {\n        const model = Object.assign({}, RENDER_MODEL, {\n            delimitOutput: ' ',\n            firstWordFirstChar: toUpper,\n            nextWordsFirstChar: toUpper,\n        })\n        return transform(model)\n    }\n\n    return {\n        camelCase: camelCase,\n        humanTitle: humanTitle,\n    }\n}\n\nexport { patterns }\n","import {\n    isDigit,\n    isLetter,\n    isLower,\n    isUpper,\n    isPureAlphaNumeric,\n    isExactMatch,\n} from './utilities'\nimport { INTAKE_OPTIONS } from './constants'\nimport { patterns } from './render'\n\n/*\n * Clean the line from extraneous characters\n * @private\n * @param {String} line\n * @param {String} delimiter\n * @returns {String} cleaned line\n */\nconst clean = (line, delimiter) => {\n    const leading = new RegExp('^' + delimiter)\n    const trailing = new RegExp(delimiter + '$')\n    const doubling = new RegExp(delimiter + delimiter, 'g')\n    return line\n        .replace(leading, '')\n        .replace(trailing, '')\n        .replace(doubling, delimiter)\n}\n\n/* Test need to insert a delimiter\n * @private\n * @param {String} prev - previous character\n * @param {String} curr - current character\n * @param {Object} options\n * @returns {String} Need to insert a delimiter\n */\nconst insertDelimiter = (prev, curr, next, options) => {\n    let letNum, lowUp, numLet, upLow, upUpLow\n    letNum = options.delimitLetterNumber && isLetter(prev) && isDigit(curr)\n    lowUp = options.delimitLowerUpper && isLower(prev) && isUpper(curr)\n    numLet = options.delimitNumberLetter && isDigit(prev) && isLetter(curr)\n    upLow = options.delimitUpperLower && isUpper(prev) && isLower(curr)\n    upUpLow =\n        options.delimitUpperUpperLower &&\n        isUpper(prev) &&\n        isUpper(curr) &&\n        isLower(next)\n\n    let delimit = letNum || lowUp || numLet || upLow || upUpLow\n    return delimit\n}\n\n/* Put seperator before each concatenated word\n * @private\n * @param {String} line\n * @param {Object} options\n * @returns {String} phrase of seperated words\n */\nconst delimitWords = (line, options) => {\n    let phrase = line[0]\n    for (let i = 1; i < line.length; i++) {\n        if (insertDelimiter(line[i - 1], line[i], line[i + 1] || '', options)) {\n            phrase += options.delimitOutput\n        }\n        phrase += line[i]\n    }\n    return phrase\n}\n\n/* Change all 'units' in regex to deal with variable digits\n * @param {String || RegExp} unit\n * @returns {RegExp}\n */\nconst stringToRegexp = unit => {\n    if (typeof unit === 'string') return new RegExp(unit, 'g')\n    if (unit instanceof RegExp) return unit\n}\n\n/**\n * Transform a camelcase object-key to title\n * @param {String} line\n * @param {Object} options\n * @returns {Object} - the 'prototype' / methods and some variables\n */\nconst TransformCase = function(line, userOptions) {\n    if (!line) return\n    let self = {}\n    const options = Object.assign({}, INTAKE_OPTIONS, userOptions)\n\n    // prepare\n    self.orgin = {\n        input: line,\n    }\n    line = line.trim().replace(/\\s+/g, ' ')\n    if (options.delimitInput) {\n        self.orgin.normalised = clean(line, options.delimitInput)\n    } else {\n        self.orgin.normalised = line\n    }\n    self.orgin.isPureAlphaNumeric = isPureAlphaNumeric(self.orgin.normalised)\n    let revised = self.orgin.normalised\n\n    // distinguish between technical from linguistic transforms\n    let delimiter\n    if (self.orgin.isPureAlphaNumeric) {\n        // assume technical phrase, or this is one human word\n        // delimit by case transition\n        delimiter = options.delimitOutput\n    } else {\n        // assume human input or technical/coded when input delimiter is given\n        // delimit by specified delimiter, (default: a space)\n        delimiter = options.delimitInput || options.delimitOutput\n    }\n\n    // replace regardsless of delimiting\n    const replaceEntries = Object.entries(options.replace)\n    if (options.replace && replaceEntries.length) {\n        for (let [key, value] of replaceEntries) {\n            revised = revised.replace(new RegExp(key, 'g'), value)\n        }\n    }\n\n    // preserve, delimit - these strings must be kept together - should be like a human word\n    const units = [].concat(options.preserve, options.delimit)\n    if (units.length) {\n        units.forEach(unit => {\n            revised = revised.replace(unit, delimiter + '$&' + delimiter)\n        })\n        revised = clean(revised, delimiter)\n    }\n\n    // produce an array with words\n    if (self.orgin.isPureAlphaNumeric) {\n        // assume technical phrase, or this is one human word\n        // delimit by case transition\n        let parts = revised.split(delimiter)\n        self.phrase = parts\n            .map(part =>\n                options.preserve.some(regex => isExactMatch(part, regex))\n                    ? part\n                    : delimitWords(part, options),\n            )\n            .join(delimiter)\n        self.words = self.phrase.split(delimiter)\n    } else {\n        // assume human input or technical/coded when input delimiter is given\n        // delimit by specified delimiter, (default: a space)\n        self.phrase = revised\n        self.words = revised.split(delimiter)\n    }\n\n    return Object.assign(self, patterns(self.words, options))\n}\n\nexport { TransformCase }\n","import { TransformCase } from './collect'\n\nvar index = function(input, options) {\n    if (!options) options = {}\n    return TransformCase(input, options)\n}\n\nexport default index\n"],"names":["isChar","char","Boolean","length","isDigit","match","isLetter","toLowerCase","toUpperCase","isLower","isUpper","isExactMatch","word","regex","INTAKE_OPTIONS","delimit","preserve","replace","delimitInput","delimitLetterNumber","delimitLowerUpper","delimitNumberLetter","delimitUpperLower","delimitUpperUpperLower","delimitOutput","RENDER_MODEL","preprocess","words","postProcess","line","firstWordFirstChar","firstWordNextChars","nextWordsFirstChar","nextWordsNextChars","wordDelimitNumbers","delimitedNumbers","map","removePunctuation","normaliseQuotes","toLower","toUpper","clean","delimiter","leading","RegExp","trailing","doubling","insertDelimiter","prev","curr","next","options","letNum","lowUp","numLet","upLow","upUpLow","TransformCase","userOptions","self","Object","assign","orgin","input","trim","normalised","isPureAlphaNumeric","split","some","revised","replaceEntries","entries","key","value","units","concat","forEach","unit","parts","phrase","part","i","delimitWords","join","transform","model","transformation","index","substr","camelCase","humanTitle","patterns"],"mappings":"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"}