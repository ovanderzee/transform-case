{"version":3,"file":"transformCase.js","sources":["../src/utilities.js","../src/constants.js","../src/transformCase.js","../src/index.js"],"sourcesContent":["/**\n * Helper Test for being a string with length 1\n * @private\n * @param {String} char\n * @returns {Boolean} is a number 0-9\n */\nconst isChar = char => {\n    return Boolean(char && typeof char === 'string' && char.length === 1)\n}\n\n/**\n * Test for being a string representation of a digit\n * @private\n * @param {String} char\n * @returns {Boolean} is a number 0-9\n */\nconst isDigit = char => {\n    return isChar(char) && Boolean(char.match(/[0-9]/))\n}\n\n/**\n * Test for being a letter\n * @private\n * @param {String} char\n * @returns {Boolaen} char is a letter\n */\nconst isLetter = char => {\n    return isChar(char) && char.toLowerCase() !== char.toUpperCase()\n}\n\n/**\n * Test for being a lowercase letter\n * @private\n * @param {String} char\n * @returns {Boolaen} char is a lower-case letter\n */\nconst isLower = char => {\n    return (\n        isChar(char) &&\n        char === char.toLowerCase() &&\n        char !== char.toUpperCase()\n    )\n}\n\n/**\n * Test for being an uppercase letter\n * @private\n * @param {String} char\n * @returns {Boolaen} char is a upper-case letter\n */\nconst isUpper = char => {\n    return (\n        isChar(char) &&\n        char === char.toUpperCase() &&\n        char !== char.toLowerCase()\n    )\n}\n\n/**\n * Test for being a string consisting of letters and/or digits\n * @private\n * @param {String} line\n * @returns {Boolean} consists of letters and/or digits only\n */\nconst isPureAlphaNumeric = line => {\n    return (\n        line &&\n        line.split &&\n        !line.split('').some(char => {\n            return !isLetter(char) && !isDigit(char)\n        })\n    )\n}\n\nexport { isDigit, isLetter, isLower, isUpper, isPureAlphaNumeric }\n","/*\n * Intake options\n * @member {Array} preserve - [keep1, keep2]\n * @member {Object} replace - {toReplace1: replacement1, toReplace2: replacement2}\n */\nconst INTAKE_OPTIONS = {\n    delimit: [],\n    preserve: [],\n    replace: {},\n    delimitInput: '',\n    delimitLetterNumber: true,\n    delimitLowerUpper: true,\n    delimitNumberLetter: false,\n    delimitUpperLower: false,\n    delimitOutput: ' ',\n}\n\n/*\n * Render model, with do-nothing-functions\n */\nconst RENDER_MODEL = {\n    postProcess: word => word,\n    firstWordFirstChar: word => word,\n    firstWordNextChars: word => word,\n    nextWordsFirstChar: word => word,\n    nextWordsNextChars: word => word,\n}\n\nexport { INTAKE_OPTIONS, RENDER_MODEL }\n","import {\n    isDigit,\n    isLetter,\n    isLower,\n    isUpper,\n    isPureAlphaNumeric,\n} from './utilities.js'\nimport { INTAKE_OPTIONS, RENDER_MODEL } from './constants.js'\n\n/*\n * Clean the line from extraneous characters\n * @param {String} line\n * @param {String} delimiter\n * @returns {String} cleaned line\n */\nconst clean = (line, delimiter) => {\n    const leading = new RegExp('^' + delimiter)\n    const trailing = new RegExp(delimiter + '$')\n    const doubling = new RegExp(delimiter + delimiter, 'g')\n    return line\n        .replace(leading, '')\n        .replace(trailing, '')\n        .replace(doubling, delimiter)\n}\n\n/* Test need to insert a delimiter\n * @param {String} prev - previous character\n * @param {String} curr - current character\n * @param {Object} options\n * @returns {String} Need to insert a delimiter\n */\nconst insertDelimiter = (prev, curr, options) => {\n    let letNum, lowUp, numLet, upLow\n    letNum = options.delimitLetterNumber && isLetter(prev) && isDigit(curr)\n    lowUp = options.delimitLowerUpper && isLower(prev) && isUpper(curr)\n    numLet = options.delimitNumberLetter && isDigit(prev) && isLetter(curr)\n    upLow = options.delimitUpperLower && isUpper(prev) && isLower(curr)\n    // console.log(prev, curr, letNum, lowUp, numLet, upLow)\n    return letNum || lowUp || numLet || upLow\n}\n\n/* Put seperator before each concatenated word\n * @param {String} line\n * @param {Object} options\n * @returns {String} phrase of seperated words\n */\nconst delimitWords = (line, options) => {\n    let phrase = line[0]\n    for (let i = 1; i < line.length; i++) {\n        if (insertDelimiter(line[i - 1], line[i], options)) {\n            phrase += options.delimitOutput\n        }\n        phrase += line[i]\n    }\n    return phrase\n}\n\nconst normaliseQuotes = line => {\n    return line.replace(/‘’`/g, \"'\").replace(/“”/g, '\"')\n}\n\nconst removePunctuation = line => {\n    return normaliseQuotes(line).replace(/[…,:;[\\](){}\\-‐–—'\".!?]/g, '')\n}\n\n/**\n * Transform a camelcase object-key to title\n * @param {String} line\n * @param {Object} options\n */\nconst TransformCase = function(line, userOptions) {\n    if (!line) return\n\n    const options = Object.assign({}, INTAKE_OPTIONS, userOptions)\n\n    // prepare\n    this.orgin = {\n        input: line,\n    }\n    line = line.trim().replace(/\\s+/g, ' ')\n    if (options.delimitInput) {\n        this.orgin.normalised = clean(line, options.delimitInput)\n    } else {\n        this.orgin.normalised = line\n    }\n    this.orgin.isPureAlphaNumeric = isPureAlphaNumeric(this.orgin.normalised)\n    let revised = this.orgin.normalised\n\n    // distinguish between technical from linguistic transforms\n    let delimiter\n    if (options.delimitInput) {\n        // delimit by given character\n        delimiter = options.delimitInput\n    } else if (this.orgin.isPureAlphaNumeric) {\n        // delimit by case transition\n        delimiter = options.delimitOutput\n    } else {\n        // delimit by non-letter-non-digit character\n        // most abundant nonAlphaNumeric as delimiter?\n        // intersect used nonAlphaNumerics and a most popular list?\n        delimiter = options.delimitOutput\n    }\n\n    // replace regardsless of delimiting\n    const replaceEntries = Object.entries(options.replace)\n    if (options.replace && replaceEntries.length) {\n        for (let [key, value] of replaceEntries) {\n            revised = revised.replace(new RegExp(key, 'g'), value)\n        }\n    }\n\n    // preserve, delimit - these strings must be kept together - should be a human word\n    const kepings = [].concat(options.preserve, options.delimit)\n    if (kepings.length) {\n        kepings.forEach(keep => {\n            revised = revised.replace(\n                new RegExp(keep, 'g'),\n                delimiter + keep + delimiter,\n            )\n        })\n        revised = clean(revised, delimiter)\n    }\n\n    // produce an array with words\n    if (options.delimitInput) {\n        // delimit by given character\n        this.phrase = revised\n        this.words = revised.split(options.delimitInput)\n    } else if (this.orgin.isPureAlphaNumeric) {\n        // delimit by case transition\n        let parts = revised.split(options.delimitOutput)\n        this.phrase = parts\n            .map(pt =>\n                options.preserve.includes(pt) ? pt : delimitWords(pt, options),\n            )\n            .join(options.delimitOutput)\n        this.words = this.phrase.split(options.delimitOutput)\n    } else {\n        // delimit by non-letter-non-digit character\n        this.phrase = revised\n        this.words = revised.split(options.delimitOutput)\n    }\n\n    const toLower = word => word.toLowerCase()\n    const toUpper = word => word.toUpperCase()\n\n    const transform = model => {\n        let transformation = this.words.map((word, index) => {\n            if (index === 0) {\n                return options.preserve.includes(word)\n                    ? word\n                    : model.firstWordFirstChar(word.substr(0, 1)) +\n                          model.firstWordNextChars(word.substr(1))\n            } else {\n                return options.preserve.includes(word)\n                    ? word\n                    : model.nextWordsFirstChar(word.substr(0, 1)) +\n                          model.nextWordsNextChars(word.substr(1))\n            }\n        })\n        return model.postProcess(transformation.join(model.delimitOutput))\n    }\n\n    this.camelCase = () => {\n        const model = Object.assign({}, RENDER_MODEL, {\n            postProcess: removePunctuation,\n            delimitOutput: '',\n            firstWordFirstChar: toLower,\n            firstWordNextChars: toLower,\n            nextWordsFirstChar: toUpper,\n            nextWordsNextChars: toLower,\n        })\n        return transform(model)\n    }\n\n    this.humanTitle = () => {\n        const model = Object.assign({}, RENDER_MODEL, {\n            delimitOutput: ' ',\n            firstWordFirstChar: toUpper,\n            nextWordsFirstChar: toUpper,\n        })\n        return transform(model)\n    }\n}\n\nexport { TransformCase }\n","import { TransformCase } from './transformCase'\n\nvar index = function(input, options) {\n    if (!options) options = {}\n    return new TransformCase(input, options)\n}\n\nexport default index\n"],"names":["isChar","char","Boolean","length","isDigit","match","isLetter","toLowerCase","toUpperCase","isLower","isUpper","INTAKE_OPTIONS","delimit","preserve","replace","delimitInput","delimitLetterNumber","delimitLowerUpper","delimitNumberLetter","delimitUpperLower","delimitOutput","RENDER_MODEL","postProcess","word","firstWordFirstChar","firstWordNextChars","nextWordsFirstChar","nextWordsNextChars","clean","line","delimiter","leading","RegExp","trailing","doubling","insertDelimiter","prev","curr","options","letNum","lowUp","numLet","upLow","removePunctuation","normaliseQuotes","TransformCase","userOptions","Object","assign","this","orgin","input","trim","normalised","isPureAlphaNumeric","split","some","revised","replaceEntries","entries","key","value","kepings","concat","forEach","keep","phrase","words","parts","map","pt","includes","i","delimitWords","join","toLower","toUpper","transform","model","transformation","index","substr","camelCase","humanTitle"],"mappings":"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"}